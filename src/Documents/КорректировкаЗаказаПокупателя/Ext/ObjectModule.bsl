Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчетаОрганизаций Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Для обеспечения работы глоб. процедур и функций.
Перем ВалютаДокумента Экспорт;

Перем мРезервироватьПоСериям Экспорт;

Перем мМинимальныеЦены Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Если не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Сообщить("Не указан заказ покупателя");
		Возврат Неопределено;
	КонецЕсли;

	Если не ЗначениеЗаполнено(ЗаказПокупателя.Организация) Тогда
		Сообщить("В документе основании не указана организация");
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("");

	ЕстьКонтрагент = Истина;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ЗаказПокупателя,
	|	ЗаказПокупателя.Представление КАК ПредставлениеЗаказа,";

	Если ЕстьКонтрагент Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ЗаказПокупателя.Контрагент    КАК Получатель,";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	ЗаказПокупателя.СкладГруппа КАК Получатель,
		|	ЗаказПокупателя.СкладГруппа.Представление КАК ПредставлениеПолучателя,";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ЗаказПокупателя.Организация     КАК Поставщик,
	|	ЗаказПокупателя.Организация     КАК Организация,
	|	СуммаДокумента,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ПроцентСкидкиНаценки
	|		+ ПроцентАвтоматическихСкидок   КАК Скидка,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		NULL КАК Серия
	|	),
	|	Услуги.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков   КАК ЕдиницаИзмерения,
	|		ПроцентСкидкиНаценки КАК Скидка,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		""""   КАК Характеристика,
	|		NULL КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		""""   КАК Скидка,
	|		Цена,
	|		Сумма,
	|		0 КАК СуммаНДС,
	|		"""" КАК Характеристика,
	|		NULL КАК Серия
	|	)
	|ИЗ
	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
	|
	|ГДЕ
	|	КорректировкаЗаказаПокупателя.Ссылка = &ТекущийДокумент
	|";

	Запрос.Текст = ТекстЗапроса;
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаЗаказаПокупателя_КорректировкаЗаказа";

	Макет = ПолучитьМакет("КорректировкаЗаказа");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка      = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Корректировка заказа покупателя");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ЕстьКонтрагент Тогда
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЗаказПокупателя.Контрагент, Шапка.Дата), "ПолноеНаименование,");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	НазваниеДокумента = Шапка.ЗаказПокупателя.Метаданные().Представление();
	ОбластьМакета.Параметры.ПредставлениеЗаказа = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.ЗаказПокупателя, НазваниеДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСтроки = Ложь;

	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	НомерПоПорядку = 0;
	Всего    = 0;
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ШиринаУжеУвеличина = Ложь;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТовары.Количество > 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВПлюс");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьСуммы);

				ОбластьКолонкаТовар = Макет.Область("Товар");
				Если Не ВыводитьКоды Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
														Макет.Область("КолонкаКодов").ШиринаКолонки;
				КонецЕсли;
				Если НЕ ЕстьСкидки Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
														Макет.Область("СуммаБезСкидки").ШиринаКолонки +
														Макет.Область("СуммаСкидки").ШиринаКолонки;
				КонецЕсли;
				ШиринаУжеУвеличина = Истина;
				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерПоПорядку = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);

			Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);

			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;

		КонецЕсли;
	КонецЦикла;

	ВыборкаСтрокУслуги = Шапка.Услуги.Выбрать();
	Пока ВыборкаСтрокУслуги.Следующий() Цикл

		Если не ЗначениеЗаполнено(ВыборкаСтрокУслуги.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокУслуги.Количество > 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВПлюс");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьСуммы);

				ОбластьКолонкаТовар = Макет.Область("Товар");
				Если Не ВыводитьКоды Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
														Макет.Область("КолонкаКодов").ШиринаКолонки;
				КонецЕсли;
				Если НЕ ЕстьСкидки Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
														Макет.Область("СуммаБезСкидки").ШиринаКолонки +
														Макет.Область("СуммаСкидки").ШиринаКолонки;
				КонецЕсли;
				ШиринаУжеУвеличина = Истина;
				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерПоПорядку = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокУслуги.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокУслуги.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокУслуги);
			ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокУслуги.Товар);
			ТабДокумент.Присоединить(ОбластьДанных);

			Скидка = ВыборкаСтрокУслуги.Сумма  / (100 - ВыборкаСтрокУслуги.Скидка) * ВыборкаСтрокУслуги.Скидка;
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокУслуги.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокУслуги);
			ТабДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ВыборкаСтрокУслуги.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокУслуги.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;

		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если не ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТара.Количество > 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВПлюс");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьСуммы);

				ОбластьКолонкаТовар = Макет.Область("Товар");
				Если Не ВыводитьКоды Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
														Макет.Область("КолонкаКодов").ШиринаКолонки;
				КонецЕсли;
				Если НЕ ЕстьСкидки Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
														Макет.Область("СуммаБезСкидки").ШиринаКолонки +
														Макет.Область("СуммаСкидки").ШиринаКолонки;
				КонецЕсли;
				ШиринаУжеУвеличина = Истина;
				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерПоПорядку = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар       = ВыборкаСтрокТара.Товар;
			ТабДокумент.Присоединить(ОбластьДанных);

			Скидка = 0;
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТара.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ВыборкаСтрокТара.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТара.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;

		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСтроки Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ПодвалТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ПодвалТаблицы|Сумма");
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);

		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.ТекстИтого = "Итого по разделу";
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	ДобавленоПозиций = НомерПоПорядку;
	
	НомерПоПорядку = 0;
	ЕстьСтроки  = Ложь;
	ВсегоВМинус = 0;
	СуммаНДС    = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТовары.Количество < 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВМинус");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьСуммы);

				Если НЕ ШиринаУжеУвеличина Тогда
					ОбластьКолонкаТовар = Макет.Область("Товар");
					Если Не ВыводитьКоды Тогда
						ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
															Макет.Область("КолонкаКодов").ШиринаКолонки;
					КонецЕсли;
					Если НЕ ЕстьСкидки Тогда
						ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
															Макет.Область("СуммаБезСкидки").ШиринаКолонки +
															Макет.Область("СуммаСкидки").ШиринаКолонки;
					КонецЕсли;
				КонецЕсли;

				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерПоПорядку = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар      = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Количество = ВыборкаСтрокТовары.Количество;
			ТабДокумент.Присоединить(ОбластьДанных);

			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = -Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьСуммы.Параметры.Сумма = ВыборкаСтрокТовары.Сумма;
			ТабДокумент.Присоединить(ОбластьСуммы);

			ВсегоВМинус    = ВсегоВМинус + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = ВсегоВМинус + ВсегоСкидок;

		КонецЕсли;
	КонецЦикла;

	ВыборкаСтрокУслуги = Шапка.Услуги.Выбрать();
	Пока ВыборкаСтрокУслуги.Следующий() Цикл

		Если не ЗначениеЗаполнено(ВыборкаСтрокУслуги.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокУслуги.Количество < 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВМинус");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьСуммы);

				Если НЕ ШиринаУжеУвеличина Тогда
					ОбластьКолонкаТовар = Макет.Область("Товар");
					Если Не ВыводитьКоды Тогда
						ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
															Макет.Область("КолонкаКодов").ШиринаКолонки;
					КонецЕсли;
					Если НЕ ЕстьСкидки Тогда
						ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
															Макет.Область("СуммаБезСкидки").ШиринаКолонки +
															Макет.Область("СуммаСкидки").ШиринаКолонки;
					КонецЕсли;
				КонецЕсли;

				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерПоПорядку = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокУслуги.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокУслуги.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокУслуги);
			ОбластьДанных.Параметры.Товар      = СокрЛП(ВыборкаСтрокУслуги.Товар);
			ОбластьДанных.Параметры.Количество = ВыборкаСтрокУслуги.Количество;
			ТабДокумент.Присоединить(ОбластьДанных);

			Скидка = 0;
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = -Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокУслуги.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокУслуги);
			ОбластьСуммы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма;
			ТабДокумент.Присоединить(ОбластьСуммы);

			ВсегоВМинус    = ВсегоВМинус + ВыборкаСтрокУслуги.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокУслуги.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = ВсегоВМинус + ВсегоСкидок;

		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если не ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТара.Количество < 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВМинус");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьСуммы);

				Если НЕ ШиринаУжеУвеличина Тогда
					ОбластьКолонкаТовар = Макет.Область("Товар");
					Если Не ВыводитьКоды Тогда
						ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
															Макет.Область("КолонкаКодов").ШиринаКолонки;
					КонецЕсли;
					Если НЕ ЕстьСкидки Тогда
						ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
															Макет.Область("СуммаБезСкидки").ШиринаКолонки +
															Макет.Область("СуммаСкидки").ШиринаКолонки;
					КонецЕсли;
				КонецЕсли;

				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерПоПорядку = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар      = ВыборкаСтрокТара.Товар;
			ОбластьДанных.Параметры.Количество = ВыборкаСтрокТара.Количество;
			ТабДокумент.Присоединить(ОбластьДанных);

			Скидка = 0;
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = -Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТара.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьСуммы.Параметры.Сумма = ВыборкаСтрокТара.Сумма;
			ТабДокумент.Присоединить(ОбластьСуммы);

			ВсегоВМинус    = ВсегоВМинус + ВыборкаСтрокТара.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТара.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = ВсегоВМинус + ВсегоСкидок;

		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСтроки Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ПодвалТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ПодвалТаблицы|Сумма");
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);

		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.ТекстИтого = "Итого по разделу";
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = -ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(ВсегоВМинус);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;
	
	ОтмененоПозиций = НомерПоПорядку;

	
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьДанных.Параметры.ТекстИтого = "Итоговая сумма изменения заказа:";
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма + ВсегоВМинус);
	ТабДокумент.Присоединить(ОбластьСуммы);

	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = (Сумма + ВсегоВМинус)+ ?(Шапка.СуммаВключаетНДС, 0, Товары.Итог("СуммаНДС"));
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Добавлено наименований " + ДобавленоПозиций + 
		", отменено " + ОтмененоПозиций + ", сумма изменения " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = "Итоговая сумма изменения заказа: " + 
		ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаЗаказа"  Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Процедура проверяет необходимость пересчета скидок и пересчитывает их.
//
// Параметры:
//  Проверка - булево, признак только проверки необходимости пересчета скидок.
//
Процедура ПересчитатьСкидки() Экспорт

	РассчитатьСкидкиПоТоварам();
	РассчитатьСкидкиПоУслугам();

КонецПроцедуры

Процедура РассчитатьСкидкиПоТоварам()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Объединение.Номенклатура,
	|	Объединение.ХарактеристикаНоменклатуры,
	|	Объединение.Цена,
	|	Объединение.ПроцентСкидкиНаценки,
	|	СУММА(Объединение.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказыПокупателей.Количество КАК Количество,
	|		ЗаказыПокупателей.Цена КАК Цена,
	|		ЗаказыПокупателей.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|	ГДЕ
	|		ЗаказыПокупателей.Регистратор = &ЗаказПокупателя
	|		И (НЕ ЗаказыПокупателей.Номенклатура.Услуга)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура,
	|		ЗаказыПокупателей.ХарактеристикаНоменклатуры,
	|		ЗаказыПокупателей.Количество,
	|		ЗаказыПокупателей.Цена,
	|		ЗаказыПокупателей.ПроцентСкидкиНаценки
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|	ГДЕ
	|		ЗаказыПокупателей.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПокупателя
	|		И ЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	|		И ЗаказыПокупателей.Регистратор <> &ТекущаяКорректировка
	|		И (НЕ ЗаказыПокупателей.Номенклатура.Услуга)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		КорректировкаЗаказаПокупателяТовары.Номенклатура,
	|		КорректировкаЗаказаПокупателяТовары.ХарактеристикаНоменклатуры,
	|		КорректировкаЗаказаПокупателяТовары.Количество,
	|		КорректировкаЗаказаПокупателяТовары.Цена,
	|		КорректировкаЗаказаПокупателяТовары.ПроцентСкидкиНаценки
	|	ИЗ
	|		Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателяТовары
	|	ГДЕ
	|		КорректировкаЗаказаПокупателяТовары.Ссылка = &ТекущаяКорректировка
	|) КАК Объединение
	|СГРУППИРОВАТЬ ПО
	|	Объединение.Номенклатура,
	|	Объединение.ХарактеристикаНоменклатуры,
	|	Объединение.Цена,
	|	Объединение.ПроцентСкидкиНаценки
	|");

	Запрос.УстановитьПараметр("ЗаказПокупателя"     , ЗаказПокупателя);
	Запрос.УстановитьПараметр("ТекущаяКорректировка", Ссылка);

	ТаблицаЗаказа = Запрос.Выполнить().Выгрузить();

	СуммаЗаказаБезСкидок = 0;
	Для каждого CтрокаТаблицыЗаказа из ТаблицаЗаказа Цикл
		СуммаЗаказаБезСкидок = СуммаЗаказаБезСкидок + CтрокаТаблицыЗаказа.Цена * CтрокаТаблицыЗаказа.Количество;
	КонецЦикла;

	Если СуммаЗаказаБезСкидок = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
	СтруктураПараметров.Вставить("СуммаДокумента",                       СуммаЗаказаБезСкидок);
	СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
	СтруктураПараметров.Вставить("УчитыватьНДС",                         ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ложь);
	СтруктураПараметров.Вставить("ДатаСкидок",                           Дата);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("УчетнаяПолитика",       РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата));

	КвалификаторЧисла = Новый КвалификаторыЧисла(10,2);
	ТаблицаЗаказа.Колонки.Добавить("ПроцентАвтоматическихСкидок",Новый ОписаниеТипов("Число",КвалификаторЧисла));
	ТаблицаЗаказа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",КвалификаторЧисла));
	ТаблицаЗаказа.Колонки.Добавить("УсловиеАвтоматическойСкидки");
	ТаблицаЗаказа.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

	мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);
	//Получим таблицу заказа с рассчитанными скидками.
	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЗаказПокупателя, ТаблицаЗаказа, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	ОстаткиПоЗаказу = Товары.Выгрузить();
	ОстаткиПоЗаказу.Очистить();

	ОстаткиПоЗаказу = УправлениеЗаказами.ОстаткиТоваровПоЗаказуПокупателя( ЗаказПокупателя, ЗаказПокупателя.ДоговорКонтрагента, Дата - 1);

	//Сформируем табличную часть для корректировки остатков по скидкам.
	СтараяТабличнаяЧасть = Товары;
	ТаблицаДляЦикла = Новый ТаблицаЗначений;
	ТаблицаДляЦикла.Колонки.Добавить("Номенклатура");
	ТаблицаДляЦикла.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДляЦикла.Колонки.Добавить("Цена");
	ТаблицаДляЦикла.Колонки.Добавить("ПроцентСкидкиНаценки");

	Для каждого СтрокаОстатковПоЗаказу из ОстаткиПоЗаказу Цикл
		СтрокаТаблицыДляЦикла = ТаблицаДляЦикла.Добавить();
		СтрокаТаблицыДляЦикла.Номенклатура = СтрокаОстатковПоЗаказу.Номенклатура;
		СтрокаТаблицыДляЦикла.ХарактеристикаНоменклатуры = СтрокаОстатковПоЗаказу.ХарактеристикаНоменклатуры;
		СтрокаТаблицыДляЦикла.Цена = СтрокаОстатковПоЗаказу.Цена;
		СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки = СтрокаОстатковПоЗаказу.ПроцентСкидкиНаценки;
	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти из СтараяТабличнаяЧасть Цикл
		СтрокаТаблицыДляЦикла = ТаблицаДляЦикла.Добавить();
		СтрокаТаблицыДляЦикла.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		СтрокаТаблицыДляЦикла.ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
		СтрокаТаблицыДляЦикла.Цена = СтрокаТабличнойЧасти.Цена;
		СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
	КонецЦикла;
	ТаблицаДляЦикла.Свернуть("Номенклатура, ХарактеристикаНоменклатуры,Цена,ПроцентСкидкиНаценки");

	Сворачивать = Ложь;
	НоваяТабличнаяЧасть = Товары.Выгрузить();
	НоваяТабличнаяЧасть.Очистить();

	ТаблицаЗаказа.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, Цена, ПроцентСкидкиНаценки");
	ОстаткиПоЗаказу.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, Цена, ПроцентСкидкиНаценки");

	Для каждого СтрокаТаблицыДляЦикла Из ТаблицаДляЦикла Цикл 
		СтрокаСкидок = ТаблицаЗаказа.НайтиСтроки(Новый Структура ("Номенклатура, ХарактеристикаНоменклатуры, Цена, ПроцентСкидкиНаценки",
		                          СтрокаТаблицыДляЦикла.Номенклатура, СтрокаТаблицыДляЦикла.ХарактеристикаНоменклатуры,
		                          СтрокаТаблицыДляЦикла.Цена,СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки));

		СтрокиСтаройТабличнойЧасти = СтараяТабличнаяЧасть.НайтиСтроки(Новый Структура ("Номенклатура, ХарактеристикаНоменклатуры, Цена, ПроцентСкидкиНаценки",
		                          СтрокаТаблицыДляЦикла.Номенклатура, СтрокаТаблицыДляЦикла.ХарактеристикаНоменклатуры,
		                          СтрокаТаблицыДляЦикла.Цена,СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки));
		
		СтрокиОстатков = ОстаткиПоЗаказу.НайтиСтроки(Новый Структура ("Номенклатура, ХарактеристикаНоменклатуры, Цена,ПроцентСкидкиНаценки",
		                          СтрокаТаблицыДляЦикла.Номенклатура, СтрокаТаблицыДляЦикла.ХарактеристикаНоменклатуры,
		                          СтрокаТаблицыДляЦикла.Цена,СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки));

		ТаблицаСтрокКПересчету = Новый ТаблицаЗначений;
		ТаблицаСтрокКПересчету.Колонки.Добавить("СсылкаСтроки");
		Для Сч = 0 По СтрокиСтаройТабличнойЧасти.Количество() - 1 Цикл
			СтрокаКПересчету = ТаблицаСтрокКПересчету.Добавить();
			СтрокаКПересчету.СсылкаСтроки = СтрокиСтаройТабличнойЧасти[Сч];
		КонецЦикла;

		СтрокаОстатков = Неопределено;
		Если СтрокиОстатков.Количество() > 0 Тогда
			СтрокаОстатков = СтрокиОстатков[0];
		КонецЕсли;

		ТекПроцент = 0;
		ТекУсловиеАвтоматическойСкидки = Неопределено;
		ТекЗначениеУсловияАвтоматическойСкидки = Неопределено;
		Если СтрокаСкидок.Количество() > 0 Тогда
			ТекСкидка = СтрокаСкидок[0];
			ТекПроцент = ТекСкидка.ПроцентАвтоматическихСкидок;
			ТекУсловиеАвтоматическойСкидки = ТекСкидка.УсловиеАвтоматическойСкидки;
			ТекЗначениеУсловияАвтоматическойСкидки = ТекСкидка.ЗначениеУсловияАвтоматическойСкидки;
		КонецЕсли;

		Пересчет = Ложь;
		Если СтрокаОстатков <> Неопределено Тогда
			Если СтрокаОстатков.ПроцентАвтоматическихСкидок <> ТекПроцент Тогда //Процент изменился.
				ОбщееКоличествоПоПроцентуОстаткаВТЧ = 0;
				Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
					Если СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок = СтрокаОстатков.ПроцентАвтоматическихСкидок Тогда
						ОбщееКоличествоПоПроцентуОстаткаВТЧ = ОбщееКоличествоПоПроцентуОстаткаВТЧ + СтрокаСтаройТабличнойЧасти.Количество;
						СтрокаКУдалению = ТаблицаСтрокКПересчету.Найти(СтрокаСтаройТабличнойЧасти);
						Если СтрокаКУдалению <> Неопределено Тогда
							ТаблицаСтрокКПересчету.Удалить(СтрокаКУдалению);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если - ОбщееКоличествоПоПроцентуОстаткаВТЧ <> СтрокаОстатков.КолОстаток Тогда
					Пересчет = Истина;
					Сворачивать = Истина;
				КонецЕсли;
			ИначеЕсли СтрокиСтаройТабличнойЧасти.Количество()>1 Тогда //Процент не изменился
				Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
					Если СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок <> СтрокаОстатков.ПроцентАвтоматическихСкидок Тогда
						Пересчет = Истина;
						Сворачивать = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
				Если СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок <> ТекПроцент Тогда
					Пересчет = Истина;
					Сворачивать = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если Пересчет Тогда
			Для каждого СтрокаОстатков Из СтрокиОстатков Цикл

				Если ТекПроцент = СтрокаОстатков.ПроцентАвтоматическихСкидок Тогда
					Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
						СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок         = ТекПроцент;
						СтрокаСтаройТабличнойЧасти.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
						СтрокаСтаройТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
						СтрокаКУдалению                                                = ТаблицаСтрокКПересчету.Найти(СтрокаСтаройТабличнойЧасти);
						Если СтрокаКУдалению <> Неопределено Тогда
							ТаблицаСтрокКПересчету.Удалить(СтрокаКУдалению);
						КонецЕсли;
					КонецЦикла;
				Иначе
					КолСписать = СтрокаОстатков.КолОстаток;
					Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
						Размещение = СтрокаСтаройТабличнойЧасти.Размещение;
						Если СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок = СтрокаОстатков.ПроцентАвтоматическихСкидок
						   И СтрокаСтаройТабличнойЧасти.Количество < 0 Тогда
							КолСписать = КолСписать + СтрокаСтаройТабличнойЧасти.Количество;
						Иначе
							СтарыйПроцент                             = СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок;
							СтароеУсловиеАвтоматическойСкидки         = СтрокаСтаройТабличнойЧасти.УсловиеАвтоматическойСкидки;
							СтароеЗначениеУсловияАвтоматическойСкидки = СтрокаСтаройТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки;
							СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок         = ТекПроцент;
							СтрокаСтаройТабличнойЧасти.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
							СтрокаСтаройТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
						КонецЕсли;
						СтрокаКУдалению = ТаблицаСтрокКПересчету.Найти(СтрокаСтаройТабличнойЧасти);
						Если СтрокаКУдалению <> Неопределено Тогда
							ТаблицаСтрокКПересчету.Удалить(СтрокаКУдалению);
						КонецЕсли;
					КонецЦикла;
					Если КолСписать <> 0 Тогда
						НоваяСтрока                                     = СтараяТабличнаяЧасть.Добавить();
						НоваяСтрока.Номенклатура                        = СтрокаТаблицыДляЦикла.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры          = СтрокаТаблицыДляЦикла.ХарактеристикаНоменклатуры;
						НоваяСтрока.Цена                                = СтрокаТаблицыДляЦикла.Цена;
						НоваяСтрока.Количество                          = -КолСписать;
						НоваяСтрока.ЕдиницаИзмерения                    = СтрокаОстатков.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент                         = СтрокаОстатков.Коэффициент;
						НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаОстатков.УсловиеАвтоматическойСкидки;
						НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаОстатков.ЗначениеУсловияАвтоматическойСкидки;
						НоваяСтрока.СтавкаНДС                           = СтрокаОстатков.СтавкаНДС;
						НоваяСтрока.ПроцентСкидкиНаценки                = СтрокаОстатков.ПроцентСкидкиНаценки;
						НоваяСтрока.ПроцентАвтоматическихСкидок         = СтрокаОстатков.ПроцентАвтоматическихСкидок;
						НоваяСтрока.Размещение                          = Размещение;
						// Рассчитать реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
					КонецЕсли;
					Если КолСписать <> 0 Тогда
						НоваяСтрока = СтараяТабличнаяЧасть.Добавить();
						НоваяСтрока.Номенклатура               = СтрокаТаблицыДляЦикла.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыДляЦикла.ХарактеристикаНоменклатуры;
						НоваяСтрока.Цена                       = СтрокаТаблицыДляЦикла.Цена;
						НоваяСтрока.Количество                 = КолСписать;
						НоваяСтрока.ЕдиницаИзмерения           = СтрокаОстатков.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент                = СтрокаОстатков.Коэффициент;
						НоваяСтрока.СтавкаНДС                  = СтрокаОстатков.СтавкаНДС;
						Если ТекПроцент = СтрокаОстатков.ПроцентАвтоматическихСкидок Тогда
							НоваяСтрока.ПроцентАвтоматическихСкидок         = СтарыйПроцент;
							НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтароеЗначениеУсловияАвтоматическойСкидки;
							НоваяСтрока.УсловиеАвтоматическойСкидки         = СтароеУсловиеАвтоматическойСкидки;
						Иначе
							НоваяСтрока.ПроцентАвтоматическихСкидок         = ТекПроцент;
							НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
							НоваяСтрока.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
						КонецЕсли;
						НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки;
						НоваяСтрока.Размещение = Размещение;
						// Рассчитать реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТаблицаСтрокКПересчету.Количество() > 0 Тогда //Пересчитаем остальные строки на новый процент.
			Для каждого СтрокаКПересчету из ТаблицаСтрокКПересчету Цикл
				СсылкаСтроки = СтрокаКПересчету.СсылкаСтроки;
				Если СсылкаСтроки.ПроцентАвтоматическихСкидок <> ТекПроцент Тогда
					СсылкаСтроки.ПроцентАвтоматическихСкидок         = ТекПроцент;
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СсылкаСтроки, ЭтотОбъект);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СсылкаСтроки, ЭтотОбъект);
					СсылкаСтроки.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
					СсылкаСтроки.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
				ИначеЕсли СсылкаСтроки.УсловиеАвтоматическойСкидки <> ТекУсловиеАвтоматическойСкидки Тогда
					СсылкаСтроки.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
					СсылкаСтроки.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Если Сворачивать Тогда
		СтараяТабличнаяЧасть.Свернуть("ЕдиницаИзмерения,"
									  +"ЕдиницаИзмеренияМест,"
									  +"ЗначениеУсловияАвтоматическойСкидки,"
									  +"УсловиеАвтоматическойСкидки,"
									  +"Коэффициент,"
									  +"Номенклатура,"
									  +"ХарактеристикаНоменклатуры,"
									  +"ПроцентАвтоматическихСкидок,"
									  +"ПроцентСкидкиНаценки,"
									  +"Размещение,"
									  +"СтавкаНДС,"
									  +"Цена,"
									  +"ПлановаяСебестоимость",
									  "Количество,"
									  +"КоличествоМест,"
									  +"Сумма,"
									  +"СуммаНДС");

		КоличествоСтрок = Товары.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаТовара = Товары[КоличествоСтрок - Сч];
			Если СтрокаТовара.Количество = 0 Тогда
				Товары.Удалить(СтрокаТовара);
			Иначе
				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТовара, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовара, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовара, ЭтотОбъект);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьСкидкиПоУслугам()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Объединение.Номенклатура,
	|	Объединение.Цена,
	|	Объединение.ПроцентСкидкиНаценки,
	|	СУММА(Объединение.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателей.Количество КАК Количество,
	|		ЗаказыПокупателей.Цена КАК Цена,
	|		ЗаказыПокупателей.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|	ГДЕ
	|		ЗаказыПокупателей.Регистратор = &ЗаказПокупателя
	|		И ЗаказыПокупателей.Номенклатура.Услуга
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура,
	|		ЗаказыПокупателей.Количество,
	|		ЗаказыПокупателей.Цена,
	|		ЗаказыПокупателей.ПроцентСкидкиНаценки
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|	ГДЕ
	|		ЗаказыПокупателей.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПокупателя
	|		И ЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	|		И ЗаказыПокупателей.Регистратор <> &ТекущаяКорректировка
	|		И ЗаказыПокупателей.Номенклатура.Услуга
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		КорректировкаЗаказаПокупателяТовары.Номенклатура,
	|		КорректировкаЗаказаПокупателяТовары.Количество,
	|		КорректировкаЗаказаПокупателяТовары.Цена,
	|		КорректировкаЗаказаПокупателяТовары.ПроцентСкидкиНаценки
	|	ИЗ
	|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК КорректировкаЗаказаПокупателяТовары
	|	ГДЕ
	|		КорректировкаЗаказаПокупателяТовары.Ссылка = &ТекущаяКорректировка
	|) КАК Объединение
	|СГРУППИРОВАТЬ ПО
	|	Объединение.Номенклатура,
	|	Объединение.Цена,
	|	Объединение.ПроцентСкидкиНаценки
	|");

	Запрос.УстановитьПараметр("ЗаказПокупателя"     , ЗаказПокупателя);
	Запрос.УстановитьПараметр("ТекущаяКорректировка", Ссылка);

	ТаблицаЗаказа = Запрос.Выполнить().Выгрузить();

	СуммаЗаказаБезСкидок = 0;
	Для каждого CтрокаТаблицыЗаказа из ТаблицаЗаказа Цикл
		СуммаЗаказаБезСкидок = СуммаЗаказаБезСкидок + CтрокаТаблицыЗаказа.Цена * CтрокаТаблицыЗаказа.Количество;
	КонецЦикла;

	Если СуммаЗаказаБезСкидок = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
	СтруктураПараметров.Вставить("СуммаДокумента",                       СуммаЗаказаБезСкидок);
	СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
	СтруктураПараметров.Вставить("УчитыватьНДС",                         ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ложь);
	СтруктураПараметров.Вставить("ДатаСкидок",                           Дата);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("УчетнаяПолитика",       РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата));

	КвалификаторЧисла = Новый КвалификаторыЧисла(10,2);
	ТаблицаЗаказа.Колонки.Добавить("ПроцентАвтоматическихСкидок",Новый ОписаниеТипов("Число",КвалификаторЧисла));
	ТаблицаЗаказа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",КвалификаторЧисла));
	ТаблицаЗаказа.Колонки.Добавить("УсловиеАвтоматическойСкидки");
	ТаблицаЗаказа.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

	мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);
	//Получим таблицу заказа с рассчитанными скидками.
	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЗаказПокупателя, ТаблицаЗаказа, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	ОстаткиПоЗаказу = Услуги.Выгрузить();
	ОстаткиПоЗаказу.Очистить();

	ОстаткиПоЗаказу = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя(ЗаказПокупателя, ЗаказПокупателя.ДоговорКонтрагента, Дата - 1);

	//Сформируем табличную часть для корректировки остатков по скидкам.
	СтараяТабличнаяЧасть = Услуги;
	ТаблицаДляЦикла = Новый ТаблицаЗначений;
	ТаблицаДляЦикла.Колонки.Добавить("Номенклатура");
	ТаблицаДляЦикла.Колонки.Добавить("Цена");
	ТаблицаДляЦикла.Колонки.Добавить("ПроцентСкидкиНаценки");

	Для каждого СтрокаОстатковПоЗаказу из ОстаткиПоЗаказу Цикл
		СтрокаТаблицыДляЦикла = ТаблицаДляЦикла.Добавить();
		СтрокаТаблицыДляЦикла.Номенклатура = СтрокаОстатковПоЗаказу.Номенклатура;
		СтрокаТаблицыДляЦикла.Цена = СтрокаОстатковПоЗаказу.Цена;
		СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки = СтрокаОстатковПоЗаказу.ПроцентСкидкиНаценки;
	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти из СтараяТабличнаяЧасть Цикл
		СтрокаТаблицыДляЦикла = ТаблицаДляЦикла.Добавить();
		СтрокаТаблицыДляЦикла.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		СтрокаТаблицыДляЦикла.Цена = СтрокаТабличнойЧасти.Цена;
		СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
	КонецЦикла;
	ТаблицаДляЦикла.Свернуть("Номенклатура, Цена,ПроцентСкидкиНаценки");

	Сворачивать = Ложь;
	НоваяТабличнаяЧасть = Услуги.Выгрузить();
	НоваяТабличнаяЧасть.Очистить();

	ТаблицаЗаказа.Индексы.Добавить("Номенклатура, Цена, ПроцентСкидкиНаценки");
	ОстаткиПоЗаказу.Индексы.Добавить("Номенклатура, Цена, ПроцентСкидкиНаценки");

	Для каждого СтрокаТаблицыДляЦикла Из ТаблицаДляЦикла Цикл 
		СтрокаСкидок = ТаблицаЗаказа.НайтиСтроки(Новый Структура ("Номенклатура, Цена, ПроцентСкидкиНаценки",
		                          СтрокаТаблицыДляЦикла.Номенклатура,
		                          СтрокаТаблицыДляЦикла.Цена,СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки));

		СтрокиСтаройТабличнойЧасти = СтараяТабличнаяЧасть.НайтиСтроки(Новый Структура ("Номенклатура, Цена, ПроцентСкидкиНаценки",
		                          СтрокаТаблицыДляЦикла.Номенклатура,
		                          СтрокаТаблицыДляЦикла.Цена,СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки));
		
		СтрокиОстатков = ОстаткиПоЗаказу.НайтиСтроки(Новый Структура ("Номенклатура, Цена,ПроцентСкидкиНаценки",
		                          СтрокаТаблицыДляЦикла.Номенклатура,
		                          СтрокаТаблицыДляЦикла.Цена,СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки));

		ТаблицаСтрокКПересчету = Новый ТаблицаЗначений;
		ТаблицаСтрокКПересчету.Колонки.Добавить("СсылкаСтроки");
		Для Сч = 0 По СтрокиСтаройТабличнойЧасти.Количество() - 1 Цикл
			СтрокаКПересчету = ТаблицаСтрокКПересчету.Добавить();
			СтрокаКПересчету.СсылкаСтроки = СтрокиСтаройТабличнойЧасти[Сч];
		КонецЦикла;

		СтрокаОстатков = Неопределено;
		Если СтрокиОстатков.Количество() > 0 Тогда
			СтрокаОстатков = СтрокиОстатков[0];
		КонецЕсли;

		ТекПроцент = 0;
		ТекУсловиеАвтоматическойСкидки = Неопределено;
		ТекЗначениеУсловияАвтоматическойСкидки = Неопределено;
		Если СтрокаСкидок.Количество() > 0 Тогда
			ТекСкидка = СтрокаСкидок[0];
			ТекПроцент = ТекСкидка.ПроцентАвтоматическихСкидок;
			ТекУсловиеАвтоматическойСкидки = ТекСкидка.УсловиеАвтоматическойСкидки;
			ТекЗначениеУсловияАвтоматическойСкидки = ТекСкидка.ЗначениеУсловияАвтоматическойСкидки;
		КонецЕсли;

		Пересчет = Ложь;
		Если СтрокаОстатков <> Неопределено Тогда
			Если СтрокаОстатков.ПроцентАвтоматическихСкидок <> ТекПроцент Тогда //Процент изменился.
				ОбщееКоличествоПоПроцентуОстаткаВТЧ = 0;
				Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
					Если СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок = СтрокаОстатков.ПроцентАвтоматическихСкидок Тогда
						ОбщееКоличествоПоПроцентуОстаткаВТЧ = ОбщееКоличествоПоПроцентуОстаткаВТЧ + СтрокаСтаройТабличнойЧасти.Количество;
						СтрокаКУдалению = ТаблицаСтрокКПересчету.Найти(СтрокаСтаройТабличнойЧасти);
						Если СтрокаКУдалению <> Неопределено Тогда
							ТаблицаСтрокКПересчету.Удалить(СтрокаКУдалению);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если - ОбщееКоличествоПоПроцентуОстаткаВТЧ <> СтрокаОстатков.КолОстаток Тогда
					Пересчет = Истина;
					Сворачивать = Истина;
				КонецЕсли;
			ИначеЕсли СтрокиСтаройТабличнойЧасти.Количество()>1 Тогда //Процент не изменился
				Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
					Если СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок <> СтрокаОстатков.ПроцентАвтоматическихСкидок Тогда
						Пересчет = Истина;
						Сворачивать = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
				Если СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок <> ТекПроцент Тогда
					Пересчет = Истина;
					Сворачивать = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если Пересчет Тогда
			Для каждого СтрокаОстатков Из СтрокиОстатков Цикл

				Если ТекПроцент = СтрокаОстатков.ПроцентАвтоматическихСкидок Тогда
					Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
						СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок         = ТекПроцент;
						СтрокаСтаройТабличнойЧасти.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
						СтрокаСтаройТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
						СтрокаКУдалению                                                = ТаблицаСтрокКПересчету.Найти(СтрокаСтаройТабличнойЧасти);
						Если СтрокаКУдалению <> Неопределено Тогда
							ТаблицаСтрокКПересчету.Удалить(СтрокаКУдалению);
						КонецЕсли;
					КонецЦикла;
				Иначе
					КолСписать = СтрокаОстатков.КолОстаток;
					Для каждого СтрокаСтаройТабличнойЧасти Из СтрокиСтаройТабличнойЧасти Цикл
						Размещение = СтрокаСтаройТабличнойЧасти.Размещение;
						Если СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок = СтрокаОстатков.ПроцентАвтоматическихСкидок
						   И СтрокаСтаройТабличнойЧасти.Количество < 0 Тогда
							КолСписать = КолСписать + СтрокаСтаройТабличнойЧасти.Количество;
						Иначе
							СтарыйПроцент                             = СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок;
							СтароеУсловиеАвтоматическойСкидки         = СтрокаСтаройТабличнойЧасти.УсловиеАвтоматическойСкидки;
							СтароеЗначениеУсловияАвтоматическойСкидки = СтрокаСтаройТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки;
							СтрокаСтаройТабличнойЧасти.ПроцентАвтоматическихСкидок         = ТекПроцент;
							СтрокаСтаройТабличнойЧасти.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
							СтрокаСтаройТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
						КонецЕсли;
						СтрокаКУдалению = ТаблицаСтрокКПересчету.Найти(СтрокаСтаройТабличнойЧасти);
						Если СтрокаКУдалению <> Неопределено Тогда
							ТаблицаСтрокКПересчету.Удалить(СтрокаКУдалению);
						КонецЕсли;
					КонецЦикла;
					Если КолСписать <> 0 Тогда
						НоваяСтрока                                     = СтараяТабличнаяЧасть.Добавить();
						НоваяСтрока.Номенклатура                        = СтрокаТаблицыДляЦикла.Номенклатура;
						НоваяСтрока.Цена                                = СтрокаТаблицыДляЦикла.Цена;
						НоваяСтрока.Количество                          = -КолСписать;
						НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаОстатков.УсловиеАвтоматическойСкидки;
						НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаОстатков.ЗначениеУсловияАвтоматическойСкидки;
						НоваяСтрока.СтавкаНДС                           = СтрокаОстатков.СтавкаНДС;
						НоваяСтрока.ПроцентСкидкиНаценки                = СтрокаОстатков.ПроцентСкидкиНаценки;
						НоваяСтрока.ПроцентАвтоматическихСкидок         = СтрокаОстатков.ПроцентАвтоматическихСкидок;
						НоваяСтрока.Содержание                          = СтрокаОстатков.Содержание;
						// Рассчитать реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
					КонецЕсли;
					Если КолСписать <> 0 Тогда
						НоваяСтрока = СтараяТабличнаяЧасть.Добавить();
						НоваяСтрока.Номенклатура               = СтрокаТаблицыДляЦикла.Номенклатура;
						НоваяСтрока.Цена                       = СтрокаТаблицыДляЦикла.Цена;
						НоваяСтрока.Количество                 = КолСписать;
						НоваяСтрока.СтавкаНДС                  = СтрокаОстатков.СтавкаНДС;
						НоваяСтрока.Содержание                 = СтрокаОстатков.Содержание;
						Если ТекПроцент = СтрокаОстатков.ПроцентАвтоматическихСкидок Тогда
							НоваяСтрока.ПроцентАвтоматическихСкидок         = СтарыйПроцент;
							НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтароеЗначениеУсловияАвтоматическойСкидки;
							НоваяСтрока.УсловиеАвтоматическойСкидки         = СтароеУсловиеАвтоматическойСкидки;
						Иначе
							НоваяСтрока.ПроцентАвтоматическихСкидок         = ТекПроцент;
							НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
							НоваяСтрока.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
						КонецЕсли;
						НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТаблицыДляЦикла.ПроцентСкидкиНаценки;
						// Рассчитать реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТаблицаСтрокКПересчету.Количество() > 0 Тогда //Пересчитаем остальные строки на новый процент.
			Для каждого СтрокаКПересчету из ТаблицаСтрокКПересчету Цикл
				СсылкаСтроки = СтрокаКПересчету.СсылкаСтроки;
				Если СсылкаСтроки.ПроцентАвтоматическихСкидок <> ТекПроцент Тогда
					СсылкаСтроки.ПроцентАвтоматическихСкидок         = ТекПроцент;
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СсылкаСтроки, ЭтотОбъект);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СсылкаСтроки, ЭтотОбъект);
					СсылкаСтроки.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
					СсылкаСтроки.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
				ИначеЕсли СсылкаСтроки.УсловиеАвтоматическойСкидки <> ТекУсловиеАвтоматическойСкидки Тогда
					СсылкаСтроки.УсловиеАвтоматическойСкидки         = ТекУсловиеАвтоматическойСкидки;
					СсылкаСтроки.ЗначениеУсловияАвтоматическойСкидки = ТекЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Если Сворачивать Тогда
		СтараяТабличнаяЧасть.Свернуть("ЗначениеУсловияАвтоматическойСкидки,"
									  +"УсловиеАвтоматическойСкидки,"
									  +"Номенклатура,"
									  +"ПроцентАвтоматическихСкидок,"
									  +"ПроцентСкидкиНаценки,"
									  +"СтавкаНДС,"
									  +"Содержание,"
									  +"Цена",
									  "Количество,"
									  +"Сумма,"
									  +"СуммаНДС");

		КоличествоСтрок = Услуги.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаТовара = Услуги[КоличествоСтрок - Сч];
			Если СтрокаТовара.Количество = 0 Тогда
				Услуги.Удалить(СтрокаТовара);
			Иначе
				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТовара, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовара, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовара, ЭтотОбъект);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаЗаказа","Корректировка заказа покупателя");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет добавление строки в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть в которую добавляется строка;
//  Выборка        - запрос, спозиционированный на строке;
//  Количество     - количество в добавляемой строке;
//	Режим          - режим размещения: "Резерв" - по складу, "Заказ" - по заказу, "" - без размещения
//
Процедура ДобавитьСтрокуТабличнойЧасти(ТабличнаяЧасть, Выборка, Количество, Размещение = Неопределено, СерияНоменклатуры = Неопределено)

	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда

		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Количество           = - Количество * Выборка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
													/ СтрокаТабличнойЧасти.Коэффициент;
		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
			СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок = Выборка.ПроцентАвтоматическихСкидок;
			СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Выборка.УсловиеАвтоматическойСкидки;
			СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;

			СтрокаТабличнойЧасти.Цена =  Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Цена,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											ЗаказПокупателя.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		Иначе
			СтрокаТабличнойЧасти.Цена = Выборка.Цена;								
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		
		СтрокаТабличнойЧасти.Размещение                 = Размещение;
 
		СтрокаТабличнойЧасти.СерияНоменклатуры          = СерияНоменклатуры;
		
	Иначе // ТабличнаяЧасть = ВозвратнаяТара

		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = - Количество;

		СтрокаТабличнойЧасти.Цена = Выборка.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		СтрокаТабличнойЧасти.Размещение       = Размещение;

	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуТабличнойЧасти()

// Заполняет табличную часть ТАРА по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТаруПоОстаткам() Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.Номенклатура.ЕдиницаХраненияОстатков КАК Единица,
	|	РегЗаказы.КоличествоОстаток КАК КолОстаток,
	|	РегЗаказы.СуммаУпрОстаток КАК СуммаУпр,
	|	РегЗаказы.Цена
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор И СтатусПартии = &Статус И ЗаказПокупателя = &Заказ) КАК РегЗаказы
	|
	|ГДЕ
	|	НЕ РегЗаказы.Номенклатура.Услуга И
	|	РегЗаказы.КоличествоОстаток > 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр( "Заказ",   ЗаказПокупателя);
	Запрос.УстановитьПараметр( "Договор", ЗаказПокупателя.ДоговорКонтрагента);
	Запрос.УстановитьПараметр( "Статус",  Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	ЗапросРазмещения = Новый Запрос;
	ЗапросРазмещения.УстановитьПараметр("ТоварТара"      , Перечисления.ТоварТара.Тара);
	ЗапросРазмещения.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	ЗапросРазмещения.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЗапросРазмещения.Текст = "
	|ВЫБРАТЬ 
	|	РазмещениеЗаказовПокупателейОстатки.Номенклатура               КАК Номенклатура,
	|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику            КАК Размещение,
	|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток          КАК КоличествоОстатокПоРазмещению
	|ИЗ
	|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя 
	|                                                          И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура                    КАК Номенклатура,
	|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.Склад                           КАК Размещение,
	|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток               КАК КоличествоОстатокПоРазмещению
	|ИЗ
	|   РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладахОстатки
	|";
	
	ТаблицаРазмещений = ЗапросРазмещения.Выполнить().Выгрузить();
	СтруктураПоиска  = Новый Структура;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КолвоПоЗаказу = Выборка.КолОстаток;
		
		СтруктураПоиска.Вставить( "Номенклатура", Выборка.Номенклатура);
		
		НайденныеСтроки = ТаблицаРазмещений.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРазмещения ИЗ НайденныеСтроки Цикл
			КолвоСпис = Мин(КолвоПоЗаказу, СтрокаРазмещения.КоличествоОстатокПоРазмещению);
			Если КолвоСпис >= 0 Тогда
				КолвоПоЗаказу = КолвоПоЗаказу - КолвоСпис;
				ДобавитьСтрокуТабличнойЧасти( ВозвратнаяТара, Выборка, КолвоСпис, СтрокаРазмещения.Размещение);
				СтрокаРазмещения.КоличествоОстатокПоРазмещению = СтрокаРазмещения.КоличествоОстатокПоРазмещению - КолвоСпис;
			КонецЕсли;
			Если КолвоПоЗаказу = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КолвоПоЗаказу <> 0 Тогда
			ДобавитьСтрокуТабличнойЧасти( ВозвратнаяТара, Выборка, КолвоПоЗаказу);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаруПоОстаткам()

// Заполняет табличную часть "Товары" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоОстаткам() Экспорт

	ТоварТара = Перечисления.ТоварТара.Товар;
	ТабличнаяЧастьСтрока = "Товары";
	
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	ТабОстатки = УправлениеЗаказами.ОстаткиТоваровПоЗаказуПокупателя( ЗаказПокупателя, ЗаказПокупателя.ДоговорКонтрагента, ДатаОстатков, СтатусПартии);

	ТабОстатки.Колонки.Добавить("Единица");
	
	ЗапросРазмещения = Новый Запрос;
	ЗапросРазмещения.УстановитьПараметр("ТоварТара"      , Перечисления.ТоварТара.Товар);
	ЗапросРазмещения.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	ЗапросРазмещения.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЗапросРазмещения.Текст = "
	|ВЫБРАТЬ 
	|	РазмещениеЗаказовПокупателейОстатки.Номенклатура               КАК Номенклатура,
	|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	NULL                                                           КАК СерияНоменклатуры,
	|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику            КАК Размещение,
	|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток          КАК КоличествоОстатокПоРазмещению
	|ИЗ
	|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя 
	|                                                          И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура                    КАК Номенклатура,
	|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры               КАК СерияНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.Склад                           КАК Размещение,
	|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток               КАК КоличествоОстатокПоРазмещению
	|ИЗ
	|   РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладахОстатки
	|";
	
	ТаблицаРазмещений = ЗапросРазмещения.Выполнить().Выгрузить();
	СтруктураПоиска  = Новый Структура;
	
	Для Каждого Выборка Из ТабОстатки Цикл
		
		КолвоПоЗаказу = Выборка.КолОстаток;
		Выборка.Единица = Выборка.Номенклатура.ЕдиницаХраненияОстатков;
		
		СтруктураПоиска.Вставить("Номенклатура",               Выборка.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = ТаблицаРазмещений.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРазмещения ИЗ НайденныеСтроки Цикл
			КолвоСпис = Мин(КолвоПоЗаказу, СтрокаРазмещения.КоличествоОстатокПоРазмещению);
			Если КолвоСпис >= 0 Тогда
				КолвоПоЗаказу = КолвоПоЗаказу - КолвоСпис;
				ДобавитьСтрокуТабличнойЧасти( Товары, Выборка, КолвоСпис, СтрокаРазмещения.Размещение, СтрокаРазмещения.СерияНоменклатуры);
				СтрокаРазмещения.КоличествоОстатокПоРазмещению = СтрокаРазмещения.КоличествоОстатокПоРазмещению - КолвоСпис;
			КонецЕсли;
			Если КолвоПоЗаказу = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КолвоПоЗаказу <> 0 Тогда
			ДобавитьСтрокуТабличнойЧасти( Товары, Выборка, КолвоПоЗаказу);
		КонецЕсли;

	КонецЦикла;
	
	ОбработкаТабличныхЧастей.ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПокупателя, мВалютаРегламентированногоУчета);

КонецПроцедуры // ЗаполнитьТоварыПоОстаткам()

// Заполняет табличную часть "ВозвратнаяТара" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьУслугиПоОстаткам() Экспорт

	Если ЭтоНовый() Тогда
		ДатаОстатков = Дата('00010101');
	Иначе
		ДатаОстатков = Дата;
	КонецЕсли;
	СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	УправлениеЗаказами.ЗаполнитьТабЧастьУслугиПоЗаказу( ЭтотОбъект, Услуги, ЗаказПокупателя, УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( ЗаказПокупателя, ЗаказПокупателя.ДоговорКонтрагента, ДатаОстатков, СтатусПартии));
	
	Для Каждого Строка Из Услуги Цикл
		Строка.Количество = -Строка.Количество;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Строка, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Строка, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

#Если Клиент Тогда

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары() Экспорт

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидДокумента = "ЗаказПокупателя";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.ЕдиницаИзмеренияМест,
	|	ЗаказПокупателяТовары.Количество,
	|	ЗаказПокупателяТовары.Коэффициент,
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Размещение,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";

	Если ВидДокумента = "ЗаказПокупателя" тогда 
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"	ВЫБОР КОГДА ЗаказПокупателяТовары.Ссылка.ВалютаДокумента = ЗаказПокупателяТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		ЗаказПокупателяТовары.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ                                           КАК КурсДокумента,
		|	ВЫБОР КОГДА ЗаказПокупателяТовары.Ссылка.ВалютаДокумента = ЗаказПокупателяТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		ЗаказПокупателяТовары.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ                                           КАК КратностьДокумента,
		|	ЗаказПокупателяТовары.Сумма,
		|	ЗаказПокупателяТовары.СтавкаНДС,
		|	ЗаказПокупателяТовары.СуммаНДС,
		|	ЗаказПокупателяТовары.Ссылка.СуммаВключаетНДС             КАК СуммаВключаетНДС,
		|	ЗаказПокупателяТовары.Ссылка.УчитыватьНДС                 КАК УчитыватьНДС,
		|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки                КАК ПроцентСкидкиНаценки,
		|	ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок         КАК ПроцентАвтоматическихСкидок,
		|	ЗаказПокупателяТовары.УсловиеАвтоматическойСкидки         КАК УсловиеАвтоматическойСкидки,
		|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки";
	Иначе
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"  ЗаказПокупателяТовары.Ссылка.КурсДокумента      КАК КурсДокумента,
		|  ЗаказПокупателяТовары.Ссылка.КратностьДокумента КАК КратностьДокумента";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ."+ВидДокумента+".Товары КАК ЗаказПокупателяТовары
	|
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка.Ссылка = &ЗаказПокупателя
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяТовары.НомерСтроки";

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
  	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

		НоваяСтрока.Количество                 = -Выборка.Количество;
		Если ВидДокумента = "ЗаказПокупателя" Тогда

			НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(-Выборка.Сумма,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		КонецЕсли;

	КонецЦикла;

	ОбработкаТабличныхЧастей.ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПокупателя, мВалютаРегламентированногоУчета);

КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги() Экспорт

	Если Не ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяУслуги.Количество,
	|	ЗаказПокупателяУслуги.Номенклатура,
	|	ЗаказПокупателяУслуги.Цена,                  
	|	ЗаказПокупателяУслуги.Ссылка.ВалютаДокумента  КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ЗаказПокупателяУслуги.Ссылка.ВалютаДокумента = ЗаказПокупателяУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПокупателяУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА ЗаказПокупателяУслуги.Ссылка.ВалютаДокумента = ЗаказПокупателяУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПокупателяУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,
	|	ЗаказПокупателяУслуги.Сумма,
	|	ЗаказПокупателяУслуги.СтавкаНДС,
	|	ЗаказПокупателяУслуги.Содержание,
	|	ЗаказПокупателяУслуги.СуммаНДС,
	|	ЗаказПокупателяУслуги.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателяУслуги.Ссылка.УчитыватьНДС     КАК УчитыватьНДС,
	|	ЗаказПокупателяУслуги.ПроцентСкидкиНаценки    КАК ПроцентСкидкиНаценки
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
	|
	|ГДЕ
	|	ЗаказПокупателяУслуги.Ссылка.Ссылка = &ЗаказПокупателя
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяУслуги.НомерСтроки";


	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.СтавкаНДС    = Выборка.СтавкаНДС;
		НоваяСтрока.Содержание   = Выборка.Содержание;
		НоваяСтрока.Количество   = -Выборка.Количество;
		
		НоваяСтрока.Цена                 = Выборка.Цена;
		НоваяСтрока.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(-Выборка.Сумма,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
			
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти ( НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти( НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяВозвратнаяТара.Количество,
	|	ЗаказПокупателяВозвратнаяТара.Номенклатура,
	|	ЗаказПокупателяВозвратнаяТара.Размещение,
	|	ЗаказПокупателяВозвратнаяТара.Сумма,
	|	ЗаказПокупателяВозвратнаяТара.Цена,
	|	ЗаказПокупателяВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ЗаказПокупателяВозвратнаяТара.Ссылка.ВалютаДокумента = ЗаказПокупателяВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПокупателяВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА ЗаказПокупателяВозвратнаяТара.Ссылка.ВалютаДокумента = ЗаказПокупателяВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПокупателяВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя.ВозвратнаяТара КАК ЗаказПокупателяВозвратнаяТара
	|
	|ГДЕ
	|	ЗаказПокупателяВозвратнаяТара.Ссылка.Ссылка = &ЗаказПокупателя
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяВозвратнаяТара.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество = -Выборка.Количество;
		НоваяСтрока.Размещение = Выборка.Размещение;
		НоваяСтрока.Цена  = Выборка.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьВозвратнуюТару()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Параметры - структура параметров на основании которых заполняется документ.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Параметры) Экспорт
    Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли; 
	ОбособленныйУчет = ЗначениеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента)
	                   И ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;

	Параметры.Вставить("Заказ",ЗаказПокупателя);
	Параметры.Вставить("РезервироватьПоСериям",мРезервироватьПоСериям и ОбособленныйУчет);
	Параметры.Вставить("ОбособленныйУчет",ОбособленныйУчет);

	УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Товары, ВозвратнаяТара);

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 

	Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС"
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
        СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("ЗаказПокупателя");
					

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(ЗаказПокупателя.Организация, ЗаказПокупателя.ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять заказ с НТТ!", Отказ, Заголовок);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказПокупателя) И НЕ ЗаказПокупателя.Проведен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя корректировать непроведенный документ!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапкиУпр()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"ЗаказПокупателя", истина, "Размещение", Отказ, Заголовок);													   

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие размещения под заказ покупателя
// Возвращается КОПИЯ исходной таблицы
//
Функция ПодготовитьТаблицуДляДвиженийПоРазмещениюЗаказовПокупателей(ТаблицаПоТоварам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если не ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) = Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // ПодготовитьТаблицуДляДвиженийПоРазмещениюЗаказовПокупателей()

// Функция удаляет из исходной таблицы строки не требующие резервирования под заказ покупателя
// Возвращается КОПИЯ исходной таблицы
//
Функция ПодготовитьТаблицуДляДвиженийПоРезервированию(ТаблицаПоТоварам)

	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если не ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;
		
КонецФункции // ПодготовитьТаблицуДляДвиженийПоРезервированию()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
							ТаблицаПоТаре, Отказ, Заголовок);
							  
	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
								  
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
											ТаблицаПоТаре, Отказ, Заголовок);
		
		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
		
		Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
			
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			
		Иначе
			
			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, ЗаказПокупателя.Организация)
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	// Движения по документу.
    Если СуммаДокумента <> 0 Тогда
		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
		СтрокаДвижений.ДоговорКонтрагента    = ЗаказПокупателя.ДоговорКонтрагента;
		СтрокаДвижений.Контрагент  		     = ЗаказПокупателя.Контрагент;
		СтрокаДвижений.Организация  	     = ЗаказПокупателя.Организация;

		СтрокаДвижений.Сделка                = ЗаказПокупателя; 
		
		СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												СтруктураШапкиДокумента.КратностьДокумента, 
												СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
		КонецЕсли;
    КонецЕсли;
	НаборДвижений = Движения.ЗаказыПокупателей;
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
        НаборДвижений.КонтрольОстатков(ЭтотОбъект,"Товары",СтруктураШапкиДокумента, Отказ, Заголовок);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект,"ВозвратнаяТара",СтруктураШапкиДокумента, Отказ, Заголовок);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект,"Услуги",СтруктураШапкиДокумента, Отказ, Заголовок);

	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// ТОВАРЫ, УСЛУГИ И ТАРА ПО РЕГИСТРУ ЗаказыПокупателей.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    ЗаказПокупателя);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ЗаказПокупателя.ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии(),                         "ТаблицаПоТоварам, ТаблицаПоУслугам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// ТОВАРЫ ПО РЕГИСТРУ РазмещениеЗаказовПокупателей.
		ТаблицаПоТоварамРазмещение = ПодготовитьТаблицуДляДвиженийПоРазмещениюЗаказовПокупателей(ТаблицаПоТоварам);
		ТаблицаПоТареРазмещение    = ПодготовитьТаблицуДляДвиженийПоРазмещениюЗаказовПокупателей(ТаблицаПоТаре);
		
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
						
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", ЗаказПокупателя);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
			КонецЕсли;
		
		КонецЕсли;
		
		ТаблицаПоТоварамРезервирование = ПодготовитьТаблицуДляДвиженийПоРезервированию(ТаблицаПоТоварам);
		ТаблицаПоТареРезервирование    = ПодготовитьТаблицуДляДвиженийПоРезервированию(ТаблицаПоТаре);
		Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
							
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", ЗаказПокупателя);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя.Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя.Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
				                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
											Отказ, Заголовок)
											
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если не ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Инд = 0;
			
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
		
		// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Инд = 0;
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			// Списывать партии можно только по заказу (измерение Заказ - пустое).
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Заказ, на который списывать партию.
			ТаблицаДвижений.ЗаполнитьЗначения( ЗаказПокупателя, "ЗаказСписания");
			Для Каждого СтрокаТЗ Из ТаблицаДвижений Цикл
				Если СтрокаТЗ.Количество < 0 Тогда // Снимаем с резерва.
					СтрокаТЗ.Количество    = -СтрокаТЗ.Количество;
					СтрокаТЗ.ЗаказСписания = Неопределено;
					// Заказ с которого надо списывать партию
					СтрокаТЗ.ЗаказПартии  =ЗаказПокупателя;
					СтрокаТЗ.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ;
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если не ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.Размещение.Имя = "Склад";
				
		// ТАРА ПО РЕГИСТРУ СписанныеТовары.
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			// Списывать партии можно только по заказу (измерение Заказ - пустое).
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Заказ, на который списывать партию.
			ТаблицаДвижений.ЗаполнитьЗначения( ЗаказПокупателя, "ЗаказСписания");
			ТаблицаДвижений.ЗаполнитьЗначения( ЗаказПокупателя, "ЗаказПартии");
			Для Каждого СтрокаТЗ Из ТаблицаДвижений Цикл
				Если СтрокаТЗ.Количество < 0 Тогда // Снимаем с резерва.
					СтрокаТЗ.Количество    = -СтрокаТЗ.Количество;
					СтрокаТЗ.ЗаказСписания = Неопределено;
					СтрокаТЗ.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ;
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаПоТоварамРезервирование.Количество() + ТаблицаПоТареРезервирование.Количество() > 0 тогда
		
		// Зарегистрируем в последовательности по УУ
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
		ЗаписьРегистрации.Период = Дата;
			
	КонецЕсли;	
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;		
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаказПокупателя = Основание;

		СтруктурнаяЕдиница      = Основание.СтруктурнаяЕдиница;
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		
		Если Основание.Проведен Тогда

			// Заполним табличные части неотгруженными товарами по заказу покупателя.
			ЗаполнитьТоварыПоОстаткам();
			ЗаполнитьТаруПоОстаткам();
			ЗаполнитьУслугиПоОстаткам();
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ЗаказПокупателя.Контрагент;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация	= ЗаказПокупателя.Организация;
	КонецЕсли;

	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Услуги.Очистить();

	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	// Посчитать итоговую сумму плановой себестоимости документа и записать ее в соответствующий реквизит шапки
	ИтогПлановаяСебестоимость = Ценообразование.ИтогПлановаяСебестоимость(ЭтотОбъект);

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЗаказПокупателя);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                       , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	Если ЗначениеЗаполнено(ЗаказПокупателя.СкладГруппа) 
		И ТипЗнч(ЗаказПокупателя.СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "ВидСклада", "ВидСклада");
	Иначе
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "NULL", "NULL", "ВидСклада");
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЗаказПокупателя, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок", "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки", "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок", "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки", "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");

	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
							ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения


мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");
ВалютаДокумента                   = ЗаказПокупателя.ВалютаДокумента;
мРезервироватьПоСериям = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();
