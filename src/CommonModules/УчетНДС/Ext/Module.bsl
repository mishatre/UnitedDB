//***********************************************************************************************
//	 ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ПОДСИСТЕМЫ УЧЕТА НДС

// Копирует общие реквизиты из строки источника в строку применик
//
//
Функция СкопироватьСтрокуВДругуюТаблицу(СтрокаИсточник, ТаблицаИсточник, СтрокаПриемник, ТаблицаПриемник) Экспорт
	
	Для Каждого ТекКол Из ТаблицаПриемник.Колонки Цикл
		Если ТаблицаИсточник.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
			СтрокаПриемник[ТекКол.Имя] = СтрокаИсточник[ТекКол.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции // УчетнаяПолитикаНалоговыйУчет()

Функция ПолучитьРеквизитыСчетаФактурыВыданного(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДокументОснование", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетФактураВыданный.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				И СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				И СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	СчетФактураВыданный.Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсправления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.Дата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.НомерИсходногоДокумента
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.ДатаИсходногоДокумента
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	(СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
	|			ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка = &ДокументОснование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Проведен УБЫВ,
	|	СчетФактураВыданный.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыСчетаФактуры = Новый Структура("СчетФактура, ПометкаУдаления, Проведен, НомерСчетаФактуры, ДатаСчетаФактуры, 
			|Исправление, НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента,
			|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
		Если РеквизитыСчетаФактуры.НомерСчетаФактуры = НЕОПРЕДЕЛЕНО Тогда
			РеквизитыСчетаФактуры.НомерСчетаФактуры = ОбщегоНазначения.ПолучитьНомерНаПечать(РеквизитыСчетаФактуры.СчетФактура); 
		КонецЕсли;
		Возврат РеквизитыСчетаФактуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьРеквизитыСчетаФактурыПолученного(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК СчетФактура,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактуры,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
	|	СчетФактураПолученный.Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Исправление
	|			ТОГДА СчетФактураПолученный.НомерИсправления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Исправление
	|			ТОГДА СчетФактураПолученный.ДатаИсправления
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.НомерИсходногоДокумента
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.ДатаИсходногоДокумента
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.НомерИсправленияИсходногоДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.ДатаИсправленияИсходногоДокумента
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|ГДЕ
	|	(СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование
	|			ИЛИ СчетФактураПолученныйДокументыОснования.Ссылка = &ДокументОснование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученный.ПометкаУдаления,
	|	СчетФактураПолученный.Проведен УБЫВ,
	|	СчетФактураПолученный.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыСчетаФактуры = Новый Структура("СчетФактура, НомерСчетаФактуры, ДатаСчетаФактуры, 
			|Исправление, НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента,
			|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
		Возврат РеквизитыСчетаФактуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Для переданного в качестве параметра счета-факутры выданного, получает для него
// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в 
// документе основнии.
//
// Параметры:
//  СчетФактура  - счет-фактура для которого нужно определить параметры
//  Результат - структура в которой возвращаются значения параметров
//
Процедура ПолучитьПараметрыСчетаФактуры(СчетФактура, мВалютаРегламентированногоУчета, Результат) Экспорт

	Результат = Новый Структура("Организация, Контрагент, Договор, 
		|СуммаДокумента, СуммаДокументаКомиссия, ВалютаДокумента, СуммаНДСДокумента, СуммаНДСДокументаКомиссия, СчетФактураБезНДС, НомерСчетаФактурыПродавца,
		|СуммаУвеличение, СуммаУвеличениеКомиссия, СуммаУменьшение, СуммаУменьшениеКомиссия, СуммаНДСУвеличение, 
		|СуммаНДСУвеличениеКомиссия, СуммаНДСУменьшение, СуммаНДСУменьшениеКомиссия, БланкСтрогойОтчетности, РеквизитыОснований");
		
	Результат.СуммаДокумента     = 0;
	Результат.СуммаНДСДокумента  = 0;
	Результат.СуммаУвеличение    = 0;
	Результат.СуммаНДСУвеличение = 0;
	Результат.СуммаУменьшение    = 0;
	Результат.СуммаНДСУменьшение = 0;
	Результат.СуммаДокументаКомиссия 	 = 0;
	Результат.СуммаНДСДокументаКомиссия  = 0;
	Результат.СуммаУвеличениеКомиссия 	 = 0;
	Результат.СуммаНДСУвеличениеКомиссия = 0;
	Результат.СуммаУменьшениеКомиссия 	 = 0;
	Результат.СуммаНДСУменьшениеКомиссия = 0;
	Результат.СчетФактураБезНДС = 0;
	
	РеквизитыОснований = Новый ТаблицаЗначений;
	РеквизитыОснований.Колонки.Добавить("ДокументОснование");
	РеквизитыОснований.Колонки.Добавить("НомерИсходногоДокумента", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	РеквизитыОснований.Колонки.Добавить("ДатаИсходногоДокумента", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РеквизитыОснований.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента", Новый ОписаниеТипов("Булево"));
	РеквизитыОснований.Колонки.Добавить("НомерИсправленияИсходногоДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	РеквизитыОснований.Колонки.Добавить("ДатаИсправленияИсходногоДокумента", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РеквизитыОснований.Колонки.Добавить("СуммаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаНДСУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаНДСУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	Результат.РеквизитыОснований = РеквизитыОснований;

	Если ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Ссылка = СчетФактура;
	Иначе
		Ссылка = СчетФактура.Ссылка;
	КонецЕсли; 
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ЭтоПолученныйСФ = Истина;
		Если СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
			И СчетФактура.ДокументыОснования.Количество() > 0
			И ТипЗнч(СчетФактура.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			// Реквизиты заново не определяются, получаются из счета-фактуры
			Результат.Вставить("Организация"	, СчетФактура.Организация);
			Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
			Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);
			Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
			Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
			Возврат;
		КонецЕсли;			
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		И СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Организация"	, СчетФактура.Организация);
		Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
		Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);
		Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
		Возврат;
	КонецЕслИ;
	
	ДокументыОснования = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	
	ТипыОснований = Новый Соответствие();
	Для каждого Основание Из ДокументыОснования Цикл
		Если не ЗначениеЗаполнено(Основание) Тогда
			Продолжить;			
		КонецЕсли; 

		МассивДокументов = ТипыОснований[ТипЗнч(Основание)];
		
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = новый Массив();
			ТипыОснований.Вставить(ТипЗнч(Основание),МассивДокументов);
		КонецЕсли; 
		
		МассивДокументов.Добавить(Основание);
	КонецЦикла; 
	
	Если ТипыОснований.Количество() = 0 Тогда
		// ТЧ оснований не заполнена, параметры определить нельзя
		Возврат;
	КонецЕсли;

	Корректировка = Ложь;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Для каждого ТипОснования Из ТипыОснований Цикл
		ТипДокументаОснования	= ТипОснования.Ключ;
		ДокументыОснования		= ТипОснования.Значение;
		ТекстЗапроса = "";
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") 
			ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			Корректировка = Истина;
		КонецЕсли;
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеВНО", ДокументыОснования);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка.Организация КАК Организация,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента КАК Договор,
			|	СУММА(ВводНачальныхОстатковНДСДанныеПоСФ.СуммаБезНДС + ВводНачальныхОстатковНДСДанныеПоСФ.НДС) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
			|ИЗ
			|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
			|ГДЕ
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка В(&ДокументОснованиеВНО)
			|	И ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка.Организация";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеАО", ДокументыОснования);
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	АвансовыйОтчетПрочее.Ссылка.Организация КАК Организация,
			|	АвансовыйОтчетПрочее.Поставщик КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	СУММА(ВЫБОР
			|			КОГДА АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС
			|				ТОГДА АвансовыйОтчетПрочее.Сумма
			|			ИНАЧЕ АвансовыйОтчетПрочее.Сумма + АвансовыйОтчетПрочее.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	СУММА(АвансовыйОтчетПрочее.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(0) КАК СуммаДокументаКомиссия,
			|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетПрочее.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	АвансовыйОтчетПрочее.БланкСтрогойОтчетности КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
			|ГДЕ
			|	АвансовыйОтчетПрочее.Ссылка В(&ДокументОснованиеАО)
			|	И АвансовыйОтчетПрочее.ПредъявленСФ
			|	И АвансовыйОтчетПрочее.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетПрочее.Поставщик,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетПрочее.Ссылка.Организация,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетПрочее.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	АвансовыйОтчетПрочее.БланкСтрогойОтчетности
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	АвансовыйОтчетТовары.Ссылка.Организация,
			|	АвансовыйОтчетТовары.Поставщик,
			|	НЕОПРЕДЕЛЕНО,
			|	СУММА(ВЫБОР
			|			КОГДА АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС
			|				ТОГДА АвансовыйОтчетТовары.Сумма
			|			ИНАЧЕ АвансовыйОтчетТовары.Сумма + АвансовыйОтчетТовары.СуммаНДС
			|		КОНЕЦ),
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
			|	СУММА(АвансовыйОтчетТовары.СуммаНДС),
			|	0,
			|	0,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			|ГДЕ
			|	АвансовыйОтчетТовары.Ссылка В(&ДокументОснованиеАО)
			|	И АвансовыйОтчетТовары.СчетФактура = &ТекущийДокумент
			|	И АвансовыйОтчетТовары.ПредъявленСФ
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетТовары.Поставщик,
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетТовары.Ссылка.Организация,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СУММА(ПартииТоваровПереданные.Количество) КАК Количество,
			|	ПартииТоваровПереданные.НомерСтрокиСписанныхТоваров КАК НомерСтроки,
			|	ПартииТоваровПереданные.Регистратор
			|ПОМЕСТИТЬ РеализованныеТоварыКомитента
			|ИЗ
			|	РегистрНакопления.ПартииТоваровПереданные КАК ПартииТоваровПереданные
			|ГДЕ
			|	ПартииТоваровПереданные.Активность
			|	И ПартииТоваровПереданные.Регистратор В(&ДокументыОснования)
			|	И ПартииТоваровПереданные.СтатусПередачи = ЗНАЧЕНИЕ(Перечисление.СтатусыПолученияПередачиТоваров.НаКомиссию)
			|	И ПартииТоваровПереданные.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПартииТоваровПереданные.НомерСтрокиСписанныхТоваров,
			|	ПартииТоваровПереданные.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
			|	ОтчетКомиссионераОПродажах.Ссылка.Организация КАК Организация,
			|	ОтчетКомиссионераОПродажах.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ОтчетКомиссионераОПродажах.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
			|ПОМЕСТИТЬ ВТ_ОтчетКомиссионераОПродажах
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажах
			|ГДЕ
			|	ОтчетКомиссионераОПродажах.Ссылка В(&ДокументыОснования)
			|	И ОтчетКомиссионераОПродажах.ВыставленСФ
			|	И ОтчетКомиссионераОПродажах.СчетФактура = &ТекущийДокумент
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ВЫБОР
			|			КОГДА РеализованныеТоварыКомитента.Количество ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА ОтчетКомиссионераОПродажахТовары.Количество = РеализованныеТоварыКомитента.Количество
			|				ТОГДА ОтчетКомиссионераОПродажахТовары.Сумма + ВЫБОР
			|						КОГДА ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС
			|							ТОГДА 0
			|						ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаНДС
			|					КОНЕЦ
			|			ИНАЧЕ (ОтчетКомиссионераОПродажахТовары.Сумма + ВЫБОР
			|					КОГДА ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА 0
			|					ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаНДС
			|				КОНЕЦ) / ОтчетКомиссионераОПродажахТовары.Количество * РеализованныеТоварыКомитента.Количество
			|		КОНЕЦ) КАК СуммаДокументаКомиссия,
			|	СУММА(ВЫБОР
			|			КОГДА РеализованныеТоварыКомитента.Количество ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА ОтчетКомиссионераОПродажахТовары.Количество = РеализованныеТоварыКомитента.Количество
			|				ТОГДА ОтчетКомиссионераОПродажахТовары.СуммаНДС
			|			ИНАЧЕ РеализованныеТоварыКомитента.Количество * (ОтчетКомиссионераОПродажахТовары.СуммаНДС / ОтчетКомиссионераОПродажахТовары.Количество)
			|		КОНЕЦ) КАК СуммаНДСДокументаКомиссия
			|ПОМЕСТИТЬ ВТ_Суммы
			|ИЗ
			|	ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|			ЛЕВОЕ СОЕДИНЕНИЕ РеализованныеТоварыКомитента КАК РеализованныеТоварыКомитента
			|			ПО ОтчетКомиссионераОПродажахТовары.Ссылка = РеализованныеТоварыКомитента.Регистратор
			|				И ОтчетКомиссионераОПродажахТовары.НомерСтроки = РеализованныеТоварыКомитента.НомерСтроки
			|		ПО ВТ_ОтчетКомиссионераОПродажах.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.КлючСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ОтчетКомиссионераОПродажах.Организация КАК Организация,
			|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Контрагент,
			|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК Дата,
			|	ВЫБОР
			|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Покупатель = ОтчетКомиссионераОПродажахПокупатели.Ссылка.Контрагент
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			|	КОНЕЦ КАК Договор,
			|	СУММА(ВТ_Суммы.Сумма + ВЫБОР
			|			КОГДА ВТ_ОтчетКомиссионераОПродажах.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ВТ_Суммы.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	СУММА(ВТ_Суммы.СуммаНДС) КАК СуммаНДСДокумента,
			|	ВТ_ОтчетКомиссионераОПродажах.ВалютаДокумента КАК ВалютаДокумента,
			|	1 КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности,
			|	СУММА(ВТ_Суммы.СуммаДокументаКомиссия) КАК СуммаДокументаКомиссия,
			|	СУММА(ВТ_Суммы.СуммаНДСДокументаКомиссия) КАК СуммаНДСДокументаКомиссия
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
			|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ВТ_ОтчетКомиссионераОПродажах.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
			|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_Суммы.КлючСтроки
			|ГДЕ
			|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ОтчетКомиссионераОПродажах.ВалютаДокумента,
			|	ОтчетКомиссионераОПродажахПокупатели.Покупатель,
			|	ВТ_ОтчетКомиссионераОПродажах.Организация,
			|	ВЫБОР
			|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Покупатель = ОтчетКомиссионераОПродажахПокупатели.Ссылка.Контрагент
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			|	КОНЕЦ,
			|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_КорректировкаПоступления", ДокументыОснования);
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КорректировкаПоступленияТовары.Ссылка КАК Документ,
			|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
			|	КорректировкаПоступленияТовары.Ссылка.Контрагент КАК Контрагент,
			|	КорректировкаПоступленияТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУменьшение,
			|	КорректировкаПоступленияТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаПоступленияТовары.Сумма
			|					ИНАЧЕ КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаПоступленияТовары.СуммаНДС
			|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
			|	КОНЕЦ КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ПОМЕСТИТЬ КорректировкаПоступления
			|ИЗ
			|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
			|ГДЕ
			|	КорректировкаПоступленияТовары.Ссылка В(&ДокументОснование_КорректировкаПоступления)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаПоступленияУслуги.Ссылка КАК Документ,
			|	КорректировкаПоступленияУслуги.Ссылка.Организация,
			|	КорректировкаПоступленияУслуги.Ссылка.Контрагент,
			|	КорректировкаПоступленияУслуги.Ссылка.ДоговорКонтрагента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - (КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	КорректировкаПоступленияУслуги.Ссылка.ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаПоступленияУслуги.Сумма
			|					ИНАЧЕ КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаПоступленияУслуги.СуммаНДС
			|		ИНАЧЕ КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КорректировкаПоступленияУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
			|ГДЕ
			|	КорректировкаПоступленияУслуги.Ссылка В(&ДокументОснование_КорректировкаПоступления)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаПоступления.Документ,
			|	КорректировкаПоступления.Организация,
			|	КорректировкаПоступления.Контрагент,
			|	КорректировкаПоступления.Договор,
			|	КорректировкаПоступления.ВалютаДокумента,
			|	СУММА(КорректировкаПоступления.СуммаУвеличение) КАК СуммаУвеличение,
			|	СУММА(КорректировкаПоступления.СуммаУменьшение) КАК СуммаУменьшение,
			|	СУММА(КорректировкаПоступления.СуммаНДСУвеличение) КАК СуммаНДСУвеличение,
			|	СУММА(КорректировкаПоступления.СуммаНДСУменьшение) КАК СуммаНДСУменьшение,
			|	СУММА(КорректировкаПоступления.СуммаДокумента) КАК СуммаДокумента,
			|	СУММА(КорректировкаПоступления.СуммаНДСДокумента) КАК СуммаНДСДокумента,
			|	СУММА(КорректировкаПоступления.ЕстьНДС) КАК ЕстьНДС
			|ИЗ
			|	КорректировкаПоступления КАК КорректировкаПоступления
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаПоступления.Организация,
			|	КорректировкаПоступления.Контрагент,
			|	КорректировкаПоступления.Договор,
			|	КорректировкаПоступления.Документ,
			|	КорректировкаПоступления.ВалютаДокумента
			|ИТОГИ
			|	СУММА(СуммаУвеличение),
			|	СУММА(СуммаУменьшение),
			|	СУММА(СуммаНДСУвеличение),
			|	СУММА(СуммаНДСУменьшение),
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДСДокумента),
			|	СУММА(ЕстьНДС)
			|ПО
			|	ОБЩИЕ";
			
			Если СчетФактура.Исправление Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
			КонецЕсли;
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_КорректировкаРеализации", ДокументыОснования);
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КорректировкаРеализацииТовары.Ссылка КАК Документ,
			|	КорректировкаРеализацииТовары.Ссылка.Организация КАК Организация,
			|	КорректировкаРеализацииТовары.Ссылка.Контрагент КАК Контрагент,
			|	КорректировкаРеализацииТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			|	КорректировкаРеализацииТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаРеализацииТовары.Сумма
			|					ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаРеализацииТовары.СуммаНДС
			|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
			|	КОНЕЦ КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ПОМЕСТИТЬ КорректировкаРеализации
			|ИЗ
			|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|ГДЕ
			|	КорректировкаРеализацииТовары.Ссылка В(&ДокументОснование_КорректировкаРеализации)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаРеализацииУслуги.Ссылка КАК Документ,
			|	КорректировкаРеализацииУслуги.Ссылка.Организация,
			|	КорректировкаРеализацииУслуги.Ссылка.Контрагент,
			|	КорректировкаРеализацииУслуги.Ссылка.ДоговорКонтрагента,
			|	КорректировкаРеализацииУслуги.Ссылка.ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаРеализацииУслуги.Сумма
			|					ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДС
			|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
			|ГДЕ
			|	КорректировкаРеализацииУслуги.Ссылка В(&ДокументОснование_КорректировкаРеализации)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаРеализации.Документ,
			|	КорректировкаРеализации.Организация,
			|	КорректировкаРеализации.Контрагент,
			|	КорректировкаРеализации.Договор,
			|	КорректировкаРеализации.ВалютаДокумента,
			|	СУММА(КорректировкаРеализации.СуммаУвеличение) КАК СуммаУвеличение,
			|	СУММА(КорректировкаРеализации.СуммаУменьшение) КАК СуммаУменьшение,
			|	СУММА(КорректировкаРеализации.СуммаНДСУвеличение) КАК СуммаНДСУвеличение,
			|	СУММА(КорректировкаРеализации.СуммаНДСУменьшение) КАК СуммаНДСУменьшение,
			|	СУММА(КорректировкаРеализации.СуммаДокумента) КАК СуммаДокумента,
			|	СУММА(КорректировкаРеализации.СуммаНДСДокумента) КАК СуммаНДСДокумента,
			|	СУММА(КорректировкаРеализации.ЕстьНДС) КАК ЕстьНДС
			|ИЗ
			|	КорректировкаРеализации КАК КорректировкаРеализации
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализации.Организация,
			|	КорректировкаРеализации.Контрагент,
			|	КорректировкаРеализации.Договор,
			|	КорректировкаРеализации.Документ,
			|	КорректировкаРеализации.ВалютаДокумента
			|ИТОГИ
			|	СУММА(СуммаУвеличение),
			|	СУММА(СуммаУменьшение),
			|	СУММА(СуммаНДСУвеличение),
			|	СУММА(СуммаНДСУменьшение),
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДСДокумента),
			|	СУММА(ЕстьНДС)
			|ПО
			|	ОБЩИЕ";
			
			Если СчетФактура.Исправление Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
			КонецЕсли;
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_ПоступлениеДопРасходов", ДокументыОснования);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Таблица.Ссылка.Организация КАК Организация,
			|	Таблица.Ссылка.Контрагент КАК Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента КАК Договор,
			|	СУММА(Таблица.Сумма + ВЫБОР
			|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ Таблица.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	Таблица.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	СУММА(Таблица.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(0) КАК СуммаДокументаКомиссия,
			|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
			|	СУММА(ВЫБОР
			|			КОГДА Таблица.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.ПоступлениеДопРасходов.Товары КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В(&ДокументОснование_ПоступлениеДопРасходов)
			|
			|СГРУППИРОВАТЬ ПО
			|	Таблица.Ссылка,
			|	Таблица.Ссылка.Организация,
			|	Таблица.Ссылка.Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента,
			|	Таблица.Ссылка.ВалютаДокумента
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоступлениеДопРасходов.Организация,
			|	ПоступлениеДопРасходов.Контрагент,
			|	ПоступлениеДопРасходов.ДоговорКонтрагента,
			|	СУММА(ПоступлениеДопРасходов.Сумма + ВЫБОР
			|			КОГДА ПоступлениеДопРасходов.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ПоступлениеДопРасходов.СуммаНДС
			|		КОНЕЦ),
			|	ПоступлениеДопРасходов.ВалютаДокумента,
			|	СУММА(ПоступлениеДопРасходов.СуммаНДС),
			|	0,
			|	0,
			|	СУММА(ВЫБОР
			|			КОГДА ПоступлениеДопРасходов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ),
			|	ЛОЖЬ
			|ИЗ
			|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
			|ГДЕ
			|	ПоступлениеДопРасходов.Ссылка В(&ДокументОснование_ПоступлениеДопРасходов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеДопРасходов.Организация,
			|	ПоступлениеДопРасходов.Контрагент,
			|	ПоступлениеДопРасходов.ДоговорКонтрагента,
			|	ПоступлениеДопРасходов.ВалютаДокумента";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			
			Запрос.УстановитьПараметр("ДокументОснование_РеализацияТоваровУслуг", ДокументыОснования);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
			|	ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров КАК НомерСтроки,
			|	ПартииТоваровНаСкладах.Регистратор
			|ПОМЕСТИТЬ РеализованныеТоварыКомитента
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
			|ГДЕ
			|	ПартииТоваровНаСкладах.Активность
			|	И ПартииТоваровНаСкладах.Регистратор В(&ДокументОснование_РеализацияТоваровУслуг)
			|	И ПартииТоваровНаСкладах.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров,
			|	ПартииТоваровНаСкладах.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Ссылка.Организация,
			|	РеализацияТоваровУслугТовары.Ссылка.Контрагент,
			|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			|	СУММА(РеализацияТоваровУслугТовары.Сумма + ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ РеализацияТоваровУслугТовары.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента,
			|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности,
			|	СУММА(ВЫБОР
			|			КОГДА РеализованныеТоварыКомитента.Количество ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА РеализацияТоваровУслугТовары.Количество = РеализованныеТоварыКомитента.Количество
			|				ТОГДА РеализацияТоваровУслугТовары.Сумма + ВЫБОР
			|						КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|							ТОГДА 0
			|						ИНАЧЕ РеализацияТоваровУслугТовары.СуммаНДС
			|					КОНЕЦ
			|			ИНАЧЕ (РеализацияТоваровУслугТовары.Сумма + ВЫБОР
			|					КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА 0
			|					ИНАЧЕ РеализацияТоваровУслугТовары.СуммаНДС
			|				КОНЕЦ) / РеализацияТоваровУслугТовары.Количество * РеализованныеТоварыКомитента.Количество
			|		КОНЕЦ) КАК СуммаДокументаКомиссия,
			|	СУММА(ВЫБОР
			|			КОГДА РеализованныеТоварыКомитента.Количество ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА РеализацияТоваровУслугТовары.Количество = РеализованныеТоварыКомитента.Количество
			|				ТОГДА РеализацияТоваровУслугТовары.СуммаНДС
			|			ИНАЧЕ РеализованныеТоварыКомитента.Количество * (РеализацияТоваровУслугТовары.СуммаНДС / РеализацияТоваровУслугТовары.Количество)
			|		КОНЕЦ) КАК СуммаНДСДокументаКомиссия
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РеализованныеТоварыКомитента КАК РеализованныеТоварыКомитента
			|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализованныеТоварыКомитента.Регистратор
			|			И РеализацияТоваровУслугТовары.НомерСтроки = РеализованныеТоварыКомитента.НомерСтроки
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка В(&ДокументОснование_РеализацияТоваровУслуг)
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.Ссылка.Организация,
			|	РеализацияТоваровУслугТовары.Ссылка.Контрагент,
			|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента,
			|	РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугУслуги.Ссылка.Организация,
			|	РеализацияТоваровУслугУслуги.Ссылка.Контрагент,
			|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента,
			|	СУММА(РеализацияТоваровУслугУслуги.Сумма + ВЫБОР
			|			КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ РеализацияТоваровУслугУслуги.СуммаНДС
			|		КОНЕЦ),
			|	РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента,
			|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС),
			|	СУММА(ВЫБОР
			|			КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ),
			|	ЛОЖЬ,
			|	СУММА(0),
			|	СУММА(0)
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|ГДЕ
			|	РеализацияТоваровУслугУслуги.Ссылка В(&ДокументОснование_РеализацияТоваровУслуг)
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугУслуги.Ссылка.Контрагент,
			|	РеализацияТоваровУслугУслуги.Ссылка.Организация,
			|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента,
			|	РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента";
			
		Иначе
			
			ТекстЗапроса = ПолучитьТекстЗапросаОпределенияПараметровСФ(ДокументыОснования, ЭтоПолученныйСФ, Запрос.Параметры);
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст),"", Запрос.Текст + Символы.ПС+"Объединить Все "+Символы.ПС)+ТекстЗапроса;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
	    Возврат;
	Иначе
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПерваяСтрока = Истина;
		РазныеОрганизации = ложь;
		РазныеКонтрагенты = ложь;
		РазныеДоговоры = ложь;
		РазныеВалюты = ложь;
		Пока Выборка.Следующий() Цикл
			
			ЭтоКорректировочный = Ложь;
			
			Если Корректировка Тогда
				
				Если ЭтоПолученныйСФ Тогда
					ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				Иначе
					ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;						
				КонецЕсли;
				
				Результат.СуммаУвеличение		= Результат.СуммаУвеличение + Выборка.СуммаУвеличение;
				Результат.СуммаУменьшение		= Результат.СуммаУменьшение + Выборка.СуммаУменьшение;
				Результат.СуммаНДСУвеличение	= Результат.СуммаНДСУвеличение + Выборка.СуммаНДСУвеличение;
				Результат.СуммаНДСУменьшение	= Результат.СуммаНДСУменьшение + Выборка.СуммаНДСУменьшение;
				Результат.СуммаДокумента 		= Результат.СуммаДокумента + Выборка.СуммаДокумента;
				Результат.СуммаНДСДокумента 	= Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
				
				ВыборкаДокументы = Выборка.Выбрать();
				Пока ВыборкаДокументы.Следующий() Цикл
					
					Если ПерваяСтрока Тогда
						СтрокаРеквизитов = "Организация,Контрагент,ВалютаДокумента,Договор";
						ЗаполнитьЗначенияСвойств(Результат, ВыборкаДокументы, СтрокаРеквизитов);
						Результат.СчетФактураБезНДС = ВыборкаДокументы.ЕстьНДС = 0;
						ПерваяСтрока = Ложь;
					КонецЕсли;
					
					РазныеОрганизации	= РазныеОрганизации ИЛИ Результат.Организация <> ВыборкаДокументы.Организация;
					РазныеКонтрагенты	= РазныеКонтрагенты ИЛИ Результат.Контрагент <> ВыборкаДокументы.Контрагент;
					РазныеВалюты		= РазныеВалюты ИЛИ Результат.ВалютаДокумента <> ВыборкаДокументы.ВалютаДокумента;
					РазныеДоговоры		= ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры ИЛИ Результат.Договор <> ВыборкаДокументы.Договор);
					
					Если Результат.СчетФактураБезНДС Тогда
						Результат.СчетФактураБезНДС = ВыборкаДокументы.ЕстьНДС = 0;
					КонецЕсли;
					
					Если ЭтоКорректировочный Тогда
						
						СтрокаСРеквизитами = РеквизитыОснований.Добавить();
						
						СтрокаСРеквизитами.ДокументОснование 	= ВыборкаДокументы.Документ;
						СтрокаСРеквизитами.СуммаУвеличение 		= ВыборкаДокументы.СуммаУвеличение;
						СтрокаСРеквизитами.СуммаУменьшение 		= ВыборкаДокументы.СуммаУменьшение;
						СтрокаСРеквизитами.СуммаНДСУвеличение	= ВыборкаДокументы.СуммаНДСУвеличение;
						СтрокаСРеквизитами.СуммаНДСУменьшение 	= ВыборкаДокументы.СуммаНДСУменьшение;
						
						Если ЭтоПолученныйСФ Тогда
							
							ДокументПоступления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыборкаДокументы.Документ, "ДокументПоступления");	
							
							Если СчетФактура.Исправление Тогда 
								ИсходныйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ВыборкаДокументы.Документ);
								Если ТипЗнч(ИсходныйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
									ИсходныйДокументПоступления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИсходныйДокументПоступления, "ДокументПоступления");
								КонецЕсли; 
							Иначе
								ИсходныйДокументПоступления = ДокументПоступления;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ИсходныйДокументПоступления) Тогда
								РеквизитыИсходногоСчетаФактуры = ПолучитьРеквизитыСчетаФактурыПолученного(ИсходныйДокументПоступления);
							КонецЕсли;
							
							Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
								
								СтрокаСРеквизитами.НомерИсходногоДокумента 				  = РеквизитыИсходногоСчетаФактуры.НомерСчетаФактуры;
								СтрокаСРеквизитами.ДатаИсходногоДокумента  				  = РеквизитыИсходногоСчетаФактуры.ДатаСчетаФактуры;
								СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.Исправление;
								СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента     = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
								СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента      = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
								
							КонецЕсли;
							
						Иначе
							
							ДокументРеализации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыборкаДокументы.Документ, "ДокументРеализации");	
							
							Если СчетФактура.Исправление Тогда 
								ИсходныйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ВыборкаДокументы.Документ);
								Если ТипЗнч(ИсходныйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
									ИсходныйДокументРеализации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИсходныйДокументРеализации, "ДокументРеализации");
								КонецЕсли; 
							Иначе
								ИсходныйДокументРеализации = ДокументРеализации;	
							КонецЕсли;
							
							РеквизитыИсходногоСчетаФактуры = ПолучитьРеквизитыСчетаФактурыВыданного(ИсходныйДокументРеализации);
							
							Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
								
								СтрокаСРеквизитами.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерСчетаФактуры;
								СтрокаСРеквизитами.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаСчетаФактуры;
								СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.Исправление;
								СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента     = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
								СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента      = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
								
							КонецЕсли;
 					
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если ПерваяСтрока Тогда
					ПерваяСтрока = Ложь;
					ЗаполнитьЗначенияСвойств(Результат, Выборка);
					Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
				Иначе
					РазныеОрганизации = РазныеОрганизации ИЛИ Результат.Организация <> Выборка.Организация;
					РазныеКонтрагенты = РазныеКонтрагенты ИЛИ Результат.Контрагент <> Выборка.Контрагент;
					РазныеВалюты      = РазныеВалюты ИЛИ Результат.ВалютаДокумента <> Выборка.ВалютаДокумента;
					РазныеДоговоры    = ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры ИЛИ Результат.Договор <> Выборка.Договор);
					
					Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.СуммаДокумента;
					Результат.СуммаНДСДокумента = Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
					
					Результат.СуммаДокументаКомиссия 	= Результат.СуммаДокументаКомиссия + Выборка.СуммаДокументаКомиссия;
					Результат.СуммаНДСДокументаКомиссия = Результат.СуммаНДСДокументаКомиссия + Выборка.СуммаНДСДокументаКомиссия;
					
					Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") 
						ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
						
						Результат.СуммаУвеличение    = Результат.СуммаУвеличение    + Выборка.СуммаУвеличение;
						Результат.СуммаУменьшение    = Результат.СуммаУменьшение + Выборка.СуммаУменьшение;
						Результат.СуммаНДСУвеличение = Результат.СуммаНДСУвеличение    + Выборка.СуммаНДСУвеличение;
						Результат.СуммаНДСУменьшение = Результат.СуммаНДСУменьшение + Выборка.СуммаНДСУменьшение;
					Иначе
						Результат.СуммаУвеличение 	 = 0;
						Результат.СуммаУменьшение 	 = 0;					
						Результат.СуммаНДСУвеличение = 0;
						Результат.СуммаНДСУменьшение = 0;					
					КонецЕсли;
					
					Если Результат.СчетФактураБезНДС Тогда
						Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ссылка.СводныйКомиссионный Тогда
			РазныеКонтрагенты = Ложь;
			Результат.Контрагент = Неопределено;
		КонецЕсли;
		
		Если РазныеОрганизации или РазныеКонтрагенты или РазныеВалюты Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:"+
							?(РазныеОрганизации,Символы.ПС+" - не совпадает организация","")+
							?(РазныеКонтрагенты,Символы.ПС+" - не совпадает контрагент","")+
							?(РазныеДоговоры,Символы.ПС+" - не совпадает договор","")+
							?(РазныеВалюты,Символы.ПС+" - не совпадает валюта документа","")+
							Символы.ПС+"Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.", Ложь, Строка(СчетФактура), СтатусСообщения.Внимание); 
			Если РазныеОрганизации Тогда
				 Результат.Организация = Неопределено;
			КонецЕсли; 				
			Если РазныеКонтрагенты Тогда
				 Результат.Контрагент = Неопределено;
			КонецЕсли; 				
			Если РазныеВалюты Тогда
				 Результат.ВалютаДокумента = Неопределено;
			КонецЕсли; 				
			Если РазныеДоговоры тогда
				 Результат.Договор = Неопределено;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПолучитьПараметрыСчетаФактуры()

Функция ПолучитьТекстЗапросаОпределенияПараметровСФ(ДокументыОснования, ЭтоПолученныйСФ, ПараметрыЗапроса, ИмяВременнойТаблицы = "") Экспорт
	
	ИгнорироватьТЧ = Новый Массив;
	ИгнорироватьТЧ.Добавить("ВозвратнаяТара");
	ИгнорироватьТЧ.Добавить("ВыданныеАвансы");
	ИгнорироватьТЧ.Добавить("ДенежныеСредства");
	ИгнорироватьТЧ.Добавить("ПрочиеЗатраты");
	ИгнорироватьТЧ.Добавить("РаспределениеПрочихЗатрат");
	ИгнорироватьТЧ.Добавить("ИспользованныеМатериалы");
	
	МетаданныеДокумента = ДокументыОснования[0].Метаданные();
	ТипДокументаОснования = ТипЗнч(ДокументыОснования[0]);
	
	ИмяОбъекта = МетаданныеДокумента.Имя;
	ПараметрыЗапроса.Вставить("ДокументОснование_" + ИмяОбъекта, ДокументыОснования);
	
	ПостфиксСумм = "";
	Множитель = 1;
	ИмяРеквизитаСтавкаНДС = "СтавкаНДС";
	
	Если ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И ЭтоПолученныйСФ Тогда
			
		ПостфиксСумм = "Вознаграждения";
		ИмяРеквизитаСтавкаНДС = "Ссылка.СтавкаНДСВознаграждения";
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И НЕ ЭтоПолученныйСФ
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ Тогда
			
		Множитель = - 1;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Множитель_" + ИмяОбъекта, Множитель);
	
	ТекстЗапроса = "";
	
	ТекстСекцииПоместить = "";
	
	Для каждого МетаданныеТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ИгнорироватьТЧ.Найти(МетаданныеТЧ.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеТЧ.Реквизиты.Найти("Сумма") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСуммаВключаетНДС = МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено;
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Если НЕ ПустаяСтрока(ИмяВременнойТаблицы) Тогда
				ТекстСекцииПоместить = "
				|ПОМЕСТИТЬ
				|	" + ИмяВременнойТаблицы + "
				|";
			КонецЕсли;
		Иначе
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			ТекстСекцииПоместить = "";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Таблица.Ссылка.Организация КАК Организация,
		|	Таблица.Ссылка.Контрагент КАК Контрагент,
		|	Таблица.Ссылка.ДоговорКонтрагента КАК Договор,
		|	СУММА(Таблица.Сумма" + ПостфиксСумм + ?(ЕстьСуммаВключаетНДС, " + ВЫБОР
		|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
		|				ТОГДА 0
		|			ИНАЧЕ Таблица.СуммаНДС" + ПостфиксСумм + "
		|		КОНЕЦ", "") + ") * &Множитель_" + ИмяОбъекта + " КАК СуммаДокумента,
		|	Таблица.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	СУММА(Таблица.СуммаНДС" + ПостфиксСумм + ") * &Множитель_" + ИмяОбъекта + " КАК СуммаНДСДокумента,
		|   0 КАК СуммаДокументаКомиссия, 
		|   0 КАК СуммаНДСДокументаКомиссия,
		|	СУММА(ВЫБОР
		|			КОГДА Таблица." + ИмяРеквизитаСтавкаНДС + " = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК ЕстьНДС,
		|	ЛОЖЬ КАК БланкСтрогойОтчетности" + ТекстСекцииПоместить + "
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + "." + МетаданныеТЧ.Имя + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Ссылка.Организация,
		|	Таблица.Ссылка.Контрагент,
		|	Таблица.Ссылка.ДоговорКонтрагента,
		|	Таблица.Ссылка.ВалютаДокумента";
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда // в документе не оказалось табличных частей
		
		Если МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДокОснование.Организация КАК Организация,
			|	ДокОснование.Контрагент КАК Контрагент,
			|	ДокОснование.ДоговорКонтрагента КАК Договор,
			|	СУММА(ДокОснование.Сумма + ВЫБОР
			|			КОГДА ДокОснование.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ДокОснование.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	ДокОснование.СуммаНДС КАК СуммаНДСДокумента,
			|   0 КАК СуммаДокументаКомиссия, 
			|   0 КАК СуммаНДСДокументаКомиссия,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС
			|ИЗ
			|	Документ." + МетаданныеДокумента.Имя + " КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&ДокументОснование_" + МетаданныеДокумента.Имя + ")
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокОснование.Ссылка,
			|	ДокОснование.ДоговорКонтрагента,
			|	ДокОснование.СуммаНДС,
			|	ДокОснование.Организация,
			|	ДокОснование.Контрагент,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ";
			
			
		Иначе
			
			Если (ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
				или ((ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) И ЭтоПолученныйСФ) Тогда
				ИдРеквСумма = "СуммаВознаграждения";
			ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И не ЭтоПолученныйСФ) тогда
				ИдРеквСумма = "СуммаДокумента*(-1)";
			ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ) тогда
				ИдРеквСумма = "СуммаДокумента*(-1)";
			Иначе
				ИдРеквСумма = "СуммаДокумента";
			КонецЕсли;
			
			ИмяОбъекта = МетаданныеДокумента.Имя;
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	" + ИмяОбъекта + ".Организация,
			|	" + ИмяОбъекта + ".Контрагент,
			|	" + ИмяОбъекта + ".ДоговорКонтрагента как Договор,
			|	" + ИмяОбъекта + "." + ИдРеквСумма + " Как СуммаДокумента,
			|	" + ИмяОбъекта + ".ВалютаДокумента Как ВалютаДокумента,
			|	0 Как СуммаДокументаКомиссия,
			|	0 Как СуммаНДСДокументаКомиссия,
			|	0 Как СуммаНДСДокумента,
			|	1 Как ЕстьНДС
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК " + ИмяОбъекта + "
			
			|ГДЕ
			|	" + ИмяОбъекта + ".Ссылка в (&ДокументОснование_"+ИмяОбъекта+")";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяется список услуг, которые обрлагаются ЕНВД в указанной организации по регистру УслугиЕНВД
// Параметры
// 	Дата, Организация
// Возвращает список значений с услугами ЕНВД
Функция ПолучитьСписокУслугОблагаемыхЕНВД(Дата, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УслугиЕНВДСрезПоследних.Номенклатура
	|ИЗ
	|	РегистрСведений.УслугиЕНВД.СрезПоследних(&Дата, Организация = &Организация) КАК УслугиЕНВДСрезПоследних
	|ГДЕ
	|	УслугиЕНВДСрезПоследних.ОблагаетсяЕНВД";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Новый СписокЗначений();
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Номенклатура"));
	
	Возврат Результат;
	
КонецФункции 

// Процедура проверяет соответствие реквизитов счета-фактуры и документа-основания.
// В случае несоответствия реквизиты счета-фактуры перезаполняются и выдается сообщение пользователю.
//
// Параметры:
//		- ДокОбъект - документ-основание
//		- Сообщать  - флаг, если истина, то выводить сообщение пользователю, по умолчанию = Истина
//
// Возврат:
//		- Истина, если различий не найдено, Ложь в противном случае
//
Процедура ПроверитьСоответствиеРеквизитовСчетаФактуры(ДокОбъект, ВидДокумента = "СчетФактураВыданный", Сообщать = Истина, НайденныйСФ = Неопределено) Экспорт
	
	Если ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.СчетФактура КАК СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &Ссылка
		|	И Таб.ПредъявленСФ
		|	И Таб.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &Ссылка
		|	И Таб.ПредъявленСФ
		|	И Таб.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)";
		Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
		СчетаФактуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
		
		Если СчетаФактуры.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		СчетаФактуры = Новый Массив;
		Если НайденныйСФ = Неопределено Тогда
			СчетФактура = НайтиПодчиненныйСчетФактуру( ДокОбъект.Ссылка, ВидДокумента);
			НайденныйСФ = СчетФактура;
		Иначе
			СчетФактура = НайденныйСФ;
		КонецЕсли;
		
		Если СчетФактура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СчетаФактуры.Добавить(СчетФактура);
		
	КонецЕсли;
	
	ДокументНеПроведен = Ложь;
	Если ДокОбъект.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено
		И Не ДокОбъект.ОтражатьВБухгалтерскомУчете Тогда
		ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании документа, отражаемого в бухгалтерском учете");
		ДокументНеПроведен = Истина;
	КонецЕсли;
	
	Для каждого СчетФактура Из СчетаФактуры Цикл
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДокументНеПроведен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документа """ + СчетФактура + """ автоматически не перезаполнены и могут быть неактуальными");
			Продолжить;
		КонецЕсли;
		
		Если СчетФактура.ПометкаУдаления Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ """ + СчетФактура + """ помечен на удаление. Реквизиты документа автоматически не перезаполнены");				
			Продолжить;
		КонецЕсли;
		
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		
		Попытка
			СчетФактураОбъект.Заблокировать();			
			Если СчетФактураОбъект.ПроверитьЗаполнение() Тогда
				Если УчетНДС.ПолучитьВерсиюПостановления(СчетФактураОбъект.Дата) = 2 Тогда
					Если ДокОбъект.Проведен Тогда
						СчетФактураОбъект.ДополнительныеСвойства.Вставить("СообщитьОбИзмененииРеквизитов", Истина);			
						СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						СчетФактураОбъект.ДополнительныеСвойства.Вставить("СообщитьОбИзмененииРеквизитов", Ложь);			
						СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					КонецЕсли;
				Иначе
					Если ДокОбъект.Проведен Тогда
						СчетФактураОбъект.ДополнительныеСвойства.Вставить("СообщитьОбИзмененииРеквизитов", Истина);			
					Иначе
						СчетФактураОбъект.ДополнительныеСвойства.Вставить("СообщитьОбИзмененииРеквизитов", Ложь);			
					КонецЕсли;
					СчетФактураОбъект.Записать();
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документа """ + СчетФактура + """ автоматически не перезаполнены и могут быть неактуальными");
			КонецЕсли;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документа """ + СчетФактура + """ автоматически не перезаполнены и могут быть неактуальными");
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//Определяет применяется ли упрощенная система налогообложения
//
Функция ОрганизацияУчитываетНДС(Организация, Знач Дата) Экспорт //~

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	ОшибкаВПолучении = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация, "Нал");
		
	Возврат ?(ОшибкаВПолучении, Ложь, Не УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС);

КонецФункции

//Функция определения вида ценности по группе критериев.
//
Функция ОпределитьВидЦенности(Объект, ЭтоДопРасходы = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = Неопределено, ЭтоУслуга = Ложь) Экспорт

	Если ЭтоАгентскийНДС Тогда

		// Это агентский НДС - для него применяется специальный вид ценности.
		Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
		ИначеЕсли ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияИмущества Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;
	ИначеЕсли ЭтоДопРасходы Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда
		Если НЕ ЗначениеЗаполнено(Объект) Или ЭтоУслуга = Истина Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.Товары;
		КонецЕсли;
	Иначе
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции // ОпределитьВидЦенности()

// Функция определяет объект учета (ценность) в строке табличной части.
// Сама табличная часть задается в параметре ТаблицаЗначений. В результате 
// анализа этой табличной части определяется из какой именно колонки нужно 
// взять объект учета.
Функция ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений) Экспорт

	Ценность = "";

	Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.Номенклатура;

	КонецЕсли;

	Возврат Ценность;

КонецФункции // ОпределитьЦенностьИзСтрокиТабличнойЧасти()

// Функция для выбора подчиненных счетов-фактур на аванс по ссылке на документ оплаты
// Помимо списка документов получает дополнительные реквизиты (договор, ставка НДС)
Функция ВыбратьПодчиненныеСФНаАванс(ДокументСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда

		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданный.ДоговорКонтрагента,
		|	СчетФактураВыданный.СтавкаНДС
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументСсылка И
		|	(СчетФактураВыданный.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыВыставленного.НаАванс))";

		Результат = Запрос.Выполнить().Выгрузить();

	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции // НайтиПодчиненныйДокумент()

// Процедура арифметически распределяет заданную сумму
// по столбцу таблицы значений пропрционально колонке базы распределения
// при этом размерность таблицы и базы распределения должны совпадать.
// Как правило база распределения - просто одна из колонок таблицы
Процедура РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата) Экспорт

	// Определяем сумму базы
	СуммаБазы = 0;

	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;

	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;

		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл

			// Рассчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;

			// Записываем результат
			ТаблицаРезультата[Индекс][ИдКолонкиРезультата] = ШагРаспределения;

			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РаспределитьСуммуПоСтолбцу()

// Процедура подготовки таблицы значений для целей формирования движений
// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
// в таблице значений, переданной в качестве параметра
Процедура ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений) Экспорт

	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		ЕстьКолонкаУслуга = ТаблицаЗначений.Колонки.Найти("Услуга") <> Неопределено;
		ЭтоУслуга = ?(ЕстьКолонкаУслуга, СтрокаТаблицы.Услуга, Неопределено);

		Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
			Ценность = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
		КонецЕсли;

		ЭтоДопРасходы         = (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов");
		УчетАгентскогоНДС     = Ложь;
		ВидАгентскогоДоговора = "";

		Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") и ЗначениеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) тогда
			УчетАгентскогоНДС = СтруктураШапкиДокумента.УчетАгентскогоНДС;
		КонецЕсли;
		Если СтруктураШапкиДокумента.Свойство("ВидАгентскогоДоговора") тогда
			ВидАгентскогоДоговора = СтруктураШапкиДокумента.ВидАгентскогоДоговора;
		КонецЕсли;
		
		СтрокаТаблицы.ВидЦенности = ОпределитьВидЦенности(Ценность, ЭтоДопРасходы, УчетАгентскогоНДС, ВидАгентскогоДоговора, ЭтоУслуга);
		СтрокаТаблицы.Ценность    = Ценность;

	КонецЦикла;

КонецПроцедуры // ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС()

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСНачисленный в разрезе различных ставок НДС.
//
Процедура РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС) Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));
	
	ВидыНачисленияРеализация = Новый СписокЗначений;
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("ВидыНачисленияРеализация", ВидыНачисленияРеализация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСНачисленныйОбороты.ВидНачисления,
	               |	СУММА(НДСНачисленныйОбороты.СуммаБезНДСПриход) КАК СуммаБезНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный.Обороты(
	               |		НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
	               |		КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
	               |		,
	               |		Организация = &Организация
	               |		    И (СчетФактура.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ))
	               |		    И ВидНачисления В (&ВидыНачисленияРеализация)) КАК НДСНачисленныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленныйОбороты.ВидНачисления";
			
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		Если СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС Тогда
		    ВыручкаНДС = ВыручкаНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС Тогда	
			ВыручкаБезНДС = ВыручкаБезНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД Тогда	
			ВыручкаЕНВД = ВыручкаЕНВД + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0 Тогда	
			ВыручкаНДС0 = ВыручкаНДС0 + СтрокаРезультата.СуммаБезНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьВыручкуДляНДС()

// Функция определеяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчаню - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-фактуру
//                                  полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактурПолученных(
		НачПериода=Неопределено, 
		КонПериода= Неопределено,
		Организация,
		Фильтр = Неопределено,
		ВсеКромеФильтра = Ложь,
		НаличиеСчетаФактуры = Неопределено,
		СчетФактураПроведен = Неопределено,
		ДатаСФНеБолее = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода",  	НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  	?(НЕ ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("ДатаСФНеБолее",  ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Фильтр",      	Фильтр);
	
	// Дополняем условие запроса отбором по периоду
	Если (ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата МЕЖДУ &НачПериода И &КонПериода
		                 |";
	ИначеЕсли (ЗначениеЗаполнено(НачПериода)) И (НЕ ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата >= &НачПериода
		                 |";
	ИначеЕсли (НЕ ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата <= &КонПериода
		                 |";
	Иначе
		Условие_Основание = "";
	КонецЕсли;
	
	// Дополняем условие запроса отбором по организации
	Условие_Основание = Условие_Основание 
	               + ?(НЕ ЗначениеЗаполнено(Организация), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");
	
	// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
	Условие_Основание = Условие_Основание
	               + ?(НЕ ЗначениеЗаполнено(Фильтр), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "СчетФактура " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
					|	КОНЕЦ ЕСТЬ NULL) ");
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ТОГДА СчетФактураВыданный.Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Проведен
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Проведен, СчетФактураВыданный.Проведен)
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");
				   
	// Дополняем условие запроса отбором по дате СФ	
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее), "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ТОГДА СчетФактураВыданный.Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Дата
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Дата, СчетФактураВыданный.Дата)
					|	КОНЕЦ <= &ДатаСФНеБолее ");
	
	//// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	//УсловиеЗапроса = УсловиеЗапроса + ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
	//				|	ВЫБОР
	//				|		КОГДА " + ?(ФильтроватьКорректировкуРеализации, "НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//				|			ИЛИ ", "") + "НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
	//				|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.УчетАгентскогоНДС
	//				|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.НалоговыйАгентПоОплате
	//				|			ТОГДА ЛОЖЬ
	//				|		ИНАЧЕ ИСТИНА
	//				|	КОНЕЦ";
	
	// Дополняем условие запроса ключевым словом "ГДЕ"
	УсловиеЗапроса = ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", "ГДЕ " + УсловиеЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Проведен,
	|	СчетФактураПолученный.Ссылка КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ВТ_СчетФактурыПолученные
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|	
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Ссылка.Дата КАК Дата,
	|	СчетФактураПолученный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Ссылка.Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.Проведен,
	|	ВозвратТоваровОтПокупателя.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера <> """"
	|	И ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера <> ДАТАВРЕМЯ(1, 1, 1)
	|" + ?(ЗначениеЗаполнено(Организация), "И ВозвратТоваровОтПокупателя.Организация = &Организация", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Проведен,
	|	СчетФактураВыданный.Ссылка КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ВТ_СчетФактураВыданный
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|	" + ?(ЗначениеЗаполнено(Организация), "И Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Ссылка.Дата КАК Дата,
	|	СчетФактураВыданный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураВыданный.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|	" + ?(ЗначениеЗаполнено(Организация), "И Ссылка.Организация = &Организация", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента
	|
	|ПОМЕСТИТЬ ВТ_НДСПредъявленныйОбороты
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(, , Период, 
	|				Организация = &Организация //ДляЗамены
	|		) КАК НДСПредъявленныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.ДокументОснование
	|			ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка.Проведен
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Проведен, СчетФактураВыданный.Проведен)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Дата
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Дата, СчетФактураВыданный.Дата)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	ВТ_НДСПредъявленныйОбороты КАК НДСПредъявленныйОбороты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактурыПолученные КАК СчетФактураПолученный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.ДокументОснование
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.ДокументОснование
	|";
	
	Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация //ДляЗамены",Условие_Основание);
	
	Если ЗначениеЗаполнено(КонПериода) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,", Период","&КонПериода, Период");
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
									|УПОРЯДОЧИТЬ ПО
									|	СчетФактураДата";
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции // ОпределитьНаличиеСчетовФактурПолученных()

// Возвращает Истина, если по документу необходимо выписать счет-фактуру.
//
// Применяется для печати универсального передаточного документа
//
// Параметры:
//  ДокументОбъект - документ, для которого надо определить необходимость выписки счета-фактуры
//
Функция ОпределитьСчетФактураТребуется(ДокументОбъект) Экспорт 
	
	УчитыватьНДС = ОрганизацияУчитываетНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	ПрименяетсяОсвобождениеОтУплатыНДС = ПрименяетсяОсвобождениеОтУплатыНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ДоговорКонтрагента, "УчетАгентскогоНДС, ВидДоговора");
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ВидДокумента = МетаданныеДокумента.Имя;
	
	Если ВидДокумента = "ВозвратТоваровПоставщику" ИЛИ ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ" Тогда
		Если НЕ РеквизитыДоговора.УчетАгентскогоНДС 
			И НЕ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат ДокументОбъект.ПоставщикуВыставляетсяСчетФактураНаВозврат;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидДокумента = "КорректировкаРеализации" ИЛИ ВидДокумента = "РеализацияТоваровУслуг" Тогда
		Если ВидДокумента = "КорректировкаРеализации" Тогда
			Если ДокументОбъект.КорректироватьНДС = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		ЕстьНДС = (ДокументОбъект.Товары.Итог("СуммаНДС") > 0) ИЛИ (ДокументОбъект.Услуги.Итог("СуммаНДС") > 0);
		Если НЕ УчитыватьНДС Тогда
			Возврат ЕстьНДС;
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат Ложь;
		ИначеЕсли НЕ ЕстьНДС И НЕ ПрименяетсяОсвобождениеОтУплатыНДС Тогда
			Возврат Ложь;		
		Иначе
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ВидДокумента = "ОтчетКомитентуОПродажах" Тогда
		ЕстьНДС = ДокументОбъект.Товары.Итог("СуммаНДСВознаграждения") > 0; // В этом виде документов по-другому
		Если НЕ УчитыватьНДС Тогда
			Возврат ЕстьНДС;
		ИначеЕсли НЕ ЕстьНДС И НЕ ПрименяетсяОсвобождениеОтУплатыНДС Тогда
			Возврат Ложь;		
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ОпределитьСчетФактураТребуется()

// Определяет дату начала налогового периода для НДС по учетной политике
Функция ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено) Экспорт
	
	Если УчетнаяПолитикаНУ = неопределено Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация, "Нал");
	ИначеЕсли не УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") тогда
		 Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат ?(Дата >= '20080101', НачалоКвартала(Дата), НачалоМесяца(Дата));
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Или Дата >= '20080101' Тогда
		Результат = НачалоКвартала(Дата);
	Иначе
		Результат = НачалоМесяца(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет дату окончания налогового периода для НДС по учетной политике
Функция ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено) Экспорт
	
	Если УчетнаяПолитикаНУ = неопределено Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация, "Нал");
	ИначеЕсли не УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") тогда
		 Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат ?(Дата >= '20080101', КонецКвартала(Дата), КонецМесяца(Дата));
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Или Дата >= '20080101' Тогда
		Результат = КонецКвартала(Дата);
	Иначе
		Результат = КонецМесяца(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция производит поиск документа заданного вида (счета-фактуры), имеющего в табличной части "ДокументыОснования" значение,
// равное переданной ссылке.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйДокумент(ДокументСсылка, ВидДокумента = "СчетФактураВыданный", РазрешитьВыборСФНаАванс = Истина, ФлагТолькоПроведенные = Ложь, РазрешитьВыборТолькоСФНаАванс = Ложь, СтавкаНДСсАванса = Неопределено,  ДоговорАванса = Неопределено) Экспорт

	НайденныйДокумент = Неопределено;
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда

		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

		Запрос.Текст = 
		"ВЫБРАТЬ различные
		|	Ссылка 
		|ИЗ
		|	Документ." + ВидДокумента + ".ДокументыОснования Как ТЧ_Документов
		|
		|ГДЕ
		|	ТЧ_Документов.ДокументОснование = &ДокументСсылка";
		Если ФлагТолькоПроведенные Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И ТЧ_Документов.Ссылка.Проведен И НЕ ТЧ_Документов.Ссылка.ПометкаУдаления
				|";
		КонецЕсли;
		Если Не РазрешитьВыборСФНаАванс Тогда
			ВидСчетаФактуры = ?(ВидДокумента = "СчетФактураВыданный", "ВидСчетаФактурыВыставленного", "ВидСчетаФактурыПолученного");
			Запрос.Текст = Запрос.Текст + " И Не Ссылка.ВидСчетаФактуры = Значение(Перечисление." + ВидСчетаФактуры + ".НаАванс)";
		ИначеЕсли ВидДокумента = "СчетФактураВыданный" И РазрешитьВыборСФНаАванс и РазрешитьВыборТолькоСФНаАванс Тогда
			Запрос.Текст = Запрос.Текст + " И Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)";
			Если ЗначениеЗаполнено(СтавкаНДСсАванса) Тогда
				Запрос.Текст = Запрос.Текст + " И Ссылка.СтавкаНДС = &СтавкаНДСсАванса";
				Запрос.УстановитьПараметр("СтавкаНДСсАванса", СтавкаНДСсАванса);
			КонецЕсли; 
			Если ЗначениеЗаполнено(ДоговорАванса) Тогда
				Запрос.Текст = Запрос.Текст + " И Ссылка.ДоговорКонтрагента = &ДоговорАванса";
				Запрос.УстановитьПараметр("ДоговорАванса", ДоговорАванса);
			КонецЕсли; 
		КонецЕсли;
		
		// Упорядочивание результатов
		Запрос.Текст = Запрос.Текст + "
			|	Упорядочить По";
		Если не ФлагТолькоПроведенные Тогда
			Запрос.Текст = Запрос.Текст + "
				|	Ссылка.Проведен убыв,
				|	Ссылка.ПометкаУдаления,
				|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
			|	Ссылка.Дата,Ссылка.Номер
			|";

		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

		Если ВыборкаИзЗапроса.Следующий() Тогда
			НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
		КонецЕсли;

	КонецЕсли;

	Возврат НайденныйДокумент;
	
КонецФункции // НайтиПодчиненныйДокумент()

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 
		
		Если МетаданныеОснования.Реквизиты.Найти("ИспользоватьДокументРасчетовКакСчетФактуру") <> Неопределено
			И МетаданныеОснования.Реквизиты.Найти("РасчетныйДокумент") <> Неопределено 
			И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
				Возврат Неопределено;
			Иначе
				Если ТипЗнч(ДокументСсылка.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
					И Не ДокументСсылка.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент.Сделка;
					МетаданныеОснования = ДокументСсылка.Метаданные();
					Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
						Возврат Неопределено;
					КонецЕсли;
				Иначе
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
					МетаданныеОснования = ДокументСсылка.Метаданные();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ПОМЕСТИТЬ ВрмТбл
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Если ТипЗнч(ИсключитьИзВыборкиСФ) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка В (&ИсключитьИзВыборкиСФ)
				|";
		Иначе
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка = &ИсключитьИзВыборкиСФ
				|";
		КонецЕсли;
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
			
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" СФ.Ссылка."+ЭлементОтбора.Ключ;
			ИначеЕсли ЭлементОтбора.Ключ = "СтавкиНДС" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СтавкаНДС В (&"+ЭлементОтбора.Ключ+")";
			ИначеЕсли ЭлементОтбора.Ключ = "СчетНаОплату" 
						И ВидДокумента = "СчетФактураВыданный" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СчетНаОплату В (&"+ЭлементОтбора.Ключ+")";
			Иначе
				
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") 
					ИЛИ ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ + " В (&"+ЭлементОтбора.Ключ + ")";
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ +" = &"+ЭлементОтбора.Ключ;
				КонецЕсли;

			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + ";";
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ Ссылка
	| ИЗ ВрмТбл
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.ПометкаУдаления,
	|	Ссылка.Проведен УБЫВ,
	|	Ссылка.Дата";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйСчетФактуру()

//Определяет налоговый периода по НДС
//
Функция ПолучитьУПНДСНалоговыйПериод(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат ?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал);
	КонецЕсли;
	
	Если УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("НДСНалоговыйПериод") Тогда
		Возврат УчетнаяПолитика.НДСНалоговыйПериод;
	КонецЕсли;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(Дата, Неопределено, Организация);
		
	Возврат ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), 
				?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал),
				УчетнаяПолитика.НДСНалоговыйПериод);

КонецФункции

Функция ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("ПорядокРегистрацииСчетовФактурНаАванс") Тогда
		Возврат УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс;
	КонецЕсли;
	
	ОшибкаВПолучении = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация, "Нал" ,Ложь);
		
	Возврат ?(ОшибкаВПолучении, Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы, УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс);

КонецФункции

// Функция формирует надпись каким образом формируется нумерация счетов фактур.
//
Функция ПредставлениеНумерацииСчетовФактурНаАванс(ОтдельнаяНумерацияСчетовФактурНаАванс) Экспорт
	Если ОтдельнаяНумерацияСчетовФактурНаАванс Тогда
		возврат "Отдельная нумерация счетов-фактур на аванс с префиксом ""А""";
	Иначе
		возврат "Единая нумерация всех выданных счетов-фактур";
	КонецЕсли;
КонецФункции // ПредставлениеНумерацииСчетовФактурНаАванс()

//***********************************************************************************************
//Преобразование промежуточных таблиц для НДС

// Преобразует таблицу значений в дерево значений, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "") Экспорт
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

		КонецЦикла; 
		
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ГруппировочныеКолонки) Тогда
		ТаблицаРезультатов.Индексы.Добавить(ГруппировочныеКолонки);
	КонецЕсли;
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева из  ДеревоРезультатов.Строки Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		//Поиск и заполнение подчиненными колонками
		МассивПодчиненныйхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныйхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
КонецФункции

Функция ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручки,Отказ, Заголовок, ЭтоВозврат = Ложь, ЭтоВозвратОтПокупателя = Ложь, СтруктураПараметров) Экспорт
	
	ВидДокумента = "";
	СтруктураШапкиДокумента.Свойство("ВидДокумента",ВидДокумента);
	
	ВестиСуммовойУчетПоСкладамБУ = СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам;
	
	Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли; 
	
	ДополнитьПараметрамиПартионногоУчетаНДС(СтруктураШапкиДокумента, Отказ);
	
	ТаблицаСписанияНДСПоСтрокам = РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Кол Из ТаблицаВыручки.Колонки Цикл
		Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти(Кол.Имя) = Неопределено Тогда
			ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения); 
		КонецЕсли; 
	КонецЦикла;
		
	ТаблицаВыручки.Колонки.Добавить("НДСВСтоимостиТоваров", Новый описаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	
	ЕстьСтавкаНДС = не (ТаблицаВыручки.Колонки.Найти("СтавкаНДС") = неопределено) И Не СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров");
	Если СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров") Тогда
		ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВСтоимостиТоваров,"НДСВСтоимостиТоваров")	
	КонецЕсли; 
	
	//************************************************************************
	// Определяем партии к списанию по регистру по ключевым наборам реквизитов.
	ТаблицаВыручки.Колонки.Добавить("СписыватьПоПартиямНДС", новый описаниеТипов("Булево"));
	ЕстьСкладВТЧ = не (ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено);
	ВыданоСообщениеБезНДС = Ложь;
	ВыданоСообщение0 = Ложь;
	
	Для каждого СтрокаСписания Из ТаблицаВыручки Цикл
		Если СтрокаСписания.Комиссионный Тогда
		//	Для комиссионных товаров учет НДС по партиям не ведется.
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСписания.Количество) Тогда
			// Строки с пустым количеством игнорируем
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			//Все партии приобретенных ТМЦ учтены в регистре, все надо списывать.
			СтрокаСписания.СписыватьПоПартиямНДС = Истина;

		ИначеЕсли ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)	Тогда
			
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		Иначе 
			 Если ЕстьСтавкаНДС Тогда
			     Если СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС и не ВыданоСообщениеБезНДС Тогда
					 ОбщегоНазначения.СообщитьОбОшибке("При реализации без НДС, НДС по приобретенным ценностям необходимо включать в стоимость реализуемой партии товаров (ст. 170 НК РФ).
					 |Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
				 ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 и не ВыданоСообщение0 Тогда
					 ОбщегоНазначения.СообщитьОбОшибке("При реализации с НДС 0%, вычет НДС по приобретенным ценностям возможен только после подтверждения ставки НДС 0% (п.3 ст. 172 НК РФ).
					 |До этого момента вычет должен быть заблокирован.
					 |Для автоматической блокировки вычета НДС в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					 |и выполнить все связанные с этим действия!", ВыданоСообщение0,Заголовок,СтатусСообщения.Информация);
				 КонецЕсли;
			 ИначеЕсли СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
				 или СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости
				 тогда
				 Если не ВыданоСообщениеБезНДС Тогда
					 Если ВидДокумента = "СписаниеТоваров" тогда
						 ОбщегоНазначения.СообщитьОбОшибке("При списании ТМЦ в результате инвентаризации на счет 94 <Недостачи и потери от порчи ценностей>,
						 	 | НДС по приобретенным ценностям необходимо включать в стоимость списываемой партии товаров.
						 	 | Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
							 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
					 Иначе
						 ОбщегоНазначения.СообщитьОбОшибке("Для автоматического контроля включения НДС в стоимость (исключения из стоимости) в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
							 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
					 КонецЕсли; 
				 КонецЕсли; 
			 КонецЕсли;
			
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
		КонецЕсли;
		
		Если ЕстьСтавкаНДС Тогда
			Если ЭтоВозврат тогда 
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;	 
			ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
			ИначеЕсли ЗначениеЗаполнено(СтрокаСписания.СтавкаНДС) Тогда
   				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
			КонецЕсли; 
		 КонецЕсли;
		 Если ЕстьСкладВТЧ тогда
			 Если НЕ ЗначениеЗаполнено(СтрокаСписания.Склад)  Тогда
				 СтрокаСписания.Склад = справочники.Склады.ПустаяСсылка();
			 КонецЕсли; 
		 КонецЕсли;
	КонецЦикла; 
	
	КолвоЭлементовКоллекции = ТаблицаВыручки.Количество(); 
	
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		ЭлементКоллекции = ТаблицаВыручки[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
		Если НЕ ЭлементКоллекции.СписыватьПоПартиямНДС Тогда 
			ТаблицаВыручки.Удалить(ЭлементКоллекции); 
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено Тогда
	    ТаблицаВыручки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли; 
	
	
	Если ТаблицаВыручки.Количество() = 0 Тогда
		//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
		Возврат ТаблицаСписанияНДСПоСтрокам;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	ЕстьОтборПоСкладу = СтруктураШапкиДокумента.ПартионныйУчетНДСВРазрезеСкладов И Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	Если не ЭтоВозвратОтПокупателя Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваровОстатки.Склад КАК Склад,
		|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
		|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	НДСПартииТоваровОстатки.Партия.Дата КАК ДатаПартии,
		|	НДСПартииТоваровОстатки.Партия КАК Партия,
		|	НДСПартииТоваровОстатки.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.КоличествоОстаток,
		|	НДСПартииТоваровОстатки.СтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА НДСПартииТоваровОстатки.КоличествоОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СтавкаНДС,
		|	НДСПартииТоваровОстатки.НДСОстаток
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Остатки(
		|			&МоментСписания,
		|			Организация = &Организация
		|				И Номенклатура В (&СписокНоменклатуры)
		|				И ВЫБОР
		|					КОГДА &ЕстьОтборПоСкладу = ИСТИНА
		|						ТОГДА Склад В (&СписокСкладов)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &ЭтоВозврат = ИСТИНА
		|						ТОГДА Партия.Контрагент = &Поставщик
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК НДСПартииТоваровОстатки
		|ГДЕ
		|	(НЕ НДСПартииТоваровОстатки.СтоимостьОстаток < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии,
		|	ДатаСФ,
		|	Партия,
		|	СчетФактура,
		|	Склад,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	СерияНоменклатуры,
		|	НДСВключенВСтоимость";
		
		Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
		Запрос.УстановитьПараметр("ЕстьОтборПоСкладу", ЕстьОтборПоСкладу);
		Запрос.УстановитьПараметр("Поставщик", ?(ЭтоВозврат, СтруктураШапкиДокумента.Контрагент, Неопределено));
		
		Если ЭтоВозврат Тогда
			ПартионныйУчетБУ = ложь;
		КонецЕсли; 
	Иначе
		
		СписокДокументовРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("ДокументПартии"),Истина);
		СписокДокументовПартий  = Новый массив;
		
		//Разделим документы на поступление и реализацию
		Для ИндексДокумента = 0 По СписокДокументовРеализации.Количество()-1 Цикл
			
			Если НЕ ЗначениеЗаполнено(СписокДокументовРеализации[ИндексДокумента]) Тогда
				СписокДокументовРеализации[ИндексДокумента] = Неопределено;
			Иначе
				ТипДокументаПартии = ТипЗнч(СписокДокументовРеализации[ИндексДокумента]);
				Если ТипДокументаПартии =  Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					или ТипДокументаПартии =  Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
					или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
					или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
					тогда
					
				Иначе
					СписокДокументовПартий.Добавить(СписокДокументовРеализации[ИндексДокумента]);
					СписокДокументовРеализации[ИндексДокумента] = Неопределено;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
		
		СписокДокументовРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовРеализации,Истина);
		
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("СписокДокументовРеализации", СписокДокументовРеализации);
		Запрос.УстановитьПараметр("СписокДокументовПартий", СписокДокументовПартий);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваров.Склад КАК Склад,
		|	НДСПартииТоваров.Номенклатура КАК Номенклатура,
		|	НДСПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НДСПартииТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
		|	НДСПартииТоваров.Партия.Дата КАК ДатаПартии,
		|	НДСПартииТоваров.Партия КАК Партия,
		|	НДСПартииТоваров.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПартииТоваров.СчетФактура КАК СчетФактура,
		|	НДСПартииТоваров.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
		|	НДСПартииТоваров.Количество КАК КоличествоОстаток,
		|	НДСПартииТоваров.Стоимость КАК СтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА НДСПартииТоваров.Количество > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПартииТоваров.ВидЦенности,
		|	НДСПартииТоваров.СтавкаНДС,
		|	НДСПартииТоваров.НДС КАК НДСОстаток,
		|	НДСПартииТоваров.Регистратор КАК ДокументРеализации
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваров
		|ГДЕ
		|	НДСПартииТоваров.Регистратор В(&СписокДокументовРеализации)
		|	И НДСПартииТоваров.Номенклатура В(&СписокНоменклатуры)
		|	И НДСПартииТоваров.ВидДвижения = &ВидДвиженияРасход
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСПартииТоваровОбороты.Склад,
		|	НДСПартииТоваровОбороты.Номенклатура,
		|	НДСПартииТоваровОбороты.ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОбороты.СерияНоменклатуры,
		|	НДСПартииТоваровОбороты.Партия.Дата,
		|	НДСПартииТоваровОбороты.Партия,
		|	НДСПартииТоваровОбороты.СчетФактура.Дата,
		|	НДСПартииТоваровОбороты.СчетФактура,
		|	НДСПартииТоваровОбороты.НДСВключенВСтоимость,
		|	НДСПартииТоваровОбороты.КоличествоРасход,
		|	НДСПартииТоваровОбороты.СтоимостьРасход,
		|	ВЫБОР
		|		КОГДА НДСПартииТоваровОбороты.КоличествоРасход > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	НДСПартииТоваровОбороты.ВидЦенности,
		|	НДСПартииТоваровОбороты.СтавкаНДС,
		|	НДСПартииТоваровОбороты.НДСРасход,
		|	НДСПартииТоваровОбороты.Партия
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Обороты КАК НДСПартииТоваровОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НДСПартииТоваровОбороты.Партия КАК Партия
		|		ИЗ
		|			РегистрНакопления.НДСПартииТоваров.Обороты(
		|					,
		|					&МоментСписания,
		|					Период,
		|					Организация = &Организация
		|						И Номенклатура В (&СписокНоменклатуры)
		|						И Партия В (&СписокДокументовПартий)) КАК НДСПартииТоваровОбороты
		|		ГДЕ
		|			НДСПартииТоваровОбороты.КоличествоРасход > 0) КАК СписанныеПартии
		|		ПО НДСПартииТоваровОбороты.Партия = СписанныеПартии.Партия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии УБЫВ,
		|	ДатаСФ УБЫВ,
		|	Партия УБЫВ,
		|	СчетФактура УБЫВ,
		|	Склад УБЫВ,
		|	Номенклатура УБЫВ,
		|	ХарактеристикаНоменклатуры УБЫВ,
		|	СерияНоменклатуры УБЫВ,
		|	НДСВключенВСтоимость УБЫВ";
			
	КонецЕсли; 

	МоментСписания = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	Если СтруктураШапкиДокумента.Свойство("ВидПередачи") И СтруктураПараметров.Свойство("Регистратор") 
		И СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру  Тогда
		МоментВремениСписания = Новый МоментВремени(СтруктураШапкиДокумента.Ссылка.Дата, СтруктураПараметров.Регистратор); 
		МоментСписания 	   	  = Новый Граница(МоментВремениСписания, ВидГраницы.Исключая);  
	КонецЕсли;

	Запрос.УстановитьПараметр("МоментСписания", 		МоментСписания);
	Запрос.УстановитьПараметр("Организация", 			СтруктураШапкидокумента.Организация);
	
	Запрос.УстановитьПараметр("СписокСкладов", 			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Склад")));
	Запрос.УстановитьПараметр("СписокНоменклатуры", 	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Номенклатура")));
	
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаКСписанию Из ТаблицаВыручки Цикл
		
		//Установим отбор таблицы запроса
		Отбор = Новый Структура("Номенклатура, ЕстьКоличество", СтрокаКСписанию.Номенклатура, Истина);
		Если ЕстьОтборПоСкладу и Не ЭтоВозвратОтПокупателя Тогда
			Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			Отбор.Вставить("ХарактеристикаНоменклатуры", СтрокаКСписанию.ХарактеристикаНоменклатуры);
			Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
				Отбор.Вставить("СерияНоменклатуры", СтрокаКСписанию.СерияНоменклатуры);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоВозвратОтПокупателя Тогда
			Отбор.Вставить("ДокументРеализации", СтрокаКСписанию.ДокументПартии);
		ИначеЕсли ЭтоВозврат и ЗначениеЗаполнено(СтрокаКСписанию.ДокументПартии) тогда
			Отбор.Вставить("Партия", СтрокаКСписанию.ДокументПартии);
		КонецЕсли;
		
		ОтборТаблицыПартийПоКлючу = ТаблицаПартий.НайтиСтроки(Отбор);
		СписатьПоКлючу = СтрокаКСписанию.Количество;
		
		// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания
		ТаблицаОстатки  = Новый ТаблицаЗначений;
		// Добавим колонку с индексом
		ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
			ТаблицаОстатки.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
		КонецЦикла;
		Индекс = 0;
		Для Каждого СтрокаТЧ Из ОтборТаблицыПартийПоКлючу Цикл
			НоваяСтрока = ТаблицаОстатки.Добавить();
			НоваяСтрока.ИндексНайденнойСтроки = Индекс;
			Для Каждого Колонка Из ТаблицаПартий.Колонки Цикл
				Если ПустаяСтрока(Колонка.Имя) ИЛИ Колонка.Имя = "QuieryId" Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		НаправлениеСортировкиДляНДС = ?(СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость, "Убыв", "Возр");
		НаправлениеСортировкиПартий = ?(ЭтоВозврат,"убыв","Возр");
		ТаблицаОстатки.Сортировать("ДатаПартии "+НаправлениеСортировкиПартий+", Партия "+НаправлениеСортировкиПартий+", ДатаСФ "+НаправлениеСортировкиПартий+", СчетФактура "+НаправлениеСортировкиПартий+", НДСВключенВСтоимость "+НаправлениеСортировкиДляНДС);
		
		ТаблицаСписанияПоСтроке = Новый ТаблицаЗначений;
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Партия");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("НДСВключенВСтоимость");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ВидЦенности");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СтавкаНДС");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетФактура");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Склад");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ХарактеристикаНоменклатуры");
		
		Для каждого СтрокаТаблицыПартийНДС Из ТаблицаОстатки Цикл
			
			Если НЕ СтрокаТаблицыПартийНДС.ЕстьКоличество Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицыПартийНДС.КоличествоОстаток=0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТаблицыСписания 						= ТаблицаСписанияПоСтроке.Добавить();
			СтрокаТаблицыСписания.Партия 				= СтрокаТаблицыПартийНДС.Партия;
			СтрокаТаблицыСписания.СчетФактура 			= СтрокаТаблицыПартийНДС.СчетФактура;
			СтрокаТаблицыСписания.Количество 			= Мин(СписатьПоКлючу, СтрокаТаблицыПартийНДС.КоличествоОстаток);
			СтрокаТаблицыСписания.Стоимость 			= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.СтоимостьОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			СтрокаТаблицыСписания.НДС 					= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.НДСОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			
			СтрокаТаблицыСписания.ВидЦенности 			= СтрокаТаблицыПартийНДС.ВидЦенности;
			СтрокаТаблицыСписания.НДСВключенВСтоимость 	= СтрокаТаблицыПартийНДС.НДСВключенВСтоимость;
			СтрокаТаблицыСписания.СтавкаНДС				= СтрокаТаблицыПартийНДС.СтавкаНДС;
			Если ЭтоВозвратОтПокупателя И Не СтруктураШапкиДокумента.ПартионныйУчетНДСВРазрезеСкладов 
				Тогда
			    СтрокаТаблицыСписания.Склад 			= Справочники.Склады.ПустаяСсылка();
			Иначе
				СтрокаТаблицыСписания.Склад				= СтрокаТаблицыПартийНДС.Склад;	
			КонецЕсли; 
				Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
					СтрокаТаблицыСписания.ХарактеристикаНоменклатуры = СтрокаТаблицыПартийНДС.ХарактеристикаНоменклатуры;
					Если СтрокаТаблицыПартийНДС.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
						СтрокаТаблицыСписания.СерияНоменклатуры = СтрокаТаблицыПартийНДС.СерияНоменклатуры;
					КонецЕсли;
				КонецЕсли;
			
			Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
			Иначе
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			КонецЕсли;
			
			СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
			
			Если ЕстьСтавкаНДС  и не ЭтоВозврат Тогда
				Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
				КонецЕсли;
			КонецЕсли;
						
			СписатьПоКлючу = СписатьПоКлючу - СтрокаТаблицыСписания.Количество;
			
			СтрокаТаблицыПартийНДС.КоличествоОстаток = СтрокаТаблицыПартийНДС.КоличествоОстаток - СтрокаТаблицыСписания.Количество;
			СтрокаТаблицыПартийНДС.СтоимостьОстаток = СтрокаТаблицыПартийНДС.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
			СтрокаТаблицыПартийНДС.НДСОстаток = СтрокаТаблицыПартийНДС.НДСОстаток - СтрокаТаблицыСписания.НДС;
			
			Если СписатьПоКлючу<=0 Тогда
				прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		//Распределение доп. расходов
		ПартииКСписнию = ТаблицаСписанияПоСтроке.Скопировать();
		ПартииКСписнию.Свернуть("Партия", "Количество, Стоимость");
		
		Для Каждого Партия Из ПартииКСписнию Цикл
			//Установим отбор таблицы запроса
			Отбор = Новый Структура("Номенклатура, Партия", СтрокаКСписанию.Номенклатура, Партия.Партия);
			Если ЕстьОтборПоСкладу Тогда
				Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				Отбор.Вставить("ХарактеристикаНоменклатуры", СтрокаКСписанию.ХарактеристикаНоменклатуры);
				Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
					Отбор.Вставить("СерияНоменклатуры", СтрокаКСписанию.СерияНоменклатуры);
				КонецЕсли;
			КонецЕсли;

			ОтборДляДопРасходов = ТаблицаПартий.НайтиСтроки(Отбор);
			
			//Определим коэффициент доп. расходов
			СуммаПоПартии = 0;
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				Если СтрокаПартии.ЕстьКоличество Тогда
					СуммаПоПартии = СуммаПоПартии + СтрокаПартии.СтоимостьОстаток;
				КонецЕсли;
			КонецЦикла;
			
			// Если в партии нулевая сумма, то списание доп. расходов производим пропорционально количеству.
			Если СуммаПоПартии = 0 Тогда
				КоличествоПоПартии = 0;
				Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
					Если СтрокаПартии.ЕстьКоличество Тогда
						КоличествоПоПартии = КоличествоПоПартии + СтрокаПартии.КоличествоОстаток;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Проверим наличие доп расходов
			Если СуммаПоПартии = 0 И КоличествоПоПартии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаПоПартии <> 0 Тогда
				К = Партия.Стоимость / СуммаПоПартии;
			Иначе
				К = Партия.Количество / КоличествоПоПартии;
			КонецЕсли;
			
			//Спишем доп. расходы
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				
				Если СтрокаПартии.ЕстьКоличество ИЛИ Окр(СтрокаПартии.СтоимостьОстаток*К,2,1) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыСписания = ТаблицаСписанияПоСтроке.Добавить();
				СтрокаТаблицыСписания.Партия = СтрокаПартии.Партия;
				СтрокаТаблицыСписания.СчетФактура = СтрокаПартии.СчетФактура;
				СтрокаТаблицыСписания.Стоимость = СтрокаПартии.СтоимостьОстаток * К;
				СтрокаТаблицыСписания.НДС = СтрокаПартии.НДСОстаток * К;
					
				Если ЭтоВозвратОтПокупателя И Не СтруктураШапкиДокумента.ПартионныйУчетНДСВРазрезеСкладов 
					Тогда
				    СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
				Иначе
					СтрокаТаблицыСписания.Склад					= СтрокаПартии.Склад;	
				КонецЕсли; 
				Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
					СтрокаТаблицыСписания.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
					Если СтрокаТаблицыПартийНДС.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
						СтрокаТаблицыСписания.СерияНоменклатуры = СтрокаПартии.СерияНоменклатуры;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаТаблицыСписания.ВидЦенности = СтрокаПартии.ВидЦенности;
				СтрокаТаблицыСписания.НДСВключенВСтоимость = СтрокаПартии.НДСВключенВСтоимость;
				СтрокаТаблицыСписания.СтавкаНДС				= СтрокаПартии.СтавкаНДС;
			
				Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаПартии.НДСВключенВСтоимость) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаПартии.НДСВключенВСтоимость) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
				Иначе
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				КонецЕсли;
				
				СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
				
				Если ЕстьСтавкаНДС и не ЭтоВозврат Тогда
					Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
					КонецЕсли;
				КонецЕсли;
			    				
				СтрокаПартии.СтоимостьОстаток = СтрокаПартии.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
				СтрокаПартии.НДСОстаток = СтрокаПартии.НДСОстаток - СтрокаТаблицыСписания.НДС;
				
			КонецЦикла;
			
		КонецЦикла;
		
		//Перенесем данные в итоговую таблицу движений
		Для Каждого СтрокаСписания ИЗ ТаблицаСписанияПоСтроке Цикл
			
			СтрокаТаблицыСписанияНДС = ТаблицаСписанияНДСПоСтрокам.Добавить();
			
			Для Каждого Кол Из ТаблицаСписанияНДСПоСтрокам.Колонки Цикл
				Если НЕ ТаблицаСписанияПоСтроке.Колонки.Найти(Кол.Имя) = Неопределено Тогда
					СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаСписания[Кол.Имя];
				ИначеЕсли НЕ ТаблицаВыручки.Колонки.Найти(Кол.Имя) = Неопределено Тогда 
					СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаКСписанию[Кол.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Таблицу значений перенесем в найденные строки
		Для Каждого СтрокаТЧ Из ТаблицаОстатки Цикл
			Для Каждого Колонка Из ТаблицаПартий.Колонки Цикл
				Если ПустаяСтрока(Колонка.Имя) ИЛИ Колонка.Имя = "QuieryId" Тогда
					Продолжить;
				КонецЕсли; 
				ОтборТаблицыПартийПоКлючу[СтрокаТЧ.ИндексНайденнойСтроки][Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
		КонецЦикла;
		
		Если СписатьПоКлючу>0 тогда
			ТекстСообщения = "Для целей учета НДС не списано " + Формат(СписатьПоКлючу, "ЧЦ=15; ЧДЦ=3") + " товара " + СтрокаКСписанию.Номенклатура + ?(НЕ ЗначениеЗаполнено(СтрокаКСписанию.Склад),"",", склад "+строка(СтрокаКСписанию.Склад));
			Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда 
				Если ЗначениеЗаполнено(СтрокаКСписанию.ХарактеристикаНоменклатуры) Тогда
					ТекстСообщения = ТекстСообщения + ", х-ка: " + СтрокаКСписанию.ХарактеристикаНоменклатуры;
				КонецЕсли;
				Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаКСписанию.СерияНоменклатуры) Тогда
					ТекстСообщения = ТекстСообщения + ", серия: " + СтрокаКСписанию.СерияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация"); 
	Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти("QuieryId") = Неопределено Тогда
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("QuieryId");
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);

	QuieryId = 0;
	
	Для каждого СтрокаСписания Из ТаблицаСписанияНДСПоСтрокам Цикл
		QuieryId = QuieryId + 1;
		СтрокаСписания.QuieryId = QuieryId;
		
		// Для ускорения поиска добавим строку в соответствие
		МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаСписания.КодОперацииПартииТоваров];
		Если МассивСтрокПоКоду = Неопределено Тогда
			СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаСписания.КодОперацииПартииТоваров, Новый Массив);
			МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаСписания.КодОперацииПартииТоваров];
		КонецЕсли;
		МассивСтрокПоКоду.Добавить(СтрокаСписания);
		
	КонецЦикла;
	
	Возврат ТаблицаСписанияНДСПоСтрокам;
	
КонецФункции

//***********************************************************************************************
//  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС

//Преименование колонок таблицы значений по данным соответствия
Процедура ПереименованиеКолонок(ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина) Экспорт
	
	Колонки = ТаблицаЗначений.Колонки;
	
	Для каждого Колонка Из СоответствиеНазваний Цикл
		Если Обратное Тогда
			СтароеНазвание = Колонка.Значение;
			НовоеНазвание =  Колонка.Ключ;
		Иначе
			СтароеНазвание = Колонка.Ключ;
			НовоеНазвание =  Колонка.Значение;
		КонецЕсли;
		Если Колонки.Найти(СтароеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы не обнаружена колонка с именем """+СтароеНазвание+"""! Переименование колонки не произведено.");
			КонецЕсли; 
		ИначеЕсли не Колонки.Найти(НовоеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы обнаружена колонка с именем """+НовоеНазвание+""", переименование существующей колонки """+СтароеНазвание+""" невозможно! Переименование колонки не произведено.");
			КонецЕсли; 
		Иначе
			Колонки[СтароеНазвание].Имя = НовоеНазвание;
		КонецЕсли;
	КонецЦикла; 
	

КонецПроцедуры

// Подготовка сокращенной структуры шапки для регистрации движений денежных средств по НДС
Функция СформироватьСокращеннуюСтруктуруШапкиДокументаДляДвиженияДенег(Ссылка, ВалютаРегламентированногоУчета, Отказ = Ложь) Экспорт
	
	МетаданныеДокумента = Ссылка.Метаданные();
	
	ВидДокумента = МетаданныеДокумента.Имя;
	СтруктураПараметров = Новый Структура("Дата, Организация,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,ДатаОплаты,Дата,ВидОперации
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |,"+?(ВидДокумента="АвансовыйОтчет","ФизЛицо","Контрагент"));
	 
	Если БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента).Направление = Неопределено тогда
		//Документ не обрабатывается в блоке расчета с контрагентами по регламентированному учету
		Отказ = Истина;
		Возврат СтруктураПараметров;
	Конецесли;
	
	//Получение реквизитов шапки
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать Ссылка, Дата ";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Для Каждого Реквизит из СтруктураПараметров Цикл
		Если не МетаданныеДокумента.Реквизиты.Найти(Реквизит.Ключ) = Неопределено Тогда
		    Запрос.Текст =  Запрос.Текст + ", "+Реквизит.Ключ;
		КонецЕсли; 
	КонецЦикла;
	 
	Запрос.Текст = Запрос.Текст+ " из Документ."+ВидДокумента+" как Док где Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка); 
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если СтруктураПараметров.КурсДокумента = Неопределено Тогда
		СтруктураПараметров.Вставить("КурсДокумента",1);
	КонецЕсли; 
	Если СтруктураПараметров.КратностьДокумента = Неопределено Тогда
		СтруктураПараметров.Вставить("КратностьДокумента",1);
	КонецЕсли; 
	
	// Дополнение данными, не содержащимися в структуре шапки документа
	ВидОперацииСтр = "";
	Если не СтруктураПараметров.ВидОперации = неопределено Тогда
		ВидОперацииСтр = " (" + СтруктураПараметров.ВидОперации + ")";
	КонецЕсли;
	Заголовок = "Проведение документа: " + СокрЛП(Ссылка) + ВидОперацииСтр;
	СтруктураПараметров.Вставить("Заголовок",Заголовок);
	
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("ВидДокумента",ВидДокумента);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);
	СтруктураПараметров.Вставить("Ссылка",Ссылка);
	СтруктураПараметров.Вставить("ВидДвиженияПоРасчетам","Оплата");
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров["ДатаОплаты"]) тогда
		СтруктураПараметров.Вставить("Период",СтруктураПараметров.Дата);
	Иначе
		СтруктураПараметров.Вставить("Период",КонецДня(СтруктураПараметров.ДатаОплаты));
	Конецесли;
	
	НаправлениеДвиженияДенежныхСредств = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураПараметров.ВидДокумента,СтруктураПараметров.ВидОперации); 
	
	СтруктураПараметров.Вставить("НаправлениеДвижения",НаправлениеДвиженияДенежныхСредств.Направление);
	Если НаправлениеДвиженияДенежныхСредств.РасчетыВозврат=Неопределено тогда
		// Установим вид расчетов по умолчанию
		СтруктураПараметров.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Расчеты);
	Иначе
		СтруктураПараметров.Вставить("РасчетыВозврат", НаправлениеДвиженияДенежныхСредств.РасчетыВозврат);
	КонецЕсли;
	
	ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаРегламентированногоУчета, СтруктураПараметров.Период);
	СтруктураПараметров.Вставить("КурсВалютыРегламентированногоУчета", ?(ДанныеОВалюте.Курс = 0, 1,ДанныеОВалюте.Курс));
	СтруктураПараметров.Вставить("КратностьВалютыРегламентированногоУчета", ?(ДанныеОВалюте.Кратность = 0, 1,ДанныеОВалюте.Кратность));
	//Зачистка промежуточных данных
	СтруктураПараметров.Удалить("ДатаОплаты");

	Возврат СтруктураПараметров;
	
 КонецФункции // СформироватьСокращеннуюСтруктуруШапкиДокументаДляДвиженияДенег()

// Подготовка таблицу документа оплаты для регистрации движений денежных средств по НДС
Процедура ПодготовитьТаблицуОплатДляДвиженияДенег(СтруктураПараметров) Экспорт
	
	ВВалюте = (Не СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ВалютаРегламентированногоУчета);
	
	//Получение данных таблицы расшифровки платежа
	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов
	СтруктураТаблицы = Новый Структура();
	Если СтруктураПараметров.ВидДокумента="АвансовыйОтчет" Тогда
		СтруктураТаблицы.Вставить("Контрагент"			, "Контрагент");
		СтруктураТаблицы.Вставить("СуммаСНДС"			, "Сумма");
		СтруктураТаблицы.Вставить("РублеваяСумма"		, "Сумма");
	Иначе	
		СтруктураТаблицы.Вставить("Контрагент"			, "ДоговорКонтрагента.Владелец");
		СтруктураТаблицы.Вставить("СуммаСНДС"			, "СуммаПлатежа");
		СтруктураТаблицы.Вставить("РублеваяСумма"		, "СуммаПлатежа");
	КонецЕсли;
	
	Если ВВалюте Тогда
		СтруктураТаблицы.Вставить("РублеваяСумма"		, "СуммаВзаиморасчетов");
	КонецЕсли; 
	
	СтруктураТаблицы.Вставить("ВалютнаяСумма"			, "СуммаВзаиморасчетов");

	СтруктураТаблицы.Вставить("СуммаВзаиморасчетов"		, "СуммаВзаиморасчетов");
	
	СтруктураТаблицы.Вставить("ДоговорКонтрагента"		, "ДоговорКонтрагента");
	СтруктураТаблицы.Вставить("КурсВзаиморасчетов"		, "КурсВзаиморасчетов");
	СтруктураТаблицы.Вставить("КратностьВзаиморасчетов"	, "КратностьВзаиморасчетов");
	СтруктураТаблицы.Вставить("ВидДоговора"				, "ДоговорКонтрагента.ВидДоговора");
	СтруктураТаблицы.Вставить("ВалютаВзаиморасчетов"	, "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураТаблицы.Вставить("РасчетыВУсловныхЕдиницах", "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураТаблицы.Вставить("ВедениеВзаиморасчетов"	, "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураТаблицы.Вставить("ВестиПоДокументамРасчетовСКонтрагентом"	, "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");
	
	СтруктураТаблицы.Вставить("Сделка"					, "Сделка");
	СтруктураТаблицы.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
	                          
	
	ИмяТЧ = ?(СтруктураПараметров.ВидДокумента="АвансовыйОтчет","ОплатаПоставщикам","РасшифровкаПлатежа");
	

	РеестрПлатежей = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(СтруктураПараметров.Ссылка, ИмяТЧ, СтруктураТаблицы).Выгрузить();
	
	//Определим наличие расчетов в условных единицах
	ЕстьРасчетыВУсловныхЕдиницах = ложь;

	Для Каждого СтрокаТаблицы из РеестрПлатежей Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				СтрокаТаблицы.Сделка			= Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ВВалюте Тогда
			СтрокаТаблицы.РублеваяСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.РублеваяСумма, СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.ВалютаРегламентированногоУчета,
														 СтрокаТаблицы.КурсВзаиморасчетов,      СтруктураПараметров.КурсВалютыРегламентированногоУчета, 
														 СтрокаТаблицы.КратностьВзаиморасчетов, СтруктураПараметров.КратностьВалютыРегламентированногоУчета);
			СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.РублеваяСумма;
		КонецЕсли;
		Если СтрокаТаблицы.РасчетыВУсловныхЕдиницах тогда
			ЕстьРасчетыВУсловныхЕдиницах = Истина;
		КонецЕсли;
	КонецЦикла;	
	
	СтруктураПараметров.Вставить("ЕстьРасчетыВУсловныхЕдиницах",ЕстьРасчетыВУсловныхЕдиницах);
	
	СтруктураПараметров.Вставить("Таблица",РеестрПлатежей);
	
 КонецПроцедуры // ПодготовитьТаблицуОплатДляДвиженияДенег()

//  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС
//***********************************************************************************************

Процедура СнятиеРезерваНДСПартииПоЗаказамПокупателя(ТаблицаПартий,СтруктураПараметров) Экспорт
КонецПроцедуры

// Доподняет структуру шапки документа параметрами ПартионныйУчетНДСвРазрезеСкладов и
// ПартионныйУчетНДСвРазрезеСерийИХарактеристик
//
Процедура ДополнитьПараметрамиПартионногоУчетаНДС(СтруктураШапкиДокумента, Отказ) Экспорт
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	
	Если Не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСкладов") Тогда
		Если Не УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСкладов") Тогда
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСкладов", Ложь);
		Иначе
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСкладов", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСкладов);
		КонецЕсли;
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик") Тогда
		Если Не УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик") Тогда
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСерийИХарактеристик", Ложь);
		Иначе
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСерийИХарактеристик", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение параметра учетной политики (налоговый учет) ПартионныйУчетНДСвРазрезеСкладов
//
Функция ВедетсяПартионныйУчетНДСВРазрезеСкладов(СтруктураШапкиДокумента, Отказ) Экспорт
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	
	Если Не УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСкладов") Тогда
		Возврат Ложь;
	Иначе
		Возврат УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСкладов;
	КонецЕсли;
		
	
КонецФункции

// Возвращает значение параметра учетной политики (налоговый учет) ПартионныйУчетНДСвРазрезеСерийИХарактеристик
//
Функция ВедетсяПартионныйУчетНДСвРазрезеСерийИХарактеристик(СтруктураШапкиДокумента, Отказ) Экспорт
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	
	Если Не УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик") Тогда
		Возврат Ложь;
	Иначе
		Возврат УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик;
	КонецЕсли;
	
КонецФункции

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ДокументОбъект.УчитыватьНДС
		   И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаНДС = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаНДС = СуммаНДС + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

// Функция возвращает ставку НДС.
//
// Параметры:
//  СтавкаНДС - Ставка НДС.
//
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	КонецЕсли;

	Возврат 0;

КонецФункции // ПолучитьСтавкуНДС()

////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО НДС

// Процедура используется для проведения документов по регистрам подсистемы НДС
// Вызывается из обработки "Проведение документов по регистрам НДС" и из 
// документа "Расчет НДС по продукции"
Процедура ДвижениеНДС(ТаблицаДокументов,НДСПродукции = Истина) Экспорт
	
	Для Каждого Строка из ТаблицаДокументов Цикл
		
		ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСтрокДокументов(Строка.Регистратор);
		ДополнитьСписанныеТоварыДаннымиПоКомиссии(Строка.Регистратор, ТаблицаСписания);
		Если ТаблицаСписания.Количество()>0 Тогда
			
			#Если Клиент Тогда
				Состояние("Проведение по НДС документа " + ТаблицаСписания[0].Регистратор);
			#КонецЕсли
			
			СтруктураПараметров = Новый Структура;
			
			// Приведение таблицы списания к требуемому виду
			УправлениеЗапасамиПартионныйУчет.ПодготовитьТаблицуСписания(СтруктураПараметров,ТаблицаСписания, Ложь, Истина, Истина);
			
			МоментКон = Новый МоментВремени(ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор);
			
			СтруктураПараметров.Вставить("УчетнаяПолитика", УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(МоментКон));
			
			СтруктураПараметров.Вставить("ТолькоДвиженияНДС");
			
			Организация = ТаблицаСписания[0].Организация;
			
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	Ложь);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете")<>Неопределено);
			
			// Движения - наборы записей по регистрам
			УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Регистратор);
			
			// Подготовка наборов записей
			УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина, Ложь);
			
			//Сохраним партионные регистры Упр
			СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Прочитать();
			ТаблицаДвижений = СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Выгрузить();
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(ТаблицаДвижений,СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр);
			
			СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Прочитать();
			ТаблицаДвижений = СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Выгрузить();
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(ТаблицаДвижений,СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр);
			
			Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
				Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаПоступления")
					ИЛИ ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания);
			УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры, Организация = Неопределено)
	
	Отказ = Ложь;
	
	СтруктураШапкиДокумента = ПолучитьСтруктуруШапкиДокументаПоСсылке(СтруктураПараметров.Регистратор);
	
	Если СтруктураПараметров.Свойство("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации") тогда
		
		Если НЕ СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницах") тогда
			СтруктураПараметров.Удалить("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации");
		ИначеЕсли НЕ СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах тогда
			СтруктураПараметров.Удалить("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации");
		КонецЕсли;

	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.УчитыватьНДС тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС И Не СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация <> Неопределено тогда
		СтруктураШапкиДокумента.Вставить("Организация",Организация);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.ПриходныйОрдерНаТовары") тогда
		
		ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСписанияРасходнымОрдером(ТаблицаСписания[0], СтруктураПараметров);
		
		Если ТаблицаСписания = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
		
		Если СтруктураПараметров.Свойство("ОсновнойДокумент") И ТипЗнч(СтруктураПараметров.ОсновнойДокумент)= Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	СтруктураПолейУчетнойПолитикиУУ = Новый Структура("ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Упр", СтруктураПолейУчетнойПолитикиУУ);
	
	// Если не указаны параметры учетной политики - движения по НДС не выполняем
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если НЕ СтруктураШапкиДокумента.СложныйУчетНДС тогда 
		СтруктураШапкиДокумента.Вставить("НДСвСтоимостиТоваров",Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
	КонецЕсли;
	
	ЭтоВозврат = СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" 
				   или СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ";
				   
	ЭтоВозвратОтПокупателя = СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя";
	
	ТаблицаПартий = ПолучитьТаблицуПартийДляСписанияНДС(СтруктураПараметров);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	// Особые случаи списания партий НДС
	Если ЭтоВозврат тогда
	
		УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок);
		Возврат;
	ИначеЕсли ЭтоВозвратОтПокупателя тогда
		
		ЗапросРасходныхОрдеров = Новый Запрос;
		ЗапросРасходныхОрдеров.Текст = "ВЫБРАТЬ
		                               |	ВЫБОР
		                               |		КОГДА ПартииТоваровНаСкладах.ДокументДвижения <> НЕОПРЕДЕЛЕНО
		                               |			ТОГДА ПартииТоваровНаСкладах.ДокументДвижения
		                               |		ИНАЧЕ ПартииТоваровНаСкладах.Регистратор
		                               |	КОНЕЦ КАК Регистратор,
		                               |	ВЫБОР
		                               |		КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		                               |			ТОГДА ПартииТоваровНаСкладах.Регистратор
		                               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		                               |	КОНЕЦ КАК РасходныйОрдерНаТовары
		                               |ИЗ
		                               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		                               |ГДЕ
		                               |	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
		                               |	И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
		                               |	И (ПартииТоваровНаСкладах.Регистратор В (&МассивРегистраторов)
		                               |			ИЛИ ПартииТоваровНаСкладах.ДокументДвижения В (&МассивРегистраторов))
		                               |	И ПартииТоваровНаСкладах.Период < &Период
		                               |
		                               |СГРУППИРОВАТЬ ПО
		                               |	ВЫБОР
		                               |		КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		                               |			ТОГДА ПартииТоваровНаСкладах.Регистратор
		                               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		                               |	КОНЕЦ,
		                               |	ВЫБОР
		                               |		КОГДА ПартииТоваровНаСкладах.ДокументДвижения <> НЕОПРЕДЕЛЕНО
		                               |			ТОГДА ПартииТоваровНаСкладах.ДокументДвижения
		                               |		ИНАЧЕ ПартииТоваровНаСкладах.Регистратор
		                               |	КОНЕЦ
		                               |ИТОГИ ПО
		                               |	Регистратор";
		
		МассивРеализация = Новый Массив;
		КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		МассивРеализация.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
		МассивРеализация.Добавить(КодыОпераций.Реализация);
		МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
		МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
		
		ЗапросРасходныхОрдеров.УстановитьПараметр("КодыСписание",МассивРеализация);
		
		МассивРегистраторов = ТаблицаСписания.ВыгрузитьКолонку("ДокументПередачи");
		ЗапросРасходныхОрдеров.УстановитьПараметр("МассивРегистраторов",МассивРегистраторов);
		// Возврат не может быть раньше реализации
		ЗапросРасходныхОрдеров.УстановитьПараметр("Период",СтруктураПараметров.Период);
		ЗапросРасходныхОрдеров.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
		
		ДеревоРасходныхОрдеров = ЗапросРасходныхОрдеров.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		СтруктураПараметров.Вставить("ДеревоРасходныхОрдеров",ДеревоРасходныхОрдеров);
		
		РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);
		УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, РаспределеннаяТаблицаСписания, Отказ, Заголовок);
		Возврат;
	// Закрытие заказов покупателя
	ИначеЕсли Организация <> Неопределено тогда
		ТаблицаПартий.Колонки.Добавить("Партия");
		МассивПартий = ТаблицаПартий.ВыгрузитьКолонку(ТаблицаПартий.Колонки.ДокументОприходования);
		ТаблицаПартий.ЗагрузитьКолонку(МассивПартий,ТаблицаПартий.Колонки.Партия);
		
		ТаблицаПартий.Колонки.Добавить("ЗаказПартии");
		МассивЗаказов = ТаблицаПартий.ВыгрузитьКолонку(ТаблицаПартий.Колонки.Заказ);
		ТаблицаПартий.ЗагрузитьКолонку(МассивЗаказов,ТаблицаПартий.Колонки.ЗаказПартии);
		
		ТаблицаПартий.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
		Для Каждого ТекСтрокаПартии Из ТаблицаПартий Цикл
			Если (ЗначениеЗаполнено(ТекСтрокаПартии.ЗаказПартии)) И (ТипЗНЧ(ТекСтрокаПартии.ЗаказПартии) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда 
				ТекСтрокаПартии.ОбособленныйУчетТоваровПоЗаказамПокупателей = ТекСтрокаПартии.ЗаказПартии.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
			КонецЕсли;
		КонецЦикла;	
		
		ТаблицаПартий.Колонки.КодОперации.Имя = "КодОперацииПартииТоваров";
		ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаПартий,Отказ, Заголовок, ЭтоВозврат, ЭтоВозвратОтПокупателя,СтруктураПараметров);
		СнятиеРезерваНДСПартииПоЗаказамПокупателя(ТаблицаНДСПартииСписания, СтруктураПараметров);
		Возврат;
	КонецЕсли;
	
	РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);

	Для каждого СтрокаРаспределеннойТаблицы из РаспределеннаяТаблицаСписания Цикл
		ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И (СтрокаРаспределеннойТаблицы.Комиссионный 
							   И СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС);
		Если ОтражатьНДСКомитента Тогда 
			СтрокаРаспределеннойТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ);
	
	// Получим таблицу НДС партий
	ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания,Отказ, Заголовок, ЭтоВозврат, ЭтоВозвратОтПокупателя, СтруктураПараметров);
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии не найдены или отражение в партионном учете НДС не производится.
		//Дальнейшая обработка не требуется
		Возврат;
	КонецЕсли;
	
	ВыполнитьДвиженияСписанияНДС(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
	
	МассивОрганизаций = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Организация");
	
	МассивОрганизаций = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций);
	
	УправлениеЗапасамиПартионныйУчет.УдалитьПустыеЭлементы(МассивОрганизаций);
	
	МассивПартий = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Партия");
	МассивПартий = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);
	
	ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
	
	ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);

	ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);	
	
КонецПроцедуры//СформироватьДвиженияПоНДС

// Процедура - вход для движений по НДС
// Параметры 
// СтруктураПараметров - структура, хранящая основные параметры модуля УправлениеЗапасамиПартионныйУчет 
// ТаблицаСписания - 	 таблица значений содержащая информацию о том что и в каком количестве нужно списывать,
// 						 обычно получается из регистра "СписанныеТовары"
Процедура ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания) Экспорт
	
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	
	МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") тогда
		МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку(ТаблицаСписания.Колонки.Организация);
		МассивОрганизаций = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций);
		Для каждого Организация из МассивОрганизаций цикл
			СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры, Организация);
		КонецЦикла;
	Иначе
		СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры//ВыполнитьДвиженияПоНДС

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначенийСписанныеПартии(ТаблицаИсточник, ТаблицаПриемник)

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		Если СтрокаТаблицыИсточника.СписаниеПартий Тогда
			СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
        КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

// Добавляет в таблицу списанных товаров, данные по комиссии
//
// Параметры:
//  ОтчетКомиссионера       - документ-ссылка Отчет комиссионера о продажах.
//  ТаблицаСписанныхТоваров - выходная таблица значений, куда добавляются строки.
//
Процедура ДополнитьСписанныеТоварыДаннымиПоКомиссии(ОтчетКомиссионера, ТаблицаСписанныхТоваров) Экспорт
	
	Если ТипЗнч(ОтчетКомиссионера) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗнч(ТаблицаСписанныхТоваров) <> Тип("ТаблицаЗначений")
		ИЛИ ТаблицаСписанныхТоваров.Колонки.Найти("ВыставленСФ") <> Неопределено
		ИЛИ ТаблицаСписанныхТоваров.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСписанныеТовары = "";
	Для каждого Колонка Из ТаблицаСписанныхТоваров.Колонки Цикл
		Если Колонка.Имя = "МоментВремени" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСписанныеТовары = ТекстСписанныеТовары + ",
		|	СписанныеТовары." + Колонка.Имя + " КАК " + Колонка.Имя;
	КонецЦикла;
	
	ТаблицаСписанныхТоваров.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("Покупатель",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("ДатаСФ",      Новый ОписаниеТипов("Дата"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("ВыставленСФ", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ" + Сред(ТекстСписанныеТовары, 2) + "
	|ПОМЕСТИТЬ ВТ_СписанныеТовары
	|ИЗ
	|	&ТаблицаСписанныхТоваров КАК СписанныеТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки" + ТекстСписанныеТовары + "
	|ПОМЕСТИТЬ ВТ_КлючСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписанныеТовары КАК СписанныеТовары
	|		ПО ОтчетКомиссионераОПродажахТовары.НомерСтроки = СписанныеТовары.НомерСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК ДатаСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.ВыставленСФ КАК ВыставленСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура" + СтрЗаменить(ТекстСписанныеТовары, "СписанныеТовары.", "ВТ_КлючСтроки.") + "
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючСтроки КАК ВТ_КлючСтроки
	|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_КлючСтроки.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",                  ОтчетКомиссионера);
	Запрос.УстановитьПараметр("ТаблицаСписанныхТоваров", ТаблицаСписанныхТоваров);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСписанныхТоваров.Очистить();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаСписанныхТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБОЛОЧКИ ДЛЯ ВЫЗОВА СООТВЕТСТВУЮЩИХ ПРОЦЕДУР И ФУНКЦИЙ ИЗ МОДУЛЯ УЧЕТ НДС

Процедура ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);	
	
	Строка = "СписаниеНаЗатраты";
	
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(Строка, ТаблицаНДСПартииСписания,СтруктураПараметров);
	
	Если ДанныеДляОбработки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);	

КонецПроцедуры

// НДС по партиям - отразить поступление на склад-получатель
//
Процедура ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = "ВозвратОтКомиссионера, ВозвратОтПокупателя, 
			 |Комплектация, КорректировкаСерийИХарактеристик, ПередачаНаКомиссию, ПеремещениеМеждуСкладами,
			 |РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ";
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(Строка, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	ВыполнятьПоступление = Ложь;

	Если СтруктураШапкиДокумента.ВидДокумента = "РеализацияТоваровУслуг" тогда
	   Если  СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		   И СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		   
				ВыполнятьПоступление = Истина;
		КонецЕсли;
	Иначе
		ВыполнятьПоступление = Истина;
	КонецЕсли;
	
	Если ВыполнятьПоступление тогда
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Скопировать();
		ТаблицаДвиженийПартии.Очистить();
		
		КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
		
		ДанныеДляОбработки.Колонки.ЗаказСписания.Имя="ЗаказПокупателя";
		
		// Утановка признака ОбособленныйУчетТоваровПоЗаказамПокупателей для движений поступления при резервировании товаров
		Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") 
			и СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ] <> Неопределено 
			Тогда
			СоответствиеЗаказов = Новый Соответствие();
			Для Каждого СтрокаТаблицы ИЗ ДанныеДляОбработки Цикл
				Если СтрокаТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ Тогда
					
					ОбособленныйУчетТоваровПоЗаказамПокупателей = СоответствиеЗаказов[СтрокаТаблицы.ЗаказПокупателя];
				
					Если ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено Тогда
							
						СтруктураЗаказа = Новый Структура("ДоговорКонтрагента");
						УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаТаблицы.ЗаказПокупателя, СтруктураЗаказа);
							
						СтруктураДоговора = Новый Структура("ОбособленныйУчетТоваровПоЗаказамПокупателей");
						УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураЗаказа.ДоговорКонтрагента, СтруктураДоговора);
							
						СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей;
							
					Иначе
						СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОбособленныйУчетТоваровПоЗаказамПокупателей;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		// Добавим колонки для обработки заказа покупателя.
		Если ТаблицаДвиженийПартии.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей")= Неопределено Тогда
			ТаблицаДвиженийПартии.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"ОбособленныйУчетТоваровПоЗаказамПокупателей");
		КонецЕсли;
			
		Если ТаблицаДвиженийПартии.Колонки.Найти("ЗаказПокупателя")= Неопределено Тогда
			ТаблицаДвиженийПартии.Колонки.Добавить("ЗаказПокупателя");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвиженийПартии);
		
		ТаблицаДвиженийПартии.Колонки.Добавить("Услуга",Новый ОписаниеТипов("Булево"));
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"Услуга");
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Отказ);

		// Устанавливаем флаги модификации
		СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
									ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());
	КонецЕсли;
	
КонецПроцедуры//ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров

Процедура ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ)
	
	СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";
	
	ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, РаспределеннаяТаблицаСписания);
	
	Если ДанныеДляОбработки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
		
		Если НЕ Отказ Тогда
		
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок)
	
	
	СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";
	
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	Если Не ДанныеДляОбработки = Неопределено тогда
		КолНДСПредъявленныйРеализация0 = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество();
		
		УчетНДСФормированиеДвижений.ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Заголовок);
		
		СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0  = СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0 
						ИЛИ (КолНДСПредъявленныйРеализация0 <> СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество());
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет списание НДС и включение в стоимость - исключение НДС из стоимости
//
Процедура ВыполнитьДвиженияСписанияНДС(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
	// Включение НДС в стоимость может происходить только для строк с перечисленными ниже кодами операций
	СтрокаКодовОпераций = "Комплектация, ПередачаНаКомиссию, ПеремещениеМеждуСкладами, Реализация, 
						  |РеализацияРозница, РеализацияКомиссия, СписаниеНаЗатраты, СписаниеПоИнвентаризации, СписаниеПоОрдеру";

	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
	КолНДСВключенныйВСтоимость = СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество();
	КолНДСПредъявленный = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество();
	
	Если ДанныеДляОбработки.Количество()>0 тогда
			
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;
			
		// Включение НДС в стоимость
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Истина, СтруктураПараметров, Заголовок);
		// Исключение НДС из стоимости
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Ложь, СтруктураПараметров, Заголовок);
			
		Если ТаблицаДвиженийПартии.Количество() > 0 тогда
				
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
				
		КонецЕсли;
			
	Иначе
		
		// партии у которых не произошло включение - исключение НДС из стоимости
		СтрокаКодовОпераций = "КорректировкаСерийИхарактеристик, РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ,
							  |ВозвратОтКомиссионера";

		ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
		
	КонецЕсли;//Если ДанныеДляОбработки.Количество()>0 тогда
	
	ТаблицаНДСПартииСписания = ДанныеДляОбработки;
	
	СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);
	
	// НДС по партиям - отразить непосредственое списание.
	КолСтрокНДС = ТаблицаНДСПартииСписания.Количество();
	
	СтрокаПоступленияКомплектации = Неопределено;
	
	Для ИндексТекСтроки = 0 по КолСтрокНДС-1 цикл
		
		СтрокаТаблицыНДСПартииСписания = ТаблицаНДСПартииСписания[ИндексТекСтроки];
		
		// Для ускорения поиска добавим строку в соответствие
		Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") тогда
			МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров];
			Если МассивСтрокПоКоду = Неопределено Тогда
				СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров, Новый Массив);
				МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров];
			КонецЕсли;
			МассивСтрокПоКоду.Добавить(СтрокаТаблицыНДСПартииСписания);
		КонецЕсли;
		
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицыНДСПартииСписания);
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		// Для того, чтобы правильно отразить поступление партий НДС нужно изменить таблицу ТаблицаНДСПартииСписания
		Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СкладПолучатель) тогда
			СтрокаТаблицыНДСПартииСписания.Склад = СтрокаТаблицыНДСПартииСписания.СкладПолучатель;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.НоменклатураНовая) тогда
			СтрокаТаблицыНДСПартииСписания.Номенклатура = СтрокаТаблицыНДСПартииСписания.НоменклатураНовая;
			СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатуры = СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая;
			СтрокаТаблицыНДСПартииСписания.СерияНоменклатуры = СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая;
		Иначе	
			Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая) 
				или СтрокаТаблицыНДСПартииСписания.ИзменитьХарактеристику тогда
				СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатуры = СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая) 
				или СтрокаТаблицыНДСПартииСписания.ИзменитьСерию тогда
				СтрокаТаблицыНДСПартииСписания.СерияНоменклатуры = СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая;
			КонецЕсли;
		КонецЕсли;
		
		// Если это комплектация - поступление партий НДС выполняется особым способом
		Если СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров = КодыОпераций.Комплектация Тогда
			
			СтрокаТаблицыНДСПартииСписания.Партия = СтрокаТаблицыНДСПартииСписания.ДокументОприходованияНовый;
			
			Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация 
				и СтрокаТаблицыНДСПартииСписания.Количество <>0
				Тогда
				//Строка поступления для каждой комплектующей своя
			    СтрокаПоступленияКомплектации = Неопределено;
			КонецЕсли; 
			
			Если СтрокаПоступленияКомплектации = Неопределено Тогда
				СтрокаПоступленияКомплектации = ТаблицаНДСПартииСписания.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоступленияКомплектации,СтрокаТаблицыНДСПартииСписания);
				СтрокаПоступленияКомплектации.НДС = 0;
				СтрокаПоступленияКомплектации.Стоимость = 0;
				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
					и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация
					Тогда
				    СтрокаПоступленияКомплектации.Количество = СтруктураШапкиДокумента.Количество;
				ИначеЕсли СтрокаТаблицыНДСПартииСписания.Количество <>0 тогда
					СтрокаПоступленияКомплектации.Количество = СтрокаТаблицыНДСПартииСписания.КоличествоПоступление;
				КонецЕсли;
				СтрокаПоступленияКомплектации.СчетФактура = Неопределено;
				СтрокаПоступленияКомплектации.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
				СтрокаПоступленияКомплектации.СтавкаНДС   = Перечисления.СтавкиНДС.БезНДС;
				
				// Для ускорения поиска добавим строку в соответствие
				Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") тогда
					МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаПоступленияКомплектации.КодОперацииПартииТоваров];
					Если МассивСтрокПоКоду = Неопределено Тогда
						СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаПоступленияКомплектации.КодОперацииПартииТоваров, Новый Массив);
						МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаПоступленияКомплектации.КодОперацииПартииТоваров];
					КонецЕсли;
					МассивСтрокПоКоду.Добавить(СтрокаПоступленияКомплектации);
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация
				тогда
				//Строка с полным количеством поступления уже создна. Дополнение количества не требуется 
            Иначе
				Если СтрокаТаблицыНДСПартииСписания.Количество <>0 тогда
					СтрокаПоступленияКомплектации.Количество = СтрокаПоступленияКомплектации.Количество + 
															   СтрокаТаблицыНДСПартииСписания.КоличествоПоступление;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыНДСПартииСписания.Количество = 0;
			
		КонецЕсли;//Если СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров = КодыОпераций.Комплектация Тогда 

	КонецЦикла;//	Для каждого СтрокаТаблицыНДСПартииСписания из ТаблицаНДСПартииСписания цикл

	СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
								ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());
										
	СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость = СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость
								ИЛИ (КолНДСВключенныйВСтоимость <> СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество());
										
	СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный = СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный
								ИЛИ (КолНДСПредъявленный <> СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество());
										

КонецПроцедуры//ВыполнитьДвиженияСписанияНДС

// ОБОЛОЧКИ ДЛЯ ВЫЗОВА СООТВЕТСТВУЮЩИХ ПРОЦЕДУР И ФУНКЦИЙ ИЗ МОДУЛЯ УЧЕТ НДС
////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ

// Параметр ДляКнигиПродаж устанавливается в случае, когда для документа могут быть получены данные как 
// для книги покупок, так и для книги продаж
Функция ПолучитьТаблицуДокументаНДС(ДокументСсылка, Ошибка = Ложь, ДляКнигиПродаж = Ложь) Экспорт
	
	ТипОснования = ТипЗнч(ДокументСсылка);
	
	// По ссылке нужно получить объект
	Если Документы.ТипВсеСсылки().СодержитТип(ТипОснования)	Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ТипОснования = ТипЗнч(ДокументСсылка.Ссылка);
		ДокументОбъект = ДокументСсылка;
	КонецЕсли;
	Попытка
		Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Возврат ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			Возврат ПолучитьТаблицуГТДИмпорт(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда
			Возврат ПолучитьТаблицуОтражениеПоступленияТоваровИУслугНДС(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Возврат ПолучитьТаблицуПоступлениеДопРасходов(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Возврат ПолучитьТаблицуСчетФактураПолученный(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			Возврат ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументОбъект, Ошибка, ДляКнигиПродаж);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Возврат ПолучитьТаблицуРеализацияТоваровУслуг(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Возврат ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Возврат ПолучитьТаблицуСчетФактураВыданный(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			Возврат ПолучитьТаблицуОтражениеРеализацииТоваровИУслугНДС(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			Возврат ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, Неопределено);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаПоТоварам);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаПоТоварам);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектамСтроительства, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуГТДИмпорт(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли);
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);
	ТаблицаПоТоварамРубли.Колонки.Удалить("НДСВал");
	
	Возврат ТаблицаПоТоварамРубли.Скопировать(Новый Структура("Содержание", "НДС"));
	
КонецФункции

Функция ПолучитьТаблицуОтражениеПоступленияТоваровИУслугНДС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеДопРасходов(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуСчетФактураПолученный(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Истина);
	
	ТаблицаПоВсемДокументам = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаПоДокументамОснованиям Цикл
		Если ТаблицаПоВсемДокументам = Неопределено Тогда
			ТаблицаПоВсемДокументам = СтрокаТаблицы.ТаблицаДанных;
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтрокаТаблицы.ТаблицаДанных, ТаблицаПоВсемДокументам);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПоВсемДокументам;
	
КонецФункции

Функция ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоДокументу;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	Если ДляКнигиПродаж Тогда
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументу, Неопределено, Неопределено);
	Иначе
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Неопределено, ТаблицаПоДокументу, Неопределено);
	КонецЕсли;
	
	Возврат ТаблицаПоДокументу;
	
КонецФункции

Функция ПолучитьТаблицуРеализацияТоваровУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтражениеРеализацииТоваровИУслугНДС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуСчетФактураВыданный(ДокументОбъект, Ошибка)
	
	Перем ТаблицаПоДокументамОснованиям, ТаблицаПоДокументуОснования;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
	
		Для Каждого СтрокаТаблицы Из ДокументОбъект.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
				ДокументОснованиеОбъект = СтрокаТаблицы.ДокументОснование.ПолучитьОбъект();
				ТаблицаПоДокументуОснования = ПолучитьТаблицуДокументаНДС(ДокументОснованиеОбъект, Ошибка);
				Если ТаблицаПоДокументуОснования <> Неопределено Тогда
					Если ТаблицаПоДокументамОснованиям = Неопределено Тогда
						ТаблицаПоДокументамОснованиям = ТаблицаПоДокументуОснования.Скопировать();
					Иначе	
						ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументуОснования, ТаблицаПоДокументамОснованиям);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		Возврат ТаблицаПоДокументамОснованиям;
		
	КонецЕсли;
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ВидЦенности");
	ТаблицаДокумента.Колонки.Добавить("СчетФактура");
	ТаблицаДокумента.Колонки.Добавить("Сумма");
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
	ТаблицаДокумента.Колонки.Добавить("НДС");
	ТаблицаДокумента.Колонки.Добавить("Событие");
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	НоваяСтрока.ВидЦенности = ?(ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс, Перечисления.ВидыЦенностей.АвансыПолученные,
																										Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
	НоваяСтрока.СчетФактура = ДокументОбъект.ДокументОснование;
	НоваяСтрока.Сумма = ДокументОбъект.Сумма;
	НоваяСтрока.СтавкаНДС = ДокументОбъект.СтавкаНДС;
	НоваяСтрока.НДС = ДокументОбъект.СуммаНДС;	
	НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

//	Возвращает КПП контрагента, укзанного в реквизите ИмяРеквизитаОтправителяПолучателя,
//	в том случае, если контрагент является подразделением контрагента документа
//
//	ИмяРеквизитаОтправителяПолучателя <Строка>	- "Грузоотправитель" или "Грузополучатель",
//												в зависимости от типа документа
//
Функция ПолучитьКПППодразделенияКонтрагента(ДокументСсылка, ИмяРеквизитаОтправителяПолучателя) Экспорт
	Перем КПП;
	
	КПП	= "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат КПП;
	КонецЕсли;
	
	МетаданныеДокумента	= ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") = Неопределено 
		ИЛИ МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизитаОтправителяПолучателя) = Неопределено Тогда
		// В документе нет Грузоотправителя/Грузополучателя
		Возврат КПП;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель.КПП, """") КАК КПП
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка
	|	И РеализацияТоваровУслуг.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И РеализацияТоваровУслуг.Грузополучатель <> РеализацияТоваровУслуг.Контрагент
	|	И РеализацияТоваровУслуг.Грузополучатель.ГоловнойКонтрагент = РеализацияТоваровУслуг.Контрагент
	|	И РеализацияТоваровУслуг.Грузополучатель.ОбособленноеПодразделение";
	
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", МетаданныеДокумента.Имя);
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "Грузополучатель", ИмяРеквизитаОтправителяПолучателя);
	
	Запрос = Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КПП	= Выборка.КПП;
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции

Функция РеквизитыПервичногоДокумента(Документ, ТЧ = "", Строка = 0, УказыватьВид = Ложь) Экспорт
	
	НомерНаПечать = "";
	ДатаНаПечать = "";
	МетаданныеДокумента = Документ.Метаданные();
	
	//Проверим дату и номер первичного документа в табличной части
	Если (ЗначениеЗаполнено(ТЧ)) и (Строка > 0) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерВходящегоДокумента", МетаданныеДокумента, ТЧ) И
			ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ДатаВходящегоДокумента", МетаданныеДокумента, ТЧ) Тогда
			
			Если НЕ Документ[ТЧ].Количество() < Строка-1 Тогда
				
				НомерНаПечать = Документ[ТЧ][Строка-1].НомерВходящегоДокумента;
				ДатаНаПечать = Формат(Документ[ТЧ][Строка-1].ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверим дату и номер первичного документа в шапке
	Если НЕ ЗначениеЗаполнено(НомерНаПечать) И НЕ ЗначениеЗаполнено(ДатаНаПечать) Тогда
		
		Если МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено И
			МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено Тогда
			
			НомерНаПечать = Документ.НомерВходящегоДокумента;
			ДатаНаПечать = Формат(Документ.ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг");
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если дата и номер первичного документа не указаны или не заполнены, используем дату и номер регистрации
	Если НЕ ЗначениеЗаполнено(НомерНаПечать) Тогда
		
		НомерНаПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНаПечать) Тогда
		
		ДатаНаПечать = Формат(Документ.Дата, "ДФ=дд.ММ.гггг");
		
	КонецЕсли;
	
	РеквизитыПервичногоДокумента = "№ "+ НомерНаПечать + " от " + ДатаНаПечать;
	
	Если УказыватьВид Тогда
		РеквизитыПервичногоДокумента = МетаданныеДокумента.Синоним + " " + РеквизитыПервичногоДокумента;
	КонецЕсли;
	
	Возврат РеквизитыПервичногоДокумента;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ И ПОДГОТОВКА ДАННЫХ ДЛЯ ПЕЧАТИ

// Процедура формирует параметры для печати универсального передаточного документа: 
// ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
Процедура СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати) Экспорт
	
	// Если в данных печати уже заполнены ФИО и должность кладовщика - ничего формировать не нужно
	Если ДанныеДляПечати.Свойство("ФИОКладовщика") И ЗначениеЗаполнено(ДанныеДляПечати.ФИОКладовщика) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеДляПечати.Свойство("КладовщикДляУПД") ИЛИ НЕ ДанныеДляПечати.Свойство("ДатаДокументаДляУПД")
		ИЛИ НЕ ДанныеДляПечати.Свойство("ЗаКладовщикаПоПриказуДляУПД") ИЛИ НЕ ДанныеДляПечати.Свойство("Организация") Тогда
		ДанныеДляПечати.Вставить("ФИОКладовщика", 		"");
		ДанныеДляПечати.Вставить("ДолжностьКладовщика", "");
	 	Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляПечати.КладовщикДляУПД) Тогда
		ФамилияИмяОтчествоФизЛица  	  = ФормированиеПечатныхФорм.ФамилияИмяОтчество(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД);
		ФамилияИмяОтчествоКладовщика  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИОКладовщика         		  = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);
		ФИОКладовщика = ФИОКладовщика  + ?(ЗначениеЗаполнено(ДанныеДляПечати.ЗаКладовщикаПоПриказуДляУПД), " " + ДанныеДляПечати.ЗаКладовщикаПоПриказуДляУПД, "");
		
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД, ДанныеДляПечати.Организация);
		ДолжностьКладовщика       	  = ПодразделениеДолжностьФизЛица.Должность;
	Иначе
		ФИОКладовщика		          = "";
		ДолжностьКладовщика 		  = "";
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ФИОКладовщика", 		ФИОКладовщика);
	ДанныеДляПечати.Вставить("ДолжностьКладовщика", ДолжностьКладовщика);
	
КонецПроцедуры // СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента

Процедура ВывестиРеквизитыКомиссионера(Организация, Поставщик, Покупатель, Дата, Макет, ТабДокумент)
	
	Если ТипЗнч(Покупатель) = Тип("СправочникСсылка.Контрагенты") 
		И (ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Поставщик) = Тип("Массив")) Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
		
		СведенияОКомиссионере = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
		
		НаименованиеКомиссионера = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ПолноеНаименование,");
		ЮридическийАдресКомиссионера = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес,");
		ИННКомиссионера = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь);
		КППКомиссионера = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		
		ОбластьМакета.Параметры.ПредставлениеКомиссионера = "Составлен комиссионером (агентом): " + НаименованиеКомиссионера 
			+ ", " + ЮридическийАдресКомиссионера 
			+ ", ИНН/КПП: " + ИННКомиссионера 
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, "");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента) Экспорт
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	ДанныеСчетаФактуры = Новый Структура;
	ДанныеСчетаФактуры.Вставить("Номер", 			  ДанныеДокумента.Номер);
	ДанныеСчетаФактуры.Вставить("Дата", 			  ДанныеДокумента.Дата);
	ДанныеСчетаФактуры.Вставить("Организация", 		  ДанныеДокумента.Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент", 		  ДанныеДокумента.Контрагент);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры", 	  Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ДанныеСчетаФактуры.Вставить("Руководитель", 	  ДанныеДокумента.Руководитель);
	ДанныеСчетаФактуры.Вставить("ГлавныйБухгалтер",   ДанныеДокумента.ГлавныйБухгалтер);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	
	ДанныеСчетаФактуры.Вставить("НомерИсходногоДокумента", 			ДанныеДокумента.Номер);
	ДанныеСчетаФактуры.Вставить("ДатаИсходногоДокумента", 			ДанныеДокумента.Дата);  
	ДанныеСчетаФактуры.Вставить("НомерПлатежноРасчетногоДокумента", "");
	ДанныеСчетаФактуры.Вставить("ДатаПлатежноРасчетногоДокумента", 	"");

	ДанныеДляПечати = Документы.СчетФактураВыданный.СоздатьДокумент().СобратьДанныеДляПечатиПоДокументу(ДанныеДокумента.ДокументСсылка, ДанныеСчетаФактуры);
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",			ДанныеСчетаФактуры.Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		ДанныеСчетаФактуры.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		Ложь);
	ДанныеДляПечати.Вставить("НомерИсправления", 		"");
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		ДанныеСчетаФактуры.ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("КППКонтрагента", 	 		"");
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",   
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеДокумента.ДоговорКонтрагента, "ВидАгентскогоДоговора"));
	Если НЕ ДанныеДляПечати.Свойство("СчетФактураБезНДС") Тогда
		ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	Ложь);
	КонецЕсли;
	Если ДанныеДокумента.Свойство("ПередачаНаРеализациюПоКомиссии") И ДанныеДокумента.ПередачаНаРеализациюПоКомиссии Тогда
		ДанныеДляПечати.Вставить("ПередачаНаРеализациюПоКомиссии", ДанныеДокумента.ПередачаНаРеализациюПоКомиссии);
		Если ДанныеДляПечати.Грузоотправитель = "он же" Тогда
			ДанныеДляПечати.Грузоотправитель = ДанныеДляПечати.Поставщик;
		КонецЕсли;
	КонецЕсли;

	ДанныеДляПечати.Вставить("Основание", мшЗаполнитьОснование(ДанныеДокумента.ДокументОснование.Сделка));
	
	СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
	
	// Дата совершения факта хозяйственной жизни. Не может быть ранее даты составления УПД.
	Если ДанныеДокумента.Свойство("ДатаОтгрузкиПередачи") Тогда
		ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.ДатаОтгрузкиПередачи);
	Иначе
		ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.Дата);
	КонецЕсли;
	ДанныеДляПечати.Вставить("СтатусУПД", 			 2);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(ДанныеДокумента) Экспорт
	
	// сбор данных для печати счета фактуры
	ДанныеДляПечати = Документы.СчетФактураВыданный.СоздатьДокумент().СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ДанныеДокумента.Ссылка, ДанныеДокумента.Ссылка);
	Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// заполнение данных ФИОРуководителя и ФИОГлавногоБухгалтера из документа
	Если ДанныеДокумента.Свойство("Руководитель") И ЗначениеЗаполнено(ДанныеДокумента.Руководитель) 
		И ДанныеДляПечати.Свойство("ФИОРуководителя") Тогда 
		ДанныеДляПечати.ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ДанныеДокумента.Руководитель);
	КонецЕсли;
	Если ДанныеДокумента.Свойство("ГлавныйБухгалтер") И ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) 
		И ДанныеДляПечати.Свойство("ФИОГлавногоБухгалтера") Тогда
		ДанныеДляПечати.ФИОГлавногоБухгалтера = ОбщегоНазначения.ФамилияИнициалыФизЛица(ДанныеДокумента.ГлавныйБухгалтер);
	КонецЕсли;
	
	ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(ДанныеДляПечати.СуммаВключаетНДС, "СуммаВключаетНДС");
	
	КорректируемыеСчетаФактуры = Новый ТаблицаЗначений;
	КорректируемыеСчетаФактуры.Колонки.Добавить("НомерСчетаФактуры");
	КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаСчетаФактуры");
	КорректируемыеСчетаФактуры.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	КорректируемыеСчетаФактуры.Колонки.Добавить("НомерИсправления");
	КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаИсправления");
	ДанныеДляПечати.Вставить("КорректируемыеСчетаФактуры", КорректируемыеСчетаФактуры);
	
	ДанныеДляПечати.Вставить("КППКонтрагента",  	ДанныеДокумента.КППКонтрагента);
	
	// заполнение колонок код и артикул
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить Тогда
		ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения("", "ТоварКод");
		ДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
	ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварКод");
		ДанныеДляПечати.ТабличнаяЧасть.Колонки.ТоварАртикул.Имя = "ТоварКод";
	Иначе
		ДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
	КонецЕсли;
	
	ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДанныеДокумента.Ссылка, Истина);
	РеквизитыПередаточныхДокументов = "Универсальный передаточный документ " + УчетНДС.РеквизитыПервичногоДокумента(ИсправляемыйДокументРеализации);
	
	ДанныеДляПечати.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);
	
	ДанныеДляПечати.Вставить("СтатусУКД", 				2);
	ДанныеДляПечати.Вставить("Основание", 				Строка(ДанныеДокумента.ДоговорКонтрагента));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт

	Дата 		 = ДанныеДляПечати.ДатаСчетФактуры; 
	ЭтоПечатьУПД = ДанныеДляПечати.Свойство("СтатусУПД");
		
	БезПереходаПраваСобственности = Ложь;
	Если ЭтоПечатьУПД И (ДанныеДляПечати.СтатусУПД = 2) Тогда
		Если ДанныеДляПечати.Свойство("ПередачаНаРеализациюПоКомиссии") 
			И ДанныеДляПечати.ПередачаНаРеализациюПоКомиссии Тогда
			БезПереходаПраваСобственности = Истина;
		КонецЕсли;
	КонецЕсли;
		
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если ЭтоПечатьУПД Тогда
		Если ДанныеДляПечати.Исправление Тогда
			ОбластьМакета.Параметры.НомерИсправления = Строка(ДанныеДляПечати.НомерИсправления);
			ОбластьМакета.Параметры.ДатаИсправления  = Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		Иначе
			ОбластьМакета.Параметры.НомерИсправления = "--";
			ОбластьМакета.Параметры.ДатаИсправления  = "--";
		КонецЕсли;
	Иначе
		
		Если ДанныеДляПечати.Исправление Тогда
			ОбластьМакета.Параметры.НомерИсправления = "Исправление №" + Строка(ДанныеДляПечати.НомерИсправления) 
				+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		Иначе 	
			ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
		КонецЕсли;
	КонецЕсли;
	
	Если БезПереходаПраваСобственности Тогда
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "--";
		ОбластьМакета.Параметры.АдресПоставщика 		= "--";
		ОбластьМакета.Параметры.ИННпоставщика 			= "--";
		
	Иначе
	
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ?(ЭтоПечатьУПД, "", "Продавец: ") 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			
		ОбластьМакета.Параметры.АдресПоставщика = ?(ЭтоПечатьУПД, "", "Адрес: ") 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика = ?(ЭтоПечатьУПД, "", "ИНН/КПП продавца: ")
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
			
	КонецЕсли;
	
 	Если ЭтоПечатьУПД Тогда
		НомерНаПечатьСтрокой 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати);
		ДатаНаПечатьСтрокой 	= Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";
       	ОбластьМакета.Параметры.Номер = НомерНаПечатьСтрокой;
		ОбластьМакета.Параметры.Дата  =	ДатаНаПечатьСтрокой;
		ЗаголовокДляПечати = "Универсальный передаточный документ № " + НомерНаПечатьСтрокой + " от " +  ДатаНаПечатьСтрокой;
	Иначе
		ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура") + " г.";
		ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
	КонецЕсли;
	
	ТолькоУслуги = Истина;
	Для каждого СтрокаТовар Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаТовар.Товар.Услуга) Тогда
			ТолькоУслуги = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ") + "--";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") + "--";
		
	Иначе
		
		Если ТолькоУслуги Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ") + "--";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") + "--";
		Иначе
			СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			    ?(БезПереходаПраваСобственности, ДанныеДляПечати.Поставщик, 
				?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель)), Дата);
			СведенияОГрузополучателе  =  ?(БезПереходаПраваСобственности, СведенияОПокупателе, 
				УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата));
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ")
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
				"--", 
				?(ДанныеДляПечати.Грузоотправитель = "он же", 
					ДанныеДляПечати.Грузоотправитель, 
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,")));
			
			Если ДанныеДляПечати.Свойство("АдресДоставки") 
				И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
				ПредставлениеГрузополучателя = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					ДанныеДляПечати.АдресДоставки,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ДанныеДляПечати.АдресДоставки);
			Иначе
				ПредставлениеГрузополучателя = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					"--",
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
			КонецЕсли;
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
				
		КонецЕсли;
	
	КонецЕсли;

	СтрокаПоДокументу = "";
	Если ДанныеДляПечати.Свойство("ТаблицаДатОплат") Тогда
		Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			
			Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
				И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПоДокументу = СтрокаПоДокументу
				+ ?(ПустаяСтрока(СтрокаПоДокументу), ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № "),", ")
				+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
				+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
			
		КонецЦикла; 
	КонецЕсли;
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			СтрокаПоДокументу = ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № ") + "-- от --";
		Иначе
			СтрокаПоДокументу = ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № ") + "   от";
		КонецЕсли; 
	КонецЕсли; 
	Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
		// В УПД в статусе 2 ставятся прочерки показатели, установленные в качестве обязательных исключительно для счета-фактуры: 
		// - «К платежно-расчетному документу» (строка 7); 
		СтрокаПоДокументу = "--";
	КонецЕсли;
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	Если БезПереходаПраваСобственности Тогда
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = "--";
		ОбластьМакета.Параметры.АдресПокупателя 		= "--";
		ОбластьМакета.Параметры.ИННПокупателя 			= "--";
		
	Иначе
	
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ?(ЭтоПечатьУПД, "", "Покупатель: ") 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя = ?(ЭтоПечатьУПД, "", "Адрес: ")
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
		
		Если ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
			КПП = ДанныеДляПечати.КППКонтрагента;
		ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
		Иначе
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИННПокупателя = ?(ЭтоПечатьУПД, "", "ИНН/КПП покупателя: ")
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
			
	КонецЕсли;
		
	ОбластьМакета.Параметры.Валюта = ?(ЭтоПечатьУПД, "", "Валюта: наименование, код ")
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
			ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, "");		
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Если ЭтоПечатьУПД Тогда
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды 	= Истина;
			КолонкаТоварКод = "ТоварАртикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды 	= Истина;
			КолонкаТоварКод = "ТоварКод";
		Иначе
			ВыводитьКоды 	= Ложь;
			КолонкаТоварКод	= "";
		КонецЕсли;
	Иначе
		ВыводитьКоды 	= Ложь;
		КолонкаТоварКод	= "";
	КонецЕсли;

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию И 
			(Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Если (НЕ Строчка.СуммаВключаетНДС) ИЛИ Строчка.Цена = 0 Тогда
				Строчка.Цена = Окр(Строчка.СуммаСНДС / Строчка.Количество, 2);
			КонецЕсли;
		Иначе
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
		Строчка.ТоварКод = ?(ВыводитьКоды, Строчка[КолонкаТоварКод], "");
		
	КонецЦикла;
		
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, ТоварКод, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,
		|НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны", 
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС, НомерСтроки");
		
		
	//Миша 
	Сделка = ДанныеДляПечати.ДокументОснование.Сделка;
	ЕстьКонтракт =  ?(ЗначениеЗаполнено(Сделка),ЗначениеЗаполнено(Сделка.Контракт), Ложь);	 
	ДанныеДляПечати.Вставить("Основание", УчетНДС.мшЗаполнитьОснование(Сделка));
	
	Если ЕстьКонтракт тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		              |	КонтрактТовары.НаименованиеДляДокументов,
		              |	ПРЕДСТАВЛЕНИЕ(КонтрактТовары.Номенклатура.Наименование) КАК НаименованиеПолное,
		              |	КонтрактТовары.ЕдиницаИзмерения
		              |ИЗ
		              |	Документ.Контракт.Товары КАК КонтрактТовары
		              |ГДЕ
		              |	КонтрактТовары.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", Сделка.Контракт );

		Результат = Запрос.Выполнить();
		ТаблицаСЗаменойНоменклатуры = Результат.Выгрузить();
	КонецЕсли;
    ///Миша

		
	// Выводим строки таблицы
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	Если ЭтоПечатьУПД Тогда
		ОбластьМакетаПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	Иначе
		ОбластьМакетаПодвалНакладной = Новый ТабличныйДокумент;
	КонецЕсли;
	КоличествоСтраниц = 1;
	
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Строчка.НомерСтроки = НомерСтроки;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);	

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		
		НаименованиеТовараСтроки = СокрЛП(Строчка.Товар.Наименование);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.Товар.Наименование);
		
		//Миша                  
		//Если есть контракт и в выборке из запроса поле НаименованиеПолное соответствует значению 
		//Наименования из Строчки, то заменяем его
		Если ЕстьКонтракт тогда
			НайденнаяСтрока = ТаблицаСЗаменойНоменклатуры.Найти(НаименованиеТовараСтроки,"НаименованиеПолное");	
			Если Не НайденнаяСтрока = Неопределено тогда
				//Переименуем таблицу измерения
				НаименованиеЕдиницыСтроки = Строка(НайденнаяСтрока.ЕдиницаИзмерения);
				ОбластьМакета.Параметры.ЕдиницаИзмерения = НаименованиеЕдиницыСтроки;
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НайденнаяСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
				Если Не НайденнаяСтрока.НаименованиеДляДокументов = "" тогда
					НаименованиеТовараСтроки = НайденнаяСтрока.НаименованиеДляДокументов;
					ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(НаименованиеТовараСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		///Миша
				
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		Иначе
			ОбластьМакета.Параметры.Стоимость  = 0;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		КонецЕсли;	
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		КонецЕсли;
		
		Если ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
			И ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ОбластьМакета.Параметры.Акциз = "без акциза";
		КонецЕсли;	
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
			Иначе
				ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
				ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
				ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			КонецЕсли;
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.Цена       = "--";
			ОбластьМакета.Параметры.Стоимость  = "--";
			ОбластьМакета.Параметры.Акциз      = "--";
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
				ОбластьМакета.Параметры.Количество = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
				ОбластьМакета.Параметры.Цена = "--";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
			
			// Ставим прочерки в графах, которые установленные в качестве обязательных исключительно для счета-фактуры
			//- «В том числе сумма акциза» (графа 6); 
			//- «Налоговая ставка» (графа 7);
			//- «Цифровой код страны происхождения товара» (графа 10);
			//- «Краткое наименование страны происхождения товара» (графа 10а);
			//- «Номер таможенной декларации» (графа 11). 
			
			ОбластьМакета.Параметры.Акциз 		= "--";
			ОбластьМакета.Параметры.СтавкаНДС 	= "--";
			ОбластьМакета.Параметры.СуммаНДС 	= ?(Строчка.СуммаНДС <> 0 , Строчка.СуммаНДС, "--");
			ОбластьМакета.Параметры.СтранаПроисхожденияКод 	= "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны 	= "--";
			ОбластьМакета.Параметры.ПредставлениеГТД 		= "--";
			
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Если ЭтоПечатьУПД Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);
			КонецЕсли;
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				КоличествоСтраниц = КоличествоСтраниц + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначения.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	ДанныеДляПечати.Вставить("КоличествоЛистов", КоличествоЛистов);

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ВыборкаСтрокТовары.Итог("СуммаБезНДС");
	КонецЕсли;
	
	ИтогоСуммаНДС = ВыборкаСтрокТовары.Итог("СуммаНДС");
	Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
	    ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ?(ИтогоСуммаНДС <> 0, ИтогоСуммаНДС, "--");
	ИначеЕсли ДанныеДляПечати.СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ВыборкаСтрокТовары.Итог("СуммаСНДС");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
							
	ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике, "Свидетельство,");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
 	
КонецПроцедуры //ВывестиСчетФактуруВТабличныйДокумент

Процедура ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт
	
	Дата = ДанныеДляПечати.ДатаСчетФактуры;
	ЭтоПечатьУКД = ДанныеДляПечати.Свойство("СтатусУКД");
	
	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	СведенияОбПодразделенииПокупателя = Неопределено;
	Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
		РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
		Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
			СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата);
			СведенияОбПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);	
		КонецЕсли;
	КонецЕсли;
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ИндексПодразделения = 0;
	
	Если НЕ (ДанныеДляПечати.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИННКПППродавца = ?(ЭтоПечатьУКД, "", "ИНН/КПП продавца: ")
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
	Иначе
		ОбластьМакета.Параметры.ИННКПППродавца = "--"
	КонецЕсли;
	
	ОбластьМакета.Параметры.Номер = ДанныеДляПечати.Номер + ?(ИндексПодразделения <> 0, "/" + ИндексПодразделения, "");
	ОбластьМакета.Параметры.Дата  = Формат(ДанныеДляПечати.Дата, "ДЛФ=ДД; ДП=--");
	ОбластьМакета.Параметры.НомерИсправленияКорректировочного = ДанныеДляПечати.НомерИсправления;
	ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(ДанныеДляПечати.ДатаИсправления, "ДЛФ=ДД; ДП=--");
	
	РеквизитыОснований = "";
	
	Если ЭтоПечатьУКД Тогда
		Если ДанныеДляПечати.КорректируемыеСчетаФактуры.Количество()>0 Тогда
			Основание = ДанныеДляПечати.КорректируемыеСчетаФактуры[0];
			ОбластьМакета.Параметры.НомерОснования 				= Основание.НомерСчетаФактуры + ?(ИндексПодразделения <> 0, "/" + ИндексПодразделения, "");
			ОбластьМакета.Параметры.ДатаОсновнания  			= Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--");
			ОбластьМакета.Параметры.НомерИсправленияОснования 	= Основание.НомерИсправления;
			ОбластьМакета.Параметры.ДатаИсправленияОснования  	= Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		Иначе
			ОбластьМакета.Параметры.НомерОснования 				= "--";
			ОбластьМакета.Параметры.ДатаОсновнания  			= "--";
			ОбластьМакета.Параметры.НомерИсправленияОснования 	= "--";
			ОбластьМакета.Параметры.ДатаИсправленияОснования  	= "--";
		КонецЕсли;
	Иначе
		Для Каждого ОснованиеСчетаФактуры Из ДанныеДляПечати.КорректируемыеСчетаФактуры Цикл
			
			РеквизитыОснований = РеквизитыОснований + ?(РеквизитыОснований = "", "", ", ") 
			+ "№ " + ОснованиеСчетаФактуры.НомерСчетаФактуры 
			+ ?(ИндексПодразделения <> 0, "/" + ИндексПодразделения, "")
			+ " от " + Формат(ОснованиеСчетаФактуры.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--") 
			+ ", с учетом исправления № "
			+ ОснованиеСчетаФактуры.НомерИсправления + " от " + Формат(ОснованиеСчетаФактуры.ДатаИсправления, "ДЛФ=ДД; ДП=--");
			
		КонецЦикла;
		ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
	КонецЕсли;
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
	
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");

	Если ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
		КПП = ДанныеДляПечати.КППКонтрагента;
	ИначеЕсли СведенияОбПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	КонецЕсли;		
		
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	
	Если ЭтоПечатьУКД Тогда
		СтрокаВалюта = "";
	Иначе
		СтрокаВалюта = "Валюта: наименование, код ";
	КонецЕсли;
	ОбластьМакета.Параметры.Валюта = СтрокаВалюта + ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
			ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, "");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если НЕ ЭтоПечатьУКД Тогда
		ВывестиРеквизитыКомиссионера(ДанныеДляПечати.Организация, ДанныеДляПечати.Поставщик, ДанныеДляПечати.Покупатель, Дата, Макет, ТабДокумент);
	КонецЕсли;
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	ВыборкаТабличнойЧасти = ДанныеДляПечати.ТабличнаяЧасть;
	
	КоличествоСтраниц = 1;
	
	ИтогРазницаБезНДСУменьшение = 0;
	ИтогРазницаБезНДСУвеличение = 0;
	ИтогРазницаСНДСУменьшение   = 0;
	ИтогРазницаСНДСУвеличение   = 0;
	ИтогРазницаНДСУменьшение    = 0;
	ИтогРазницаНДСУвеличение    = 0;
				
	Для Каждого СтрокаТабличнойЧасти ИЗ ВыборкаТабличнойЧасти Цикл 
		
		// Порядок определения показателей при расчетной ставке НДС
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
			ИЛИ СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			
			СтрокаТабличнойЧасти.СтоимостьБезНДСДоИзменения = СтрокаТабличнойЧасти.СтоимостьСНДСДоИзменения;
			СтрокаТабличнойЧасти.СтоимостьБезНДСПослеИзменения = СтрокаТабличнойЧасти.СтоимостьСНДСПослеИзменения;
			
			СтрокаТабличнойЧасти.ЦенаДоИзменения = 0;
			СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0;
						
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения) Тогда
			СтрокаТабличнойЧасти.КоличествоДоИзменения    = 0;
			СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0;
			СтрокаТабличнойЧасти.ЦенаДоИзменения          = 0;
			СтрокаТабличнойЧасти.ЦенаПослеИзменения       = 0;
		Иначе
			Если СтрокаТабличнойЧасти.КоличествоДоИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаДоИзменения = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ЦенаДоИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаДоИзменения = Окр(СтрокаТабличнойЧасти.СтоимостьБезНДСДоИзменения / СтрокаТабличнойЧасти.КоличествоДоИзменения, 2);
			КонецЕсли;
			Если СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаПослеИзменения = Окр(СтрокаТабличнойЧасти.СтоимостьБезНДСПослеИзменения / СтрокаТабличнойЧасти.КоличествоПослеИзменения, 2);
			КонецЕсли;
			Если СтрокаТабличнойЧасти.КоличествоДоИзменения = 0 
				И СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения = "";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;               
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;               
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
		КонецЕсли;	
		       		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
		КонецЕсли;	
		          		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		КонецЕсли;
		
		Если ЭтоПечатьУКД Тогда
			
			Если ДанныеДляПечати.СтатусУКД = 2 Тогда
				ОбластьМакета.Параметры.СтавкаНДС 	= "--";
				ОбластьМакета.Параметры.Акциз 		= "--";
				ОбластьМакета.Параметры.СуммаНДСДоИзменения = "--";
				ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "--";
				ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
				ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
			Иначе
				ОбластьМакета.Параметры.Акциз = "без акциза";
			КонецЕсли;
			
		КонецЕсли;		
		
		Попытка
			Если Не ТабДокумент.ПроверитьВывод(ОбластьМакета) Тогда 
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				КоличествоСтраниц = КоличествоСтраниц + 1;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
		Исключение
			ТабДокумент.Вывести(ОбластьМакета);
		КонецПопытки;
				
		ИтогРазницаБезНДСУменьшение = ИтогРазницаБезНДСУменьшение + СтрокаТабличнойЧасти.РазницаБезНДСУменьшение;
		ИтогРазницаБезНДСУвеличение = ИтогРазницаБезНДСУвеличение + СтрокаТабличнойЧасти.РазницаБезНДСУвеличение;
		ИтогРазницаСНДСУменьшение   = ИтогРазницаСНДСУменьшение   + СтрокаТабличнойЧасти.РазницаСНДСУменьшение;
		ИтогРазницаСНДСУвеличение   = ИтогРазницаСНДСУвеличение   + СтрокаТабличнойЧасти.РазницаСНДСУвеличение;
		ИтогРазницаНДСУменьшение    = ИтогРазницаНДСУменьшение    + СтрокаТабличнойЧасти.РазницаНДСУменьшение;
		ИтогРазницаНДСУвеличение    = ИтогРазницаНДСУвеличение    + СтрокаТабличнойЧасти.РазницаНДСУвеличение;
	
	КонецЦикла;
	
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначения.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	ДанныеДляПечати.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ИтогРазницаБезНДСУменьшение;
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение = ИтогРазницаБезНДСУвеличение;
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ИтогРазницаСНДСУменьшение;
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ИтогРазницаСНДСУвеличение;
	
	Если ЭтоПечатьУКД И ДанныеДляПечати.СтатусУКД = 2 Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
	Иначе
		ОбластьМакета.Параметры.РазницаНДСУменьшение    = ?(ДанныеДляПечати.СчетФактураБезНДС, "без НДС", ИтогРазницаНДСУменьшение);
		ОбластьМакета.Параметры.РазницаНДСУвеличение    = ?(ДанныеДляПечати.СчетФактураБезНДС, "без НДС", ИтогРазницаНДСУвеличение);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);	
	ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт
	
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, ДанныеДляПечати.Дата);
		
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП 	 = "/" + КПП;
	КонецЕсли;
	ИННпоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
	ИННпоставщика = ?(ПустаяСтрока(ИННпоставщика), "", "ИНН") + ?(ПустаяСтрока(ИННпоставщика) ИЛИ ПустаяСтрока(КПП), " ", "/КПП ")
 		+ ИННпоставщика + КПП;
	
	СведенияОПокупателе   = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, ДанныеДляПечати.Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДляПечати.Свойство("КППКонтрагента") И ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
		КПП = ДанныеДляПечати.КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	ИННПокупателя = ?(ПустаяСтрока(ИННПокупателя), "", "ИНН") + ?(ПустаяСтрока(ИННПокупателя) ИЛИ ПустаяСтрока(КПП), " " , "/КПП ")
		+ ИННПокупателя + ?(ПустаяСтрока(КПП), "" , "/") + КПП;
		
	Если ЗначениеЗаполнено(ДанныеДляПечати.ДатаОтгрузкиПередачи) Тогда
		
		ШаблонДатыОтгрузкиПередачи = Формат(ДанныеДляПечати.ДатаОтгрузкиПередачи, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
		
		ДлинаДаты = 32;
		ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
		ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
		
		ДатаОтгрузкиПередачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
			СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
			СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа),
			"года");
	Иначе
		ДатаОтгрузкиПередачи = "«      »                    20     года";
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.ДатаОтгрузкиПередачи = ДатаОтгрузкиПередачи;
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННпоставщика), "" , ", ") + ИННпоставщика;
	ОбластьМакета.Параметры.ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННПокупателя), "" , ", ") + ИННПокупателя;
	
	ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры // ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент

Процедура ВывестиПодвалУниверсальногоКорректировочногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт

	Если ТипЗнч(ДанныеДляПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		И ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("СправочникСсылка.Контрагенты")
		И ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда

		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, ДанныеДляПечати.Дата);
	Иначе
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, ДанныеДляПечати.Дата);
	КонецЕсли;

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, ДанныеДляПечати.Дата);
	
	ИННпоставщика = "";
	ВидАгентскогоДоговора = ДанныеДляПечати.ВидАгентскогоДоговора;
	Если НЕ (ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ИННпоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
		ИННпоставщика = ?(ПустаяСтрока(ИННпоставщика), "", "ИНН") + ?(ПустаяСтрока(ИННпоставщика) ИЛИ ПустаяСтрока(КПП), " ", "/КПП ")
			+ ИННпоставщика + КПП;
		
	КонецЕсли;
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, ДанныеДляПечати.Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДляПечати.Свойство("КППКонтрагента") И ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
		КПП = ДанныеДляПечати.КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	ИННПокупателя = ?(ПустаяСтрока(ИННПокупателя), "", "ИНН") + ?(ПустаяСтрока(ИННПокупателя) ИЛИ ПустаяСтрока(КПП), " " , "/КПП ")
		+ ИННПокупателя	+ ?(ПустаяСтрока(КПП), "" , "/") + КПП;
		
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННпоставщика), "" , ", ") + ИННпоставщика;
	ОбластьМакета.Параметры.ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННПокупателя), "" , ", ") + ИННПокупателя;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Функция ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры = Неопределено, ТабДокумент = Неопределено) Экспорт
	
	Если ДанныеДокумента.Дата < ДатаНачалаПримененияУПД() Тогда
		ТекстСообщения = НСтр("ru = 'Применение формы универсального передаточного (отгрузочного) документа возможно только с "+ДатаНачалаПримененияУПД(Истина)+"!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	Если СтруктураОтбораСчетаФактуры = Неопределено Тогда
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.ДокументСсылка, "СчетФактураВыданный");
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.ДокументСсылка, "СчетФактураВыданный", СтруктураОтбораСчетаФактуры);
	КонецЕсли;
	
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		// Устанавливаем параметры печати и колонтитулы
		ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху 			= 12;
		ТабДокумент.ПолеСлева  			= 0;
		ТабДокумент.ПолеСнизу  			= 0;
		ТабДокумент.ПолеСправа 			= 0;
		ТабДокумент.АвтоМасштаб 		= Истина;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) ИЛИ СчетФактураТребуется Тогда
		
		// УПД печатается из документа счет-фактура
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По документу ""%1"" не выписан счет-фактура или он помечен на удаление!'"), ДанныеДокумента.ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СчетФактура, "Дата, ВидСчетаФактуры, Исправление,НомерИсправления,
			|СчетФактураБезНДС, КППКонтрагента");
		ДанныеДокумента.Вставить("Ссылка", 					СчетФактура); 
		ДанныеДокумента.Вставить("Дата", 					РеквизитыСФ.Дата);
		ДанныеДокумента.Вставить("ВидСчетаФактуры", 		РеквизитыСФ.ВидСчетаФактуры);
		ДанныеДокумента.Вставить("Исправление", 	 		РеквизитыСФ.Исправление);
		ДанныеДокумента.Вставить("НомерИсправления", 		РеквизитыСФ.НомерИсправления);
		ДанныеДокумента.Вставить("СчетФактураБезНДС", 		РеквизитыСФ.СчетФактураБезНДС);
		ДанныеДокумента.Вставить("КППКонтрагента", 	 		РеквизитыСФ.КППКонтрагента);
		
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		ДанныеДляПечати = СчетФактураОбъект.ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента);
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ДанныеДокумента.Свойство("ДатаОтгрузкиПередачи") Тогда
			ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.ДатаОтгрузкиПередачи);
		КонецЕсли;

		СчетФактураОбъект.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент);
		Возврат ТабДокумент;
		
	КонецЕсли;
	
	
	// УПД печатается по статусу 2
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДокументОснование", ДанныеДокумента.ДокументОснование);
	
	Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");

	ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);

	ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ВерхнийКолонтитул.Выводить          	= Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница 	= 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	НомерНаПечатьСтрокой 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати);
	ДатаНаПечатьСтрокой  	= Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";
	ЗаголовокДляПечати 	 	= "Универсальный передаточный документ № " + НомерНаПечатьСтрокой + " от " +  ДатаНаПечатьСтрокой;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   			= ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  			= "Лист [&НомерСтраницы]";
	
	Возврат ТабДокумент;
КонецФункции // ПечатьУниверсальногоПередаточногоДокумента

Функция ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры = Неопределено, ТабДокумент = Неопределено) Экспорт
	
	Если ДанныеДокумента.Дата < '20130101' Тогда
		ТекстСообщения = "Применение формы универсального корректировочного документа возможно только с 01 января 2013 года!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		// Устанавливаем параметры печати и колонтитулы
		ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху 			= 12;
		ТабДокумент.ПолеСлева  			= 0;
		ТабДокумент.ПолеСнизу  			= 0;
		ТабДокумент.ПолеСправа 			= 0;
		ТабДокумент.АвтоМасштаб 		= Истина;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент";
	КонецЕсли;
	
	Если СтруктураОтбораСчетаФактуры = Неопределено Тогда
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.Ссылка, "СчетФактураВыданный");
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.Ссылка, "СчетФактураВыданный", СтруктураОтбораСчетаФактуры);
	КонецЕсли;
		
	// УКД печатается из документа счет-фактура
	Если ЗначениеЗаполнено(СчетФактура) ИЛИ СчетФактураТребуется Тогда
		
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			ТекстСообщения = "По документу %1 не выписан счет-фактура";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ДанныеДокумента.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		
		ДанныеДляПечати = СчетФактураОбъект.ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(СчетФактура);
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		
		Возврат СчетФактураОбъект.ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДляПечати);
		
	КонецЕсли;
	
	// УКД печатается по статусу 2
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(ДанныеДокумента);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Таблица = ДанныеДляПечати.ТабличнаяЧасть;
	
	СуммаУменьшения = Таблица.Итог("РазницаБезНДСУменьшение") + Таблица.Итог("РазницаСНДСУменьшение") + Таблица.Итог("РазницаНДСУменьшение");
	СуммаУвеличения = Таблица.Итог("РазницаБезНДСУвеличение") + Таблица.Итог("РазницаСНДСУвеличение") + Таблица.Итог("РазницаНДСУвеличение");
	
	Если СуммаУменьшения = 0 И СуммаУвеличения = 0 Тогда
		ТекстСообщения = "Печать универсального корректировочного документа без изменения суммовых показателей не возможна!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 12;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент";
	
	Макет = ПолучитьОбщийМакет("УниверсальныйКорректировочныйДокумент");
	
	УчетНДС.ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	УчетНДС.ВывестиПодвалУниверсальногоКорректировочногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;
	
КонецФункции

//Миша (Используется в УПД, Счет-фактуре и в ТОРГ-12)
Функция мшЗаполнитьОснование(Сделка, ЗначениеПоУмолчанию = Неопределено) Экспорт 		
	Если ЗначениеЗаполнено(Сделка) тогда
		Основание = "Счет на оплату №" + ОбщегоНазначения.ПолучитьНомерНаПечать(Сделка)
		+ " от "+ Формат(Сделка.Дата,"ДФ=dd.MM.yyyy")+"г. ";
		Если ЗначениеЗаполнено(Сделка.Контракт) тогда      
			Если Сделка.Контракт.Муниципальный тогда 
				Основание = Основание + " по Муниципальному контракту № " +  Сделка.Контракт.НомерГосконтракта
				+ " от " + Формат(Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy") + "г. ";
			ИначеЕсли Сделка.Контракт.ПоГражданскоПравовомуДоговору тогда
				Основание = Основание + " по Гражданско-правовому договору № " + Сделка.Контракт.НомерГосконтракта 
				+ " от " + Формат(Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy")+"г. ";
			ИначеЕсли Сделка.Контракт.ПоДоговору тогда
				Основание = Основание + " по Договору №" + Сделка.Контракт.НомерГосконтракта
				+ " от " + Формат(Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy")+"г. ";
			ИначеЕсли Сделка.Контракт.ПоКонтракту тогда
				Основание = Основание + " по Контракту №" + Сделка.Контракт.НомерГосконтракта
				+ " от " + Формат(Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy")+"г. ";
			Иначе
				Если Не ЗначениеПоУмолчанию = Неопределено тогда
					Возврат ЗначениеПоУмолчанию;
				КонецЕсли;
				Основание = Основание + " по Государственному контракту №" + Сделка.Контракт.НомерГосконтракта
				+ " от " + Формат(Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy")+"г. ";
			КонецЕсли;
		КонецЕсли;
		Возврат Основание;                                 
	КонецЕсли;	
КонецФункции

Процедура ЗаполнитьОснование(ДанныеДокумента, ДанныеДляПечати) Экспорт
	РасшифровкаОснования = ДанныеДокумента.ДоговорКонтрагента;
	Основание = Строка(ДанныеДокумента.ДоговорКонтрагента);
	Если ДанныеДокумента.Свойство("Доверенность") И ЗначениеЗаполнено(ДанныеДокумента.Доверенность) Тогда
		Основание = Основание + ?(ПустаяСтрока(Основание), "", "; ") + ДанныеДокумента.Доверенность;
	Иначе
		ВедениеВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			ДокументОснование = Неопределено;
			ДанныеДокумента.Свойство("ДокументОснование", ДокументОснование);
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				Если ДокументОснование.Метаданные().Реквизиты.Найти("Сделка") <> Неопределено Тогда
					Сделка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Сделка");
					Если ЗначениеЗаполнено(Сделка) Тогда
						Основание = ОбщегоНазначения.СформироватьЗаголовокДокумента(Сделка, Строка(Сделка.Метаданные().Синоним));
						РасшифровкаОснования = Сделка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДанныеДляПечати.Вставить("Основание", Основание);
	ДанныеДляПечати.Вставить("РасшифровкаОснования", РасшифровкаОснования);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ ДЛЯ СОВМЕСТИМОСТИ С БП

Функция РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров) Экспорт
	
	КопияТаблицыСписания = ТаблицаСписания.Скопировать();
	
	РаспределеннаяТаблица = КопияТаблицыСписания.Скопировать();

	РаспределеннаяТаблица.Очистить();
	
	// Дополнительные колонки, используемые подсистемой НДС
	СтрокаНазванийКолонок = "Ценность, ВидЦенности, ДоговорПоставщика, Комиссионный, Партия,
							|НДС, СуммаБезНДС, ДокументОприходования,
							|ДокументОприходованияДата, НомерКорСтроки,
							|ДоговорКомиссии, УчетАгентскогоНДС,
							|Подразделение";

	СтруктураКолонокРаспределеннойТаблицы = Новый Структура(СтрокаНазванийКолонок);
	
	Для Каждого Элемент из СтруктураКолонокРаспределеннойТаблицы цикл
		Если РаспределеннаяТаблица.Колонки.Найти(Элемент.Ключ) = Неопределено тогда
			РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Для каждого СтрокаТаблицыСписания из КопияТаблицыСписания цикл
		
		РегистрУчета = "НаСкладах";
		
		МассивСтрокПартий = УправлениеЗапасамиПартионныйУчет.ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаТаблицыСписания, РегистрУчета);
		
		Для Каждого СтрокаПартии из МассивСтрокПартий цикл
		
			Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Приход 
			   И  Не СтрокаПартии.КодОперации = КодыОпераций.ВозвратОтПокупателя тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПартии.Количество <= 0 тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыСписания.Количество <= 0 тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ УправлениеЗапасамиПартионныйУчет.ПроверитьПартиюНаСкладеУпр(СтрокаПартии, СтрокаТаблицыСписания, СтруктураПараметров) тогда
				Продолжить;
			КонецЕсли;
			
			// НДС по таре не учитывается
			Если СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыСписания.Количество > СтрокаПартии.Количество тогда
				КоэффСписания = СтрокаПартии.Количество/СтрокаТаблицыСписания.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы = РаспределеннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределеннойТаблицы,СтрокаТаблицыСписания);
			
			СтрокаРаспределеннойТаблицы.НДС   = Окр(СтрокаТаблицыСписания.СуммаНДС * КоэффСписания,2,1);
			
			СуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.СуммаЗадолженностиБУ * КоэффСписания,2,1);
			СтрокаРаспределеннойТаблицы.СуммаБезНДС = СуммаЗадолженностиБУ - СтрокаРаспределеннойТаблицы.НДС;
			
			СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ* КоэффСписания,2,1);
			
			СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ - СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаЗадолженностиБУ;
			
			СтрокаТаблицыСписания.СуммаЗадолженностиБУ = СтрокаТаблицыСписания.СуммаЗадолженностиБУ - СуммаЗадолженностиБУ;
			СтрокаТаблицыСписания.СуммаНДС = СтрокаТаблицыСписания.СуммаНДС - СтрокаРаспределеннойТаблицы.НДС;
			СтрокаТаблицыСписания.Количество = СтрокаТаблицыСписания.Количество - СтрокаПартии.Количество;
				
			СтрокаРаспределеннойТаблицы.Количество = СтрокаПартии.Количество;
			СтрокаРаспределеннойТаблицы.КоличествоПоступление = Окр(СтрокаТаблицыСписания.КоличествоПоступление * КоэффСписания,3,1);
			СтрокаРаспределеннойТаблицы.Партия = СтрокаПартии.ДокументОприходования;
			СтрокаРаспределеннойТаблицы.ДокументОприходования = СтрокаПартии.ДокументОприходования;
			СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = СтрокаПартии.КодОперации;
			
			Если СтрокаПартии.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя тогда
				СтрокаРаспределеннойТаблицы.СкладПолучатель = СтрокаРаспределеннойТаблицы.Склад;
			КонецЕсли;
			
			СтрокаПартии.Количество = 0;
			СтрокаТаблицыСписания.КоличествоПоступление = СтрокаТаблицыСписания.КоличествоПоступление - СтрокаРаспределеннойТаблицы.КоличествоПоступление;
			
			СтрокаРаспределеннойТаблицы.Ценность = СтрокаРаспределеннойТаблицы.Номенклатура;
			
			СтрокаРаспределеннойТаблицы.Комиссионный = СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию;
			
			Если СтрокаРаспределеннойТаблицы.Комиссионный тогда
				
				Если ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования) тогда
					
					СтруктураРеквизитовДокумента = Новый Структура("Контрагент,ДоговорКонтрагента");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.ДокументОприходования, СтруктураРеквизитовДокумента);
					СтрокаРаспределеннойТаблицы.ДоговорКомиссии = СтруктураРеквизитовДокумента.ДоговорКонтрагента;
					СтруктураРеквизитовДоговора = Новый Структура("УчетАгентскогоНДС");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураРеквизитовДокумента.ДоговорКонтрагента, СтруктураРеквизитовДоговора);

					СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = СтруктураРеквизитовДоговора.УчетАгентскогоНДС;
				Иначе
					СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы.ВидЦенности	= Перечисления.ВидыЦенностей.Товары;
			
		КонецЦикла;//Для Каждого СтрокаПартии из МассивСтрокПартий цикл
		
		Если СтрокаТаблицыСписания.Количество > 0 И 
		   НЕ СтрокаТаблицыСписания.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
			
			СтрокаРаспределеннойТаблицы = РаспределеннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределеннойТаблицы,СтрокаТаблицыСписания);
			
			Если СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя тогда
				СтрокаРаспределеннойТаблицы.СкладПолучатель = СтрокаРаспределеннойТаблицы.Склад;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы.Ценность = СтрокаРаспределеннойТаблицы.Номенклатура;
			
			СтрокаРаспределеннойТаблицы.ВидЦенности	= Перечисления.ВидыЦенностей.Товары;
			
			СтрокаРаспределеннойТаблицы.НДС   = СтрокаТаблицыСписания.СуммаНДС;
			
			СтрокаРаспределеннойТаблицы.СуммаБезНДС = СтрокаТаблицыСписания.СуммаЗадолженностиБУ - СтрокаТаблицыСписания.СуммаНДС;
			
			СтрокаРаспределеннойТаблицы.Комиссионный = Ложь;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат РаспределеннаяТаблица;
	
КонецФункции//РаспределитьПартииПоТаблицеСписания

Функция ПолучитьСтруктуруШапкиДокументаПоСсылке(Знач Ссылка)

	Перем СтруктураКорректировкиЗаказа;
	
	МетаданныеДокумента = Ссылка.Метаданные();

	Если МетаданныеДокумента.Имя = "РасходныйОрдерНаТовары" Тогда

		СтруктураДокументаПередачи = Новый Структура("ДокументПередачи");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураДокументаПередачи);
		МетаданныеДокумента = СтруктураДокументаПередачи.ДокументПередачи.Метаданные();
		Ссылка = СтруктураДокументаПередачи.ДокументПередачи;
		
	ИначеЕсли МетаданныеДокумента.Имя = "ПриходныйОрдерНаТовары" Тогда

		СтруктураДокументаПеремещения = Новый Структура("ДокументПеремещения");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураДокументаПеремещения);
		МетаданныеДокумента = СтруктураДокументаПеремещения.ДокументПеремещения.Метаданные();
		Ссылка = СтруктураДокументаПеремещения.ДокументПеремещения;
		
	ИначеЕсли МетаданныеДокумента.Имя = "КорректировкаЗаказаПокупателя" тогда
		
		СтруктураКорректировкиЗаказа = Новый Структура("ЗаказПокупателя, Ссылка, Дата, Номер");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиЗаказа);
		МетаданныеДокумента = СтруктураКорректировкиЗаказа.ЗаказПокупателя.Метаданные();
		Ссылка = СтруктураКорректировкиЗаказа.ЗаказПокупателя;

	КонецЕсли;

	СтруктураШапкиДокумента = Новый Структура;

	СтруктураШапкиДокумента.Вставить("Ссылка");
	СтруктураШапкиДокумента.Вставить("Дата");
	СтруктураШапкиДокумента.Вставить("Номер");

	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя);
	КонецЦикла;

	УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка, СтруктураШапкиДокумента);
	
	Если МетаданныеДокумента.Имя = "ОтчетКомиссионераОПродажах" Тогда
		
		РезультатЗапросаПокупатели = ОбщегоНазначения.ПолучитьРеквизитОбъекта(Ссылка, "Покупатели");
		Если НЕ РезультатЗапросаПокупатели.Пустой() Тогда
			ТЧПокупатели = РезультатЗапросаПокупатели.Выгрузить();
			СтруктураШапкиДокумента.Вставить("КомиссияПоПокупателям", НЕ(ТЧПокупатели.Количество() = 1 И ТЧПокупатели[0].Покупатель = СтруктураШапкиДокумента.Контрагент));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураКорректировкиЗаказа <> Неопределено тогда
		
		СтруктураШапкиДокумента.Вставить("Ссылка" , СтруктураКорректировкиЗаказа.Ссылка);
		СтруктураШапкиДокумента.Вставить("Дата"   , СтруктураКорректировкиЗаказа.Дата);
		СтруктураШапкиДокумента.Вставить("Номер"  , СтруктураКорректировкиЗаказа.Номер);

	КонецЕсли;

	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") тогда

		СтруктураДоговора = Новый Структура ("ВидДоговора,
											 |УчетАгентскогоНДС, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");

		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураДоговора);
		СтруктураШапкиДокумента.Вставить("ВидДоговора", СтруктураДоговора.ВидДоговора);
		СтруктураШапкиДокумента.Вставить("УчетАгентскогоНДС", СтруктураДоговора.УчетАгентскогоНДС);
		СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов", СтруктураДоговора.ВалютаВзаиморасчетов);
		СтруктураШапкиДокумента.Вставить("РасчетыВУсловныхЕдиницах", СтруктураДоговора.РасчетыВУсловныхЕдиницах);
		
	Иначе

		СтруктураШапкиДокумента.Вставить("ВидДоговора", Неопределено);

	КонецЕсли;

	
	Если НЕ СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда

		СтруктураШапкиДокумента.Вставить("УчитыватьНДС", Истина);

	КонецЕсли;

	
	Если НЕ СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") Тогда

		СтруктураШапкиДокумента.Вставить("НДСВключенВСтоимость", Истина);

	КонецЕсли;

	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") Тогда

		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);

	КонецЕсли;

	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);	
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);
	
	Если СтруктураШапкиДокумента.Свойство("Организация") Тогда
		ОшибкаПолученияУчетнойПолитикиНУ = Ложь;
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ОрганизацияНеЯвляетсяПлательщикомНДС");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата,ОшибкаПолученияУчетнойПолитикиНУ , СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
		
		Если ОшибкаПолученияУчетнойПолитикиНУ Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС", Ложь);
		КонецЕсли; 
	Иначе
		СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС", Ложь);
	КонецЕсли;
	
	ВидПоступления = Неопределено;
	Если СтруктураШапкиДокумента.Свойство("ВидПоступления",ВидПоступления) тогда
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда
			СтруктураСклада = Новый Структура("СкладОрдер");
			УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураСклада);
			
			СтруктураСкладаОрдера = Новый Структура("Склад");
			УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураСклада.СкладОрдер,СтруктураСкладаОрдера);
			
			СтруктураШапкиДокумента.Вставить("СкладПриходногоОрдера",СтруктураСкладаОрдера.Склад);
		КонецЕсли;
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("ПредставлениеДокумента", СокрЛП(СтруктураШапкиДокумента.Ссылка));
	
	СтруктураШапкиДокумента.Вставить("ВедетсяУчетНДСПоФЗ134",ВедетсяУчетНДСПоФЗ134(СтруктураШапкиДокумента.Дата));

	Возврат СтруктураШапкиДокумента;
	
КонецФункции

Функция ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаПартийНДС, СтруктураПараметров)
	
	Перем СоответствиеКодовОперацийСтрокамНДСПартий;
	
	Результат = Новый ТаблицаЗначений;
		
	Для каждого Колонка ИЗ ТаблицаПартийНДС.Колонки Цикл
			
		Результат.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
	КонецЦикла;
	
	Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий",СоответствиеКодовОперацийСтрокамНДСПартий) тогда

		СтруктураКодовОпераций = Новый Структура(СтрокаКодовОпераций);
			
		Для каждого Элемент из СтруктураКодовОпераций Цикл
			МассивСтрокПоКодуОперации = СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров[Элемент.Ключ]];
			Если МассивСтрокПоКодуОперации <> Неопределено Тогда
				Для Каждого СтрокаТаблицы ИЗ МассивСтрокПоКодуОперации Цикл
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Результат;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции //ОтобратьСтрокиПоКодамОпераций

Функция ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, ТаблицаЗначений)
	
	СтруктураКодовОпераций = Новый Структура(СтрокаКодовОпераций);
	
	ВидСравненияКодаОперации = ВидСравнения.ВСписке;
		
	СписокОтбора = Новый СписокЗначений;
	Для каждого Элемент из СтруктураКодовОпераций Цикл
		СписокОтбора.Добавить(Перечисления.КодыОперацийПартииТоваров[Элемент.Ключ]);
	КонецЦикла;
	
	ПостроительТаблицаПартийНДС = Новый ПостроительЗапроса();
	ПостроительТаблицаПартийНДС.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
	Отбор = ПостроительТаблицаПартийНДС.Отбор;
	ЭлементОтбора = Отбор.Добавить("КодОперацииПартииТоваров");
	ЭлементОтбора.ВидСравнения = ВидСравненияКодаОперации;
	ЭлементОтбора.Значение = СписокОтбора;
	ЭлементОтбора.Использование = Истина;
		
	ПостроительТаблицаПартийНДС.Выполнить();
		
	Если ПостроительТаблицаПартийНДС.Результат.Пустой() тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПостроительТаблицаПартийНДС.Результат.Выгрузить();
	
КонецФункции //ОтобратьСтрокиПостроителемЗапроса

Функция ПолучитьТаблицуПартийДляСписанияНДС(СтруктураПараметров)
	
	// Партии могут списываться из регистров ПартииТоваровНаСкладахБухгалтерскийУчет и ПартииТоваровПереданныеБухгалтерскийУчет
	// Отберем из соответствующих таблиц партии с видом движения "расход"
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	ТаблицаПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Скопировать();
	ТаблицаПартий.Очистить();
	ТаблицаПартий.Колонки.Добавить("РегистрУчета");
	Для каждого СтрокаПартииНаСкладах из СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр Цикл
		Если СтрокаПартииНаСкладах.ВидДвижения = ВидДвиженияНакопления.Расход 
		   ИЛИ (СтрокаПартииНаСкладах.ВидДвижения = ВидДвиженияНакопления.Приход 
		   И   СтрокаПартииНаСкладах.КодОперации = КодыОпераций.ВозвратОтПокупателя) тогда
			CтрокаПартии = ТаблицаПартий.Добавить();
			ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииНаСкладах);
			Если СтрокаПартииНаСкладах.КодОперации = КодыОпераций.ВозвратОтПокупателяТекущийМесяц тогда
				// Возврат текущего месяца учитывается как сторно реализации
				CтрокаПартии.Количество = - CтрокаПартии.Количество;
				CтрокаПартии.Стоимость  = - CтрокаПартии.Стоимость;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаПартииПереданные из СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр Цикл
		Если СтрокаПартииПереданные.ВидДвижения = ВидДвиженияНакопления.Расход тогда
			CтрокаПартии = ТаблицаПартий.Добавить();
			ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииПереданные);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаПартий;
	
КонецФункции

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо ПТУ либо корректировку ПТУ)
// либо первоначальный документ ПТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументПоступления(ДокПоступления, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокПоступления) 
		И ТипЗнч(ДокПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")
		И (ДокПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументПоступления(ДокПоступления.ДокументПоступления, Исходный);
		
	Иначе
		Возврат ДокПоступления;
	КонецЕсли;
	
КонецФункции

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо РТУ либо корректировку РТУ)
// либо первоначальный документ РТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокРеализации) 
		И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И (ДокРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументРеализации(ДокРеализации.ДокументРеализации, Исходный);
		
	Иначе
		Возврат ДокРеализации;
	КонецЕсли;
	
КонецФункции

// Получает версию постановления в зависимости от переданной даты
//
Функция ПолучитьВерсиюПостановления(Дата) Экспорт
	
	НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();
	
	Если ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		И Дата >= НачалоПримененияИсправленныхСчетовФактур Тогда
		Возврат 2; // Дата начала применения исправленных счетов-фактур задана и меньше или равна переданной даты
	Иначе
		Возврат 1; // Дата начала применения исправленных счетов-фактур не задана или задана, но больше, чем переданная дата 
	КонецЕсли;	
		
КонецФункции		

// Возвращает порядок корректировки НДС (по проекту Федерального Закона N 79859-6)
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить порядок корректировки НДФЛ
// Возвращаемое значение:
//  Число   - 	версия постановления, 
//				1 - корректировка НДС выполняется по периоду отгрузки 
//              2 - корректировка НДС выполняется по периоду соглашения об изменении условий договора
//
Функция ПолучитьПорядокКорректировкиНДС(Дата) Экспорт 

	НачалоПримененияПравила = '20130701';
	
	Если Дата >= НачалоПримененияПравила Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции 

// Определяет наличие соглашения с контрагентом, на электронный обмен документами "Счет-фактура"
//
// Параметры
// 	СтруктураЗапроса - любой объект содержащий поля "Организация" и "Контрагент"
// 
Функция НаличиеСоглашенияОбменаЭД(СтруктураЗапроса) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД")
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураЗапроса) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ПараметрыЭД = Новый Структура("ВидЭд,НаправлениеЭД,Организация,Контрагент");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЭД, СтруктураЗапроса);
	
	ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.СчетФактура;
	ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
    		
	Результат = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат ЗначениеЗаполнено(Результат);
	
КонецФункции

// Возвращает дату начала применения печатной формы универсального передаточного документа
//
// Параметры:
//  ВВидеСтроки - если Ложь, возвращаемое значение имеет тип "Дата", в противном случае - "Строка".
//
Функция ДатаНачалаПримененияУПД(ВВидеСтроки = Ложь) Экспорт
	ДатаНачалаПрименения = Дата(2013,1,1);
	Если ВВидеСтроки Тогда
		Возврат Формат(ДатаНачалаПрименения, "ДЛФ=DD");
	Иначе
		Возврат ДатаНачалаПрименения;
	КонецЕсли;
КонецФункции

// Получает признак применения постановления Правительства РФ от 24.10.2013 г. № 952
Функция ПрименяетсяПостановление952(Дата) Экспорт

	Возврат Дата >= '20131106'; // Постановление вступает в силу с 6 ноября 2013 года

КонецФункции

// Возвращает признак применения Федерального Закона 134-ФЗ
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить признак применения 134-ФЗ
// Возвращаемое значение:
//  Булево - 	признак применения
//				Истина 	- ФЗ-134 применяется
//				Ложь 	- ФЗ-134 не применяется
//
Функция ВедетсяУчетНДСПоФЗ134(Дата) Экспорт

	Возврат Дата >= '20140101'; // Закон вступает в силу с 1 января 2014 года

КонецФункции

// Возвращает версию постановления Правительства РФ от 26.12.2011 г. № 1137
//
// Параметры
// 	Период  - 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить версию постановления
// Возвращаемое значение:
//  Число   - 	версия постановления,
//				0 - до начала применения постановления № 1137
//				1 - исходная версия постановления Правительства РФ от 26.12.2011 г. № 1137
//              2 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 952
//              3 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 735
//
Функция ВерсияПостановленияНДС1137(Период) Экспорт
	
	Если Период >= '20141001' Тогда 		// Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат 3;
	ИначеЕсли Период >= '20131106' Тогда 	// Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат 2;
	Иначе
		Возврат 1;                          // Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
	КонецЕсли;
	
КонецФункции

Функция ПрименяетсяОсвобождениеОтУплатыНДС(Организация, Период) Экспорт

	Отказ = Ложь;
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(Период, Отказ, Организация);
	
	Если Не Отказ Тогда
		Возврат УчетнаяПолитикаНУ.ПрименяетсяОсвобождениеОтУплатыНДС;
	Иначе
		Возврат Ложь;
	КонецЕсли;	

КонецФункции

// СЛУЖЕБНЫЕ ФУНКЦИИ ДЛЯ СОВМЕСТИМОСТИ С БП
////////////////////////////////////////////////////////////////////////////////

// ДВИЖЕНИЯ ПО НДС
////////////////////////////////////////////////////////////////////////////////

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт

	Если ДокументОбъект.ПометкаУдаления <> ДокументОбъект.Ссылка.ПометкаУдаления Тогда
		// Произошло изменение пометки на удаление
		
		//Попытаемся найти счет-фактуру
		СчетФактура = НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры);

		//Если потерпели неудачу, то необходимо ввести новый документ 
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			// Есть счет-фактура нужно установить для него пометку удаления
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
			
			Если ДокументОбъект.ПометкаУдаления Тогда
				Сообщить("Документ «" + СчетФактура + "» помечен на удаление.",СтатусСообщения.Информация);
			Иначе
				Сообщить("У документа «" + СчетФактура + "» снята пометка на удаление.",СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура УстановкаПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", ПометкаНаУдаление = Истина) Экспорт

	// Произошло изменение пометки на удаление
	//Попытаемся найти счет-фактуру
	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры);

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если ЗначениеЗаполнено(СчетФактура) И СчетФактура.ПометкаУдаления <> ПометкаНаУдаление Тогда

		// Есть счет-фактура, нужно установить для него пометку удаления
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		СчетФактураОбъект.УстановитьПометкуУдаления(ПометкаНаУдаление);
		Если ПометкаНаУдаление Тогда
			ОбщегоНазначения.СообщитьИнформациюПользователю("Документ <" + СчетФактураОбъект + "> помечен на удаление.")
		Иначе
			ОбщегоНазначения.СообщитьИнформациюПользователю("У документа <" + СчетФактураОбъект + "> снята пометка на удаление.")
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановкаПометкиНаУдалениеУСчетаФактуры()

// Процедура формирует список выбора кодов видов операций
//
// Параметры
//  ЧастьЖурнала  - Перечисления.ЧастиЖурналаУчетаСчетовФактур - в зависимости от значения параметра 
//                 формируется список выбора
//  СписокВыбора  - СписокЗначений - формируемый список кодов видов операций
//
Процедура ЗаполнитьСписокКодовВидовОпераций(ЧастьЖурнала, СписокВыбора, ИспользоватьКоды2015 = Ложь, ИспользоватьДополнительныеКоды = Ложь) Экспорт

	СписокВыбора.Очистить();

	Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
		
		СписокВыбора.Добавить("01", "01 - полученные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - авансы выданные");
		СписокВыбора.Добавить("03", "03 - возврат от покупателя");
		СписокВыбора.Добавить("04", "04 - полученные товары, работы, услуги от комитента");
		СписокВыбора.Добавить("05", "05 - авансы выданные комитенту");
		СписокВыбора.Добавить("10", "10 - полученные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - полученные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - авансы выданные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
		
		Если ИспользоватьКоды2015 Тогда
			Если ИспользоватьДополнительныеКоды Тогда
				СписокВыбора.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
				СписокВыбора.Добавить("17", "17 - Возврат от покупателя-физического лица");
				СписокВыбора.Добавить("18", "18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения");
				СписокВыбора.Добавить("19", "19 - Ввоз товаров из Евразийского экономического союза");
				СписокВыбора.Добавить("20", "20 - Ввоз импортных товаров на территорию РФ");
				СписокВыбора.Добавить("22", "22 - Возврат, зачет авансовых платежей, п.5 статьи 171, п.6 статьи 172 НК");
				СписокВыбора.Добавить("23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 статьи 171 НК");
				СписокВыбора.Добавить("24", "24 - Подтверждение ставки 0% после истечения 180 дней");
				СписокВыбора.Добавить("25", "25 - Подтверждение ставки 0%");
			КонецЕсли;
			СписокВыбора.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 статьи 169 НК");
			СписокВыбора.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК");
		КонецЕсли;
		
		СписокВыбора.Добавить("99", "99 - Вычет НДС по налоговым накладным");
        
	ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
		
		СписокВыбора.Добавить("01", "01 - реализованные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - авансы полученные");
		СписокВыбора.Добавить("03", "03 - возврат поставщику");
		СписокВыбора.Добавить("04", "04 - реализованные товары, работы, услуги комитента");
		СписокВыбора.Добавить("05", "05 - авансы полученные за товары, работы, услуги комитента");
		СписокВыбора.Добавить("06", "06 - налоговый агент, статья 161 НК");
		СписокВыбора.Добавить("07", "07 - списание за счет прибыли, пп.2 п.1 статьи 146 НК");
		СписокВыбора.Добавить("08", "08 - строительно-монтажные работы, пп.3 п.1 статьи 146 НК");
		СписокВыбора.Добавить("09", "09 - суммы, связанные с расчетами по оплате, статья 162 НК");
		СписокВыбора.Добавить("10", "10 - переданные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - реализованные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
		
		Если ИспользоватьКоды2015 Тогда
			Если ИспользоватьДополнительныеКоды Тогда
				СписокВыбора.Добавить("18", "18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения");
				СписокВыбора.Добавить("21", "21 - Восстановление НДС, п.8 статьи 145, п.3 статьи 170, статья 171.1 НК, а также при операциях, облагаемых по ставке 0%");
				СписокВыбора.Добавить("26", "26 - Счета-фактуры не составляются по письменному согласию сторон");
			КонецЕсли;
			СписокВыбора.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 статьи 169 НК");
			СписокВыбора.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК");
		КонецЕсли;
		
	КонецЕсли;	
		      
КонецПроцедуры	
